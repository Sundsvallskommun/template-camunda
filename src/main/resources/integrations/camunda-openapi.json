{
	"security": [{"basicAuth": []}],
	"components": {
		"schemas": {
			"AuthorizationDto": {
				"type": "object",
				"properties": {
					"resourceId": {
						"nullable": true,
						"description": "The resource Id. The value `*` represents an authorization ranging over all\ninstances of a resource.",
						"type": "string"
					},
					"permissions": {
						"nullable": true,
						"description": "An array of Strings holding the permissions provided by this authorization.",
						"type": "array",
						"items": {"type": "string"}
					},
					"groupId": {
						"nullable": true,
						"description": "The id of the group this authorization has been created for.",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance the historic\ninstance authorization is related to. Can be `null` if not related to a historic instance\nresource.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the authorization.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"format": "int32",
						"description": "The type of the authorization (0=global, 1=grant, 2=revoke). See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service.md#authorization-type)\nfor more information about authorization types.",
						"type": "integer"
					},
					"userId": {
						"nullable": true,
						"description": "The id of the user this authorization has been created for. The value `*`\nrepresents a global authorization ranging over all users.",
						"type": "string"
					},
					"resourceType": {
						"nullable": true,
						"format": "int32",
						"description": "An integer representing the resource type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#resources)\nfor a list of integer representations of resource types.",
						"type": "integer"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The removal time indicates the date a historic instance\nauthorization is cleaned up. A removal time can only be assigned to a historic\ninstance authorization. Can be `null` when not related to a historic instance\nresource or when the removal time strategy is end and the root process instance\nis not finished. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					}
				}
			},
			"DecisionRequirementsDefinitionXmlDto": {
				"type": "object",
				"properties": {
					"dmnXml": {
						"nullable": true,
						"description": "An escaped XML string containing the XML that this decision requirements definition\nwas deployed with. Carriage returns, line feeds and quotation marks\nare escaped.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the decision requirements definition.",
						"type": "string"
					}
				}
			},
			"AtomLink": {
				"type": "object",
				"properties": {
					"method": {
						"nullable": true,
						"description": "The http method.",
						"type": "string"
					},
					"rel": {
						"nullable": true,
						"description": "The relation of the link to the object that belongs to.",
						"type": "string"
					},
					"href": {
						"nullable": true,
						"description": "The url of the link.",
						"type": "string"
					}
				}
			},
			"JobDefinitionDto": {
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition this job definition is associated with.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "The id of the activity this job definition is associated with.",
						"type": "string"
					},
					"overridingJobPriority": {
						"nullable": true,
						"format": "int64",
						"description": "The execution priority defined for jobs that are created based on this definition.\nMay be `null` when the priority has not been overridden on the job\ndefinition level.",
						"type": "integer"
					},
					"deploymentId": {
						"nullable": true,
						"description": "The id of the deployment this job definition is related to. In a deployment-aware\nsetup, this leads to all jobs of the same definition being executed\non the same node.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant this job definition is associated with.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the job definition.",
						"type": "string"
					},
					"jobConfiguration": {
						"nullable": true,
						"description": "The configuration of a job definition provides details about the jobs which will be\ncreated. For example: for timer jobs it is the timer configuration.",
						"type": "string"
					},
					"jobType": {
						"nullable": true,
						"description": "The type of the job which is running for this job definition. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation)\nfor more information about job types.",
						"type": "string"
					},
					"suspended": {
						"nullable": true,
						"description": "Indicates whether this job definition is suspended or not.",
						"type": "boolean"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition this job definition is associated with.",
						"type": "string"
					}
				}
			},
			"ResourceReportDto": {
				"type": "object",
				"properties": {
					"warnings": {
						"nullable": true,
						"description": "A list of warnings occurred during parsing.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/ProblemDto"}
					},
					"errors": {
						"nullable": true,
						"description": "A list of errors occurred during parsing.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/ProblemDto"}
					}
				}
			},
			"TelemetryDataDto": {
				"type": "object",
				"properties": {
					"product": {"$ref": "#/components/schemas/TelemetryProductDto"},
					"installation": {
						"nullable": true,
						"description": "An id which is unique for each installation of Camunda. It is stored once per database so all\nengines connected to the same database will have the same installation ID.\nThe ID is used to identify a single installation of Camunda Platform.",
						"type": "string"
					}
				}
			},
			"GroupDto": {
				"type": "object",
				"properties": {
					"name": {
						"nullable": true,
						"description": "The name of the group.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the group.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "The type of the group.",
						"type": "string"
					}
				}
			},
			"PasswordPolicyRuleDto": {
				"description": "Describes a rule of a password policy.",
				"type": "object",
				"properties": {
					"parameter": {
						"description": "A map that describes the characteristics of a password policy rule, such as the minimum number of digits.",
						"additionalProperties": {"type": "string"},
						"type": "object"
					},
					"placeholder": {
						"nullable": true,
						"description": "A placeholder string that contains the name of a password policy rule.",
						"type": "string"
					}
				}
			},
			"AuthorizationUpdateDto": {
				"type": "object",
				"properties": {
					"resourceId": {
						"nullable": true,
						"description": "The resource Id. The value `*` represents an authorization ranging over all\ninstances of a resource.",
						"type": "string"
					},
					"permissions": {
						"nullable": true,
						"description": "An array of Strings holding the permissions provided by this authorization.",
						"type": "array",
						"items": {"type": "string"}
					},
					"groupId": {
						"nullable": true,
						"description": "The id of the group this authorization has been created for.",
						"type": "string"
					},
					"userId": {
						"nullable": true,
						"description": "The id of the user this authorization has been created for. The value `*`\nrepresents a global authorization ranging over all users.",
						"type": "string"
					},
					"resourceType": {
						"nullable": true,
						"format": "int32",
						"description": "An integer representing the resource type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#resources)\nfor a list of integer representations of resource types.",
						"type": "integer"
					}
				}
			},
			"HistoricIncidentDto": {
				"type": "object",
				"properties": {
					"annotation": {
						"nullable": true,
						"description": "The annotation set to the incident.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition this incident is associated with.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The key of the process definition this incident is associated with.",
						"type": "string"
					},
					"jobDefinitionId": {
						"nullable": true,
						"description": "The job definition id the incident is associated with.",
						"type": "string"
					},
					"incidentMessage": {
						"nullable": true,
						"description": "The message of this incident.",
						"type": "string"
					},
					"configuration": {
						"nullable": true,
						"description": "The payload of this incident.",
						"type": "string"
					},
					"causeIncidentId": {
						"nullable": true,
						"description": "The id of the associated cause incident which has been triggered.",
						"type": "string"
					},
					"incidentType": {
						"nullable": true,
						"description": "The type of incident, for example: `failedJobs` will be returned in case of an\nincident which identified a failed job during the execution of a\nprocess instance. See the [User Guide](/manual/develop/user-\nguide/process-engine/incidents/#incident-types) for a list of\nincident types.",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition this incident is associated with.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the incident should be removed by the History Cleanup job.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "The id of the execution this incident is associated with.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "The id of the activity this incident is associated with.",
						"type": "string"
					},
					"deleted": {
						"nullable": true,
						"description": "If true, this incident has been deleted.",
						"type": "boolean"
					},
					"createTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time this incident happened. \n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"rootCauseIncidentId": {
						"nullable": true,
						"description": "The id of the associated root cause incident which has been triggered.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant this incident is associated with.",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process\ncontaining this incident.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the incident.",
						"type": "string"
					},
					"endTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time this incident has been deleted or resolved. \n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"failedActivityId": {
						"nullable": true,
						"description": "The id of the activity on which the last exception occurred.",
						"type": "string"
					},
					"open": {
						"nullable": true,
						"description": "If true, this incident is open.",
						"type": "boolean"
					},
					"historyConfiguration": {
						"nullable": true,
						"description": "The payload of this incident at the time when it occurred.",
						"type": "string"
					},
					"resolved": {
						"nullable": true,
						"description": "If true, this incident has been resolved.",
						"type": "boolean"
					}
				}
			},
			"HistoricJobLogDto": {
				"type": "object",
				"properties": {
					"deletionLog": {
						"nullable": true,
						"description": "A flag indicating whether this log represents the deletion of the associated job.",
						"type": "boolean"
					},
					"jobDueDate": {
						"nullable": true,
						"format": "date-time",
						"description": "The date on which the associated job is supposed to be processed.",
						"type": "string"
					},
					"successLog": {
						"nullable": true,
						"description": "A flag indicating whether this log represents the successful execution of the\nassociated job.",
						"type": "boolean"
					},
					"jobDefinitionConfiguration": {
						"nullable": true,
						"description": "The job definition configuration type of the associated job.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the log entry should be removed by the History Cleanup job.\nDefault format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further info see the\n[docs](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition which the associated job belongs to.",
						"type": "string"
					},
					"failureLog": {
						"nullable": true,
						"description": "A flag indicating whether this log represents the failed execution of the\nassociated job.",
						"type": "boolean"
					},
					"activityId": {
						"nullable": true,
						"description": "The id of the activity on which the associated job was created.",
						"type": "string"
					},
					"hostname": {
						"nullable": true,
						"description": "\nThe name of the host of the Process Engine where the\njob of this historic job log entry was executed.",
						"type": "string"
					},
					"deploymentId": {
						"nullable": true,
						"description": "The id of the deployment which the associated job belongs to.",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process\nwhich the associated job belongs to.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the log entry.",
						"type": "string"
					},
					"jobPriority": {
						"nullable": true,
						"format": "int64",
						"description": "The execution priority the job had when the log entry was created.",
						"type": "integer"
					},
					"timestamp": {
						"nullable": true,
						"format": "date-time",
						"description": "The time when the log entry has been written.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance on which the associated job was created.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition which the associated job belongs to.",
						"type": "string"
					},
					"jobDefinitionId": {
						"nullable": true,
						"description": "The id of the job definition on which the associated job was created.",
						"type": "string"
					},
					"creationLog": {
						"nullable": true,
						"description": "A flag indicating whether this log represents the creation of the associated job.",
						"type": "boolean"
					},
					"jobExceptionMessage": {
						"nullable": true,
						"description": "The message of the exception that occurred by executing the associated job.",
						"type": "string"
					},
					"jobDefinitionType": {
						"nullable": true,
						"description": "The job definition type of the associated job. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation)\nfor more information about job definition types.",
						"type": "string"
					},
					"jobId": {
						"nullable": true,
						"description": "The id of the associated job.",
						"type": "string"
					},
					"jobRetries": {
						"nullable": true,
						"format": "int32",
						"description": "The number of retries the associated job has left.",
						"type": "integer"
					},
					"executionId": {
						"nullable": true,
						"description": "The execution id on which the associated job was created.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant that this historic job log entry belongs to.",
						"type": "string"
					},
					"failedActivityId": {
						"nullable": true,
						"description": "The id of the activity on which the last exception occurred by executing the\nassociated job.",
						"type": "string"
					}
				}
			},
			"SetJobRetriesByProcessDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"processInstances": {
							"nullable": true,
							"description": "A list of process instance ids to fetch jobs, for which retries will be set.",
							"type": "array",
							"items": {"type": "string"}
						},
						"processInstanceQuery": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
						"historicProcessInstanceQuery": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"}
					}
				},
				{"$ref": "#/components/schemas/SetJobRetriesDto"}
			]},
			"DurationReportResultDto": {
				"type": "object",
				"properties": {
					"average": {
						"nullable": true,
						"format": "int64",
						"description": "The average duration in milliseconds of all completed process instances which were started in the given period.",
						"type": "integer"
					},
					"period": {
						"nullable": true,
						"format": "int32",
						"description": "Specifies a timespan within a year.\n**Note:** The period must be interpreted in conjunction with the returned `periodUnit`.",
						"type": "integer"
					},
					"maximum": {
						"nullable": true,
						"format": "int64",
						"description": "The greatest duration in milliseconds of all completed process instances which were started in the given period.",
						"type": "integer"
					},
					"periodUnit": {
						"nullable": true,
						"description": "The unit of the given period. Possible values are `MONTH` and `QUARTER`.",
						"type": "string",
						"enum": [
							"MONTH",
							"QUARTER"
						]
					},
					"minimum": {
						"nullable": true,
						"format": "int64",
						"description": "The smallest duration in milliseconds of all completed process instances which were started in the given period.",
						"type": "integer"
					}
				}
			},
			"ProcessInstanceSuspensionStateAsyncDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"processInstanceQuery": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
						"historicProcessInstanceQuery": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"},
						"processInstanceIds": {
							"nullable": true,
							"description": "A list of process instance ids which defines a group of process instances\nwhich will be activated or suspended by the operation.",
							"type": "array",
							"items": {"type": "string"}
						}
					}
				},
				{"$ref": "#/components/schemas/SuspensionStateDto"}
			]},
			"MigrationVariableValidationReportDto": {"allOf": [
				{
					"type": "object",
					"properties": {"failures": {
						"nullable": true,
						"description": "A list of variable validation report messages.",
						"type": "array",
						"items": {"type": "string"}
					}}
				},
				{"$ref": "#/components/schemas/VariableValueDto"}
			]},
			"SchemaLogQueryDto": {
				"type": "object",
				"properties": {
					"sorting": {
						"nullable": true,
						"description": "A JSON array of criteria to sort the result by. Each element of the array is\n                      a JSON object that specifies one ordering. The position in the array\n                      identifies the rank of an ordering, i.e., whether it is primary, secondary,\n                      etc. ",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": ["timestamp"]
								}
							}
						}
					},
					"version": {
						"nullable": true,
						"description": "The version of the schema.",
						"type": "string"
					}
				}
			},
			"CorrelationMessageDto": {
				"type": "object",
				"properties": {
					"messageName": {
						"nullable": true,
						"description": "The name of the message to deliver.",
						"type": "string"
					},
					"all": {
						"default": false,
						"nullable": true,
						"description": "A Boolean value that indicates whether the message should be correlated to exactly one entity or multiple entities.\nIf the value is set to `false`, the message will be correlated to exactly one entity (execution or process definition).\nIf the value is set to `true`, the message will be correlated to multiple executions and a process definition that\ncan be instantiated by this message in one go.",
						"type": "boolean"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "Used to correlate the message to the process instance with the given id.",
						"type": "string"
					},
					"localCorrelationKeys": {
						"nullable": true,
						"description": "Local variables used for correlation of executions (process instances) that wait for incoming messages.\nHas to be a JSON object containing key-value pairs that are matched against local variables during correlation.\nEach key is a variable name and each value a JSON variable value object with the following properties.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"businessKey": {
						"nullable": true,
						"description": "Used for correlation of process instances that wait for incoming messages.\nWill only correlate to executions that belong to a process instance with the provided business key.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "Used to correlate the message for a tenant with the given id.\nWill only correlate to executions and process definitions which belong to the tenant.\nMust not be supplied in conjunction with a `withoutTenantId`.",
						"type": "string"
					},
					"withoutTenantId": {
						"default": false,
						"nullable": true,
						"description": "A Boolean value that indicates whether the message should only be correlated to executions\nand process definitions which belong to no tenant or not. Value may only be `true`, as `false`\nis the default behavior.\nMust not be supplied in conjunction with a `tenantId`.",
						"type": "boolean"
					},
					"correlationKeys": {
						"nullable": true,
						"description": "Used for correlation of process instances that wait for incoming messages.\nHas to be a JSON object containing key-value pairs that are matched against process instance variables\nduring correlation. Each key is a variable name and each value a JSON variable value object with the\nfollowing properties.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"processVariables": {
						"nullable": true,
						"description": "A map of variables that is injected into the triggered execution or process instance after the message\nhas been delivered. Each key is a variable name and each value a JSON variable value object with\nthe following properties.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"processVariablesLocal": {
						"nullable": true,
						"description": "A map of local variables that is injected into the triggered execution or process instance after the\nmessage has been delivered. Each key is a variable name and each value a JSON variable value object\nwith the following properties.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"resultEnabled": {
						"default": false,
						"nullable": true,
						"description": "A Boolean value that indicates whether the result of the correlation should be returned or not.\nIf this property is set to `true`, there will be returned a list of message correlation result objects. Depending on the\nall property, there will be either one ore more returned results in the list.\n\nThe default value is `false`, which means no result will be returned.",
						"type": "boolean"
					},
					"variablesInResultEnabled": {
						"default": false,
						"nullable": true,
						"description": "A Boolean value that indicates whether the result of the correlation should contain process variables or not.\nThe parameter resultEnabled should be set to `true` in order to use this it.\n\nThe default value is `false`, which means the variables will not be returned.",
						"type": "boolean"
					}
				}
			},
			"DeploymentDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"tenantId": {
							"nullable": true,
							"description": "The tenant id of the deployment.",
							"type": "string"
						},
						"name": {
							"nullable": true,
							"description": "The name of the deployment.",
							"type": "string"
						},
						"id": {
							"nullable": true,
							"description": "The id of the deployment.",
							"type": "string"
						},
						"source": {
							"nullable": true,
							"description": "The source of the deployment.",
							"type": "string"
						},
						"deploymentTime": {
							"nullable": true,
							"format": "date-time",
							"description": "The time when the deployment was created.",
							"type": "string"
						}
					}
				},
				{"$ref": "#/components/schemas/LinkableDto"}
			]},
			"EventSubscriptionQueryDto": {
				"description": "A event subscription query which retrieves a list of event subscriptions",
				"type": "object",
				"properties": {
					"executionId": {
						"nullable": true,
						"description": "The execution that is subscribed on the referenced event.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The process instance this subscription belongs to.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "The identifier of the activity that this event subscription belongs to.\nThis could for example be the id of a receive task.",
						"type": "string"
					},
					"includeEventSubscriptionsWithoutTenantId": {
						"nullable": true,
						"description": "Select event subscriptions which have no tenant id.\nCan be used in combination with tenantIdIn parameter.\nValue may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"eventSubscriptionId": {
						"nullable": true,
						"description": "The id of the event subscription.",
						"type": "string"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Filter by a comma-separated list of tenant ids.\nOnly select subscriptions that belong to one of the given tenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sorting": {
						"nullable": true,
						"description": "Apply sorting of the result",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"created",
										"tenantId"
									]
								}
							}
						}
					},
					"eventName": {
						"nullable": true,
						"description": "The name of the event this subscription belongs to as defined in the process model.",
						"type": "string"
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only select subscriptions which have no tenant id.\nValue may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"eventType": {
						"nullable": true,
						"description": "The type of the event subscription.",
						"type": "string",
						"enum": [
							"message",
							"signal",
							"compensate",
							"conditional"
						]
					}
				}
			},
			"DeleteHistoricDecisionInstancesDto": {
				"type": "object",
				"properties": {
					"historicDecisionInstanceIds": {
						"nullable": true,
						"description": "A list of historic decision instance ids to delete.",
						"type": "array",
						"items": {"type": "string"}
					},
					"historicDecisionInstanceQuery": {"$ref": "#/components/schemas/HistoricDecisionInstanceQueryDto"},
					"deleteReason": {
						"nullable": true,
						"description": "A string with delete reason.",
						"type": "string"
					}
				}
			},
			"GroupQueryDto": {
				"description": "A group instance query which defines a list of group instances",
				"type": "object",
				"properties": {
					"idIn": {
						"nullable": true,
						"description": "Filter by a JSON string array of group ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"nameLike": {
						"nullable": true,
						"description": "Filter by the name that the parameter is a substring of.",
						"type": "string"
					},
					"sorting": {
						"nullable": true,
						"description": "Apply sorting of the result",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"id",
										"name",
										"type"
									]
								}
							}
						}
					},
					"name": {
						"nullable": true,
						"description": "Filter by the name of the group.",
						"type": "string"
					},
					"member": {
						"nullable": true,
						"description": "Only retrieve groups where the given user id is a member of.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "Filter by the id of the group.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "Filter by the type of the group.",
						"type": "string"
					},
					"memberOfTenant": {
						"nullable": true,
						"description": "Only retrieve groups which are members of the given tenant.",
						"type": "string"
					}
				}
			},
			"TransitionInstanceDto": {
				"description": "A JSON object corresponding to the Activity Instance tree of the given process instance.",
				"type": "object",
				"properties": {
					"activityId": {
						"nullable": true,
						"description": "The id of the activity that this instance enters (asyncBefore job) or leaves (asyncAfter job)",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance this instance is part of.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "The execution id.",
						"type": "string"
					},
					"activityName": {
						"nullable": true,
						"description": "The name of the activity that this instance enters (asyncBefore job) or leaves (asyncAfter job)",
						"type": "string"
					},
					"incidents": {
						"nullable": true,
						"description": "A list of JSON objects containing incident specific properties:\n* `id`: the id of the incident\n* `activityId`: the activity id in which the incident occurred",
						"type": "array",
						"items": {"$ref": "#/components/schemas/ActivityInstanceIncidentDto"}
					},
					"id": {
						"nullable": true,
						"description": "The id of the transition instance.",
						"type": "string"
					},
					"activityType": {
						"nullable": true,
						"description": "The type of the activity that this instance enters (asyncBefore job) or leaves (asyncAfter job)",
						"type": "string"
					},
					"incidentIds": {
						"nullable": true,
						"description": "A list of incident ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"parentActivityInstanceId": {
						"nullable": true,
						"description": "The id of the parent activity instance, for example a sub process instance.",
						"type": "string"
					}
				}
			},
			"CheckPasswordPolicyRuleDto": {"allOf": [
				{
					"type": "object",
					"properties": {"valid": {
						"nullable": true,
						"description": "`true` if the password is compliant with this rule, otherwise `false`.",
						"type": "boolean"
					}}
				},
				{"$ref": "#/components/schemas/PasswordPolicyRuleDto"}
			]},
			"ExtendLockOnExternalTaskDto": {"allOf": [
				{
					"type": "object",
					"properties": {"newDuration": {
						"nullable": true,
						"format": "int64",
						"description": "An amount of time (in milliseconds). This is the new lock duration starting from the\ncurrent moment.",
						"type": "integer"
					}}
				},
				{"$ref": "#/components/schemas/HandleExternalTaskDto"}
			]},
			"HistoricDetailQueryDto": {
				"description": "A historic detail query which defines a group of historic details.",
				"type": "object",
				"properties": {
					"processInstanceId": {
						"nullable": true,
						"description": "Filter by process instance id.",
						"type": "string"
					},
					"caseExecutionId": {
						"nullable": true,
						"description": "Filter by case execution id.",
						"type": "string"
					},
					"variableTypeIn": {
						"nullable": true,
						"description": "Only include historic details where the variable updates belong to one of the passed \nlist of variable types. A list of all supported variable types can be found\n[here](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#supported-variable-values).\n**Note:** All non-primitive variables are associated with the type `serializable`.",
						"type": "array",
						"items": {"type": "string"}
					},
					"initial": {
						"nullable": true,
						"description": "Restrict to historic variable updates that contain only initial variable values.\nValue may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"occurredBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to historic details that occured before the given date (including the date).\nDefault [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.",
						"type": "string"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "Filter by case instance id.",
						"type": "string"
					},
					"processInstanceIdIn": {
						"nullable": true,
						"description": "Only include historic details which belong to one of the passed  process instance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"activityInstanceId": {
						"nullable": true,
						"description": "Filter by activity instance id.",
						"type": "string"
					},
					"userOperationId": {
						"nullable": true,
						"description": "Filter by a user operation id.",
						"type": "string"
					},
					"variableInstanceId": {
						"nullable": true,
						"description": "Filter by variable instance id.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "Filter by execution id.",
						"type": "string"
					},
					"variableUpdates": {
						"nullable": true,
						"description": "Only include `HistoricVariableUpdates`. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Filter by a  list of tenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"occurredAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to historic details that occured after the given date (including the date).\nDefault [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.",
						"type": "string"
					},
					"excludeTaskDetails": {
						"nullable": true,
						"description": "Excludes all task-related `HistoricDetails`, so only items which have no task id set will be selected.\nWhen this parameter is used together with `taskId`, this call is ignored and task details are not excluded.\nValue may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"sorting": {
						"nullable": true,
						"description": "A JSON array of criteria to sort the result by. Each element of the array is\n                    a JSON object that specifies one ordering. The position in the array\n                    identifies the rank of an ordering, i.e., whether it is primary, secondary,\n                    etc. Does not have an effect for the `count` endpoint.",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"processInstanceId",
										"variableName",
										"variableType",
										"variableRevision",
										"formPropertyId",
										"time",
										"occurrence",
										"tenantId"
									]
								}
							}
						}
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include historic details that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"formFields": {
						"nullable": true,
						"description": "Only include `HistoricFormFields`. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"taskId": {
						"nullable": true,
						"description": "Filter by task id.",
						"type": "string"
					}
				}
			},
			"VariableValueDto": {
				"type": "object",
				"properties": {
					"valueInfo": {
						"description": "A JSON object containing additional, value-type-dependent properties.\nFor serialized variables of type Object, the following properties can be provided:\n\n* `objectTypeName`: A string representation of the object's type name.\n* `serializationDataFormat`: The serialization format used to store the variable.\n\nFor serialized variables of type File, the following properties can be provided:\n\n* `filename`: The name of the file. This is not the variable name but the name that will be used when downloading the file again.\n* `mimetype`: The MIME type of the file that is being uploaded.\n* `encoding`: The encoding of the file that is being uploaded.\n\nThe following property can be provided for all value types:\n\n* `transient`: Indicates whether the variable should be transient or\nnot. See [documentation](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables#transient-variables) for more informations.\n(Not applicable for `decision-definition`, ` /process-instance/variables-async`, and `/migration/executeAsync` endpoints)",
						"additionalProperties": true,
						"type": "object"
					},
					"type": {
						"nullable": true,
						"description": "The value type of the variable.",
						"type": "string"
					},
					"value": {"$ref": "#/components/schemas/AnyValue"}
				}
			},
			"ExternalTaskQueryDto": {
				"description": "A JSON object with the following properties:",
				"title": "ExternalTaskQueryDto",
				"type": "object",
				"properties": {
					"processInstanceId": {
						"nullable": true,
						"description": "Filter by the id of the process instance that an external task belongs to.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by the id of the process definition that an external task belongs to.",
						"type": "string"
					},
					"workerId": {
						"nullable": true,
						"description": "Filter by the id of the worker that the task was most recently locked by.",
						"type": "string"
					},
					"withRetriesLeft": {
						"nullable": true,
						"description": "Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be\n`true`, as `false` matches any external task.",
						"type": "boolean"
					},
					"notLocked": {
						"nullable": true,
						"description": "Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).\nValue may only be `true`, as `false` matches any external task.",
						"type": "boolean"
					},
					"lockExpirationAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to external tasks that have a lock that expires after a given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"active": {
						"nullable": true,
						"description": "Only include active tasks. Value may only be `true`, as `false` matches any external task.",
						"type": "boolean"
					},
					"processInstanceIdIn": {
						"nullable": true,
						"description": "Filter by a comma-separated list of process instance ids that an external task may belong to.",
						"type": "array",
						"items": {"type": "string"}
					},
					"suspended": {
						"nullable": true,
						"description": "Only include suspended tasks. Value may only be `true`, as `false` matches any external task.",
						"type": "boolean"
					},
					"activityId": {
						"nullable": true,
						"description": "Filter by the id of the activity that an external task is created for.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "Filter by the id of the execution that an external task belongs to.",
						"type": "string"
					},
					"priorityLowerThanOrEquals": {
						"nullable": true,
						"format": "int64",
						"description": "Only include jobs with a priority lower than or equal to the given value.\nValue must be a valid `long` value.",
						"type": "integer"
					},
					"priorityHigherThanOrEquals": {
						"nullable": true,
						"format": "int64",
						"description": "Only include jobs with a priority higher than or equal to the given value.\nValue must be a valid `long` value.",
						"type": "integer"
					},
					"lockExpirationBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to external tasks that have a lock that expires before a given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Filter by a comma-separated list of tenant ids.\nAn external task must have one of the given tenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sorting": {
						"nullable": true,
						"description": "A JSON array of criteria to sort the result by. Each element of the array is a JSON object that\n                    specifies one ordering. The position in the array identifies the rank of an ordering, i.e., whether\n                    it is primary, secondary, etc. The ordering objects have the following properties:\n\n                    **Note:** The `sorting` properties will not be applied to the External Task count query.",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"id",
										"lockExpirationTime",
										"processInstanceId",
										"processDefinitionId",
										"processDefinitionKey",
										"taskPriority",
										"tenantId"
									]
								}
							}
						}
					},
					"topicName": {
						"nullable": true,
						"description": "Filter by an external task topic.",
						"type": "string"
					},
					"noRetriesLeft": {
						"nullable": true,
						"description": "Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any\nexternal task.",
						"type": "boolean"
					},
					"externalTaskId": {
						"nullable": true,
						"description": "Filter by an external task's id.",
						"type": "string"
					},
					"locked": {
						"nullable": true,
						"description": "Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).\nValue may only be `true`, as `false` matches any external task.",
						"type": "boolean"
					},
					"externalTaskIdIn": {
						"nullable": true,
						"description": "Filter by the comma-separated list of external task ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"activityIdIn": {
						"nullable": true,
						"description": "Filter by the comma-separated list of ids of the activities that an external task is created for.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"MigrationPlanReportDto": {
				"type": "object",
				"properties": {
					"variableReports": {
						"nullable": true,
						"description": "A map of variable reports.\nEach key is a variable name and each value a JSON object consisting of the variable's type, value,\nvalue info object and a list of failures.",
						"additionalProperties": {"$ref": "#/components/schemas/MigrationVariableValidationReportDto"},
						"type": "object"
					},
					"instructionReports": {
						"nullable": true,
						"description": "The list of instruction validation reports. If no validation\nerrors are detected it is an empty list.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/MigrationInstructionValidationReportDto"}
					}
				}
			},
			"AuthorizationCreateDto": {
				"type": "object",
				"properties": {
					"resourceId": {
						"nullable": true,
						"description": "The resource Id. The value `*` represents an authorization ranging over all\ninstances of a resource.",
						"type": "string"
					},
					"permissions": {
						"nullable": true,
						"description": "An array of Strings holding the permissions provided by this authorization.",
						"type": "array",
						"items": {"type": "string"}
					},
					"groupId": {
						"nullable": true,
						"description": "The id of the group this authorization has been created for.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"format": "int32",
						"description": "The type of the authorization (0=global, 1=grant, 2=revoke). See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service.md#authorization-type)\nfor more information about authorization types.",
						"type": "integer"
					},
					"userId": {
						"nullable": true,
						"description": "The id of the user this authorization has been created for. The value `*`\nrepresents a global authorization ranging over all users.",
						"type": "string"
					},
					"resourceType": {
						"nullable": true,
						"format": "int32",
						"description": "An integer representing the resource type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#resources)\nfor a list of integer representations of resource types.",
						"type": "integer"
					}
				}
			},
			"CamundaFormRef": {
				"type": "object",
				"properties": {
					"binding": {
						"nullable": true,
						"description": "The binding of the Camunda Form. Can be `latest`, `deployment` or `version`.",
						"type": "string"
					},
					"version": {
						"nullable": true,
						"format": "int32",
						"description": "The specific version of a Camunda Form. This property is only set if `binding` is `version`.",
						"type": "integer"
					},
					"key": {
						"nullable": true,
						"description": "The key of the Camunda Form.",
						"type": "string"
					}
				}
			},
			"FetchExternalTasksDto": {
				"type": "object",
				"required": [
					"workerId",
					"maxTasks"
				],
				"properties": {
					"workerId": {
						"description": "**Mandatory.** The id of the worker on which behalf tasks are fetched. The returned tasks are locked for\nthat worker and can only be completed when providing the same worker id.",
						"type": "string"
					},
					"asyncResponseTimeout": {
						"nullable": true,
						"format": "int64",
						"description": "The [Long Polling](https://docs.camunda.org/manual/7.19/user-guide/process-engine/external-tasks/#long-polling-to-fetch-and-lock-external-tasks)\ntimeout in milliseconds.\n\n**Note:** The value cannot be set larger than 1.800.000 milliseconds (corresponds to 30 minutes).",
						"type": "integer"
					},
					"maxTasks": {
						"nullable": true,
						"format": "int32",
						"description": "**Mandatory.** The maximum number of tasks to return.",
						"type": "integer"
					},
					"topics": {
						"nullable": true,
						"description": "A JSON array of topic objects for which external tasks should be fetched. The returned tasks may be\narbitrarily distributed among these topics. Each topic object has the following properties:",
						"type": "array",
						"items": {"$ref": "#/components/schemas/FetchExternalTaskTopicDto"}
					},
					"usePriority": {
						"nullable": true,
						"description": "A `boolean` value, which indicates whether the task should be fetched based on its priority\nor arbitrarily.",
						"type": "boolean"
					}
				}
			},
			"MultiFormAttachmentDto": {
				"type": "object",
				"properties": {
					"attachment-description": {
						"nullable": true,
						"description": "The description of the attachment.",
						"type": "string"
					},
					"attachment-type": {
						"nullable": true,
						"description": "The type of the attachment.",
						"type": "string"
					},
					"attachment-name": {
						"nullable": true,
						"description": "The name of the attachment.",
						"type": "string"
					},
					"url": {
						"nullable": true,
						"description": "The url to the remote content of the attachment.",
						"type": "string"
					},
					"content": {
						"nullable": true,
						"format": "binary",
						"description": "The content of the attachment.",
						"type": "string"
					}
				}
			},
			"PasswordPolicyRequestDto": {
				"type": "object",
				"properties": {
					"password": {
						"nullable": true,
						"description": "The candidate password to be check against the password policy.",
						"type": "string"
					},
					"profile": {"$ref": "#/components/schemas/UserProfileDto"}
				}
			},
			"ProcessInstanceModificationDto": {
				"type": "object",
				"properties": {
					"annotation": {
						"nullable": true,
						"description": "An arbitrary text annotation set by a user for auditing reasons.",
						"type": "string"
					},
					"instructions": {
						"nullable": true,
						"description": "JSON array of modification instructions. The instructions are executed in the order they are in.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/ProcessInstanceModificationInstructionDto"}
					},
					"skipIoMappings": {
						"nullable": true,
						"description": "Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#input-output-variable-mapping)\nfor activities that are started or ended as part of this request.",
						"type": "boolean"
					},
					"skipCustomListeners": {
						"nullable": true,
						"description": "Skip execution listener invocation for activities that are started or ended as part of this request.",
						"type": "boolean"
					}
				}
			},
			"ExternalTaskBpmnError": {"allOf": [
				{
					"type": "object",
					"properties": {"workerId": {
						"nullable": true,
						"description": "The id of the worker that reports the failure. Must match the id of the worker who has most recently\nlocked the task.",
						"type": "string"
					}}
				},
				{"$ref": "#/components/schemas/TaskBpmnErrorDto"}
			]},
			"HistoricActivityInstanceQueryDto": {
				"description": "A historic activity instance query which defines a group of historic activity instances",
				"type": "object",
				"properties": {
					"processInstanceId": {
						"nullable": true,
						"description": "Filter by process instance id.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by process definition id.",
						"type": "string"
					},
					"finishedAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"activityName": {
						"nullable": true,
						"description": "Filter by the activity name (according to BPMN 2.0 XML).",
						"type": "string"
					},
					"finished": {
						"nullable": true,
						"description": "Only include finished activity instances.\nValue may only be `true`, as `false` behaves the same as when the property is not set.",
						"type": "boolean"
					},
					"activityInstanceId": {
						"nullable": true,
						"description": "Filter by activity instance id.",
						"type": "string"
					},
					"completeScope": {
						"nullable": true,
						"description": "Only include activity instances which completed a scope.\nValue may only be `true`, as `false` behaves the same as when the property is not set.",
						"type": "boolean"
					},
					"executionId": {
						"nullable": true,
						"description": "Filter by the id of the execution that executed the activity instance.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "Filter by the activity id (according to BPMN 2.0 XML).",
						"type": "string"
					},
					"canceled": {
						"nullable": true,
						"description": "Only include canceled activity instances.\nValue may only be `true`, as `false` behaves the same as when the property is not set.",
						"type": "boolean"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Must be a JSON array of Strings. An activity instance must have one of the given tenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sorting": {
						"nullable": true,
						"description": "Apply sorting of the result",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"activityInstanceId",
										"instanceId",
										"executionId",
										"activityId",
										"activityName",
										"activityType",
										"startTime",
										"endTime",
										"duration",
										"definitionId",
										"occurrence",
										"tenantId"
									]
								}
							}
						}
					},
					"taskAssignee": {
						"nullable": true,
						"description": "Only include activity instances that are user tasks and assigned to a given user.",
						"type": "string"
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"unfinished": {
						"nullable": true,
						"description": "Only include unfinished activity instances.\nValue may only be `true`, as `false` behaves the same as when the property is not set.",
						"type": "boolean"
					},
					"startedAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"activityType": {
						"nullable": true,
						"description": "Filter by activity type.",
						"type": "string"
					},
					"startedBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"finishedBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					}
				}
			},
			"HistoryCleanupConfigurationDto": {
				"type": "object",
				"properties": {
					"batchWindowEndTime": {
						"nullable": true,
						"format": "date-time",
						"description": "End time of the current or next batch window. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"batchWindowStartTime": {
						"nullable": true,
						"format": "date-time",
						"description": "Start time of the current or next batch window. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"enabled": {
						"nullable": true,
						"description": "Indicates whether the engine node participates in history cleanup or\nnot. The default is `true`. Participation can be disabled via\n[Process Engine Configuration](https://docs.camunda.org/manual/7.19/reference/deployment-descriptors/tags/process-engine/#history-cleanup-enabled).\n\nFor more details, see\n[Cleanup Execution Participation per Node](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#cleanup-execution-participation-per-node).",
						"type": "boolean"
					}
				}
			},
			"ProcessInstanceQueryDto": {
				"description": "A process instance query which defines a group of process instances",
				"type": "object",
				"properties": {
					"subProcessInstance": {
						"nullable": true,
						"description": "Restrict query to all process instances that have the given process instance as a sub process instance.\nTakes a process instance id.",
						"type": "string"
					},
					"variableNamesIgnoreCase": {
						"nullable": true,
						"description": "Match all variable names in this query case-insensitively.\nIf set to true variableName and variablename are treated as equal.",
						"type": "boolean"
					},
					"withIncident": {
						"nullable": true,
						"description": "Filter by presence of incidents. Selects only process instances that have an incident.",
						"type": "boolean"
					},
					"incidentType": {
						"nullable": true,
						"description": "Filter by the incident type. See the User Guide for a list of incident types.",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Filter by the key of the process definition the instances run on.",
						"type": "string"
					},
					"processDefinitionWithoutTenantId": {
						"nullable": true,
						"description": "Only include process instances which process definition has no tenant id.",
						"type": "boolean"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Filter by a list of tenant ids. A process instance must have one of the given tenant ids.\nMust be a JSON array of Strings.",
						"type": "array",
						"items": {"type": "string"}
					},
					"deploymentId": {
						"nullable": true,
						"description": "Filter by the deployment the id belongs to.",
						"type": "string"
					},
					"sorting": {
						"nullable": true,
						"description": "Apply sorting of the result",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"instanceId",
										"definitionId",
										"definitionKey",
										"businessKey",
										"tenantId"
									]
								}
							}
						}
					},
					"variableValuesIgnoreCase": {
						"nullable": true,
						"description": "Match all variable values in this query case-insensitively.\nIf set to true variableValue and variablevalue are treated as equal.",
						"type": "boolean"
					},
					"processDefinitionKeyNotIn": {
						"nullable": true,
						"description": "Exclude instances by a list of process definition keys.\nA process instance must not have one of the given process definition keys. Must be a JSON array of Strings.",
						"type": "array",
						"items": {"type": "string"}
					},
					"rootProcessInstances": {
						"nullable": true,
						"description": "Restrict the query to all process instances that are top level process instances.",
						"type": "boolean"
					},
					"leafProcessInstances": {
						"nullable": true,
						"description": "Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances)",
						"type": "boolean"
					},
					"activityIdIn": {
						"nullable": true,
						"description": "Filter by a list of activity ids.\nA process instance must currently wait in a leaf activity with one of the given activity ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by the process definition the instances run on.",
						"type": "string"
					},
					"variables": {
						"nullable": true,
						"description": "A JSON array to only include process instances that have variables with certain values.\nThe array consists of objects with the three properties `name`, `operator` and `value`.\n`name` (String) is the variable name,\n`operator` (String) is the comparison operator to be used and `value` the variable value.\nThe `value` may be String, Number or Boolean.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than;\n`gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/VariableQueryParameterDto"}
					},
					"incidentMessage": {
						"nullable": true,
						"description": "Filter by the incident message. Exact match.",
						"type": "string"
					},
					"businessKeyLike": {
						"nullable": true,
						"description": "Filter by process instance business key that the parameter is a substring of.",
						"type": "string"
					},
					"processDefinitionKeyIn": {
						"nullable": true,
						"description": "Filter by a list of process definition keys.\nA process instance must have one of the given process definition keys. Must be a JSON array of Strings.",
						"type": "array",
						"items": {"type": "string"}
					},
					"superCaseInstance": {
						"nullable": true,
						"description": "Restrict query to all process instances that are sub process instances of the given case instance.\nTakes a case instance id.",
						"type": "string"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "Filter by case instance id.",
						"type": "string"
					},
					"active": {
						"nullable": true,
						"description": "Only include active process instances. Value may only be true, as false is the default behavior.",
						"type": "boolean"
					},
					"suspended": {
						"nullable": true,
						"description": "Only include suspended process instances. Value may only be true, as false is the default behavior.",
						"type": "boolean"
					},
					"processInstanceIds": {
						"nullable": true,
						"description": "Filter by a list of process instance ids. Must be a JSON array of Strings.",
						"type": "array",
						"items": {"type": "string"}
					},
					"subCaseInstance": {
						"nullable": true,
						"description": "Restrict query to all process instances that have the given case instance as a sub case instance.\nTakes a case instance id.",
						"type": "string"
					},
					"superProcessInstance": {
						"nullable": true,
						"description": "Restrict query to all process instances that are sub process instances of the given process instance.\nTakes a process instance id.",
						"type": "string"
					},
					"orQueries": {
						"nullable": true,
						"description": "A JSON array of nested process instance queries with OR semantics.\nA process instance matches a nested query if it fulfills at least one of the query's predicates.\nWith multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form).\nAll process instance query properties can be used except for: `sorting`\nSee the [User guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"}
					},
					"businessKey": {
						"nullable": true,
						"description": "Filter by process instance business key.",
						"type": "string"
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include process instances which belong to no tenant.\nValue may only be true, as false is the default behavior.",
						"type": "boolean"
					},
					"incidentId": {
						"nullable": true,
						"description": "Filter by the incident id.",
						"type": "string"
					},
					"incidentMessageLike": {
						"nullable": true,
						"description": "Filter by the incident message that the parameter is a substring of.",
						"type": "string"
					}
				}
			},
			"JobSuspensionStateDto": {"allOf": [
				{
					"description": "Defines by which selection criterion to activate or suspend jobs.\nThis selection criterion are mutually exclusive and can only be on of:\n* `jobDefinitionId`\n* `processDefinitionId`\n* `processInstanceId`\n* `processDefinitionKey`",
					"type": "object",
					"properties": {
						"processDefinitionId": {
							"nullable": true,
							"description": "The process definition id of the jobs to activate or suspend.",
							"type": "string"
						},
						"processInstanceId": {
							"nullable": true,
							"description": "The process instance id of the jobs to activate or suspend.",
							"type": "string"
						},
						"processDefinitionWithoutTenantId": {
							"nullable": true,
							"description": "Only activate or suspend jobs of a process definition which belongs to no tenant.\nValue may only be `true`, as `false` is the default behavior. Works only when selecting with `processDefinitionKey`.",
							"type": "boolean"
						},
						"jobDefinitionId": {
							"nullable": true,
							"description": "The job definition id of the jobs to activate or suspend.",
							"type": "string"
						},
						"processDefinitionTenantId": {
							"nullable": true,
							"description": "Only activate or suspend jobs of a process definition which belongs to a tenant\nwith the given id. Works only when selecting with `processDefinitionKey`.",
							"type": "string"
						},
						"processDefinitionKey": {
							"nullable": true,
							"description": "The process definition key of the jobs to activate or suspend.",
							"type": "string"
						}
					}
				},
				{"$ref": "#/components/schemas/SuspensionStateDto"}
			]},
			"SuspensionStateDto": {
				"type": "object",
				"properties": {"suspended": {
					"nullable": true,
					"description": "A Boolean value which indicates whether to activate or suspend a given instance \n(e.g. process instance, job, job definition, or batch). When the value is set to true, \nthe given instance will be suspended and when the value is set to false, \nthe given instance will be activated.",
					"type": "boolean"
				}}
			},
			"DeploymentResourceDto": {
				"description": "A JSON object corresponding to the `Resource` interface in the engine.\nIts properties are as follows:",
				"title": "DeploymentResourceDto",
				"type": "object",
				"properties": {
					"deploymentId": {
						"nullable": true,
						"description": "The id of the deployment.",
						"type": "string"
					},
					"name": {
						"nullable": true,
						"description": "The name of the deployment resource",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the deployment resource.",
						"type": "string"
					}
				}
			},
			"CheckPasswordPolicyResultDto": {"allOf": [
				{
					"type": "object",
					"properties": {"valid": {
						"nullable": true,
						"description": "`true` if the password is compliant with the policy, otherwise `false`.",
						"type": "boolean"
					}}
				},
				{"$ref": "#/components/schemas/PasswordPolicyDto"}
			]},
			"ActivityStatisticsResultDto": {
				"type": "object",
				"properties": {
					"@class": {
						"nullable": true,
						"description": "The fully qualified class name of the data transfer object class.\nThe class name might change in future releases.",
						"type": "string"
					},
					"instances": {
						"format": "int32",
						"description": "The total number of running process instances of this activity.",
						"type": "integer"
					},
					"failedJobs": {
						"format": "int32",
						"description": "The total number of failed jobs for the running instances.\n**Note**: Will be `0` (not `null`), if failed jobs were excluded.",
						"type": "integer"
					},
					"incidents": {
						"nullable": true,
						"description": "Each item in the resulting array is an object which contains `incidentType` and `incidentCount`.\n**Note**: Will be an empty array, if `incidents` or `incidentsForType` were excluded.\nFurthermore, the array will be also empty if no incidents were found.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/IncidentStatisticsResultDto"}
					},
					"id": {
						"nullable": true,
						"description": "The id of the activity the results are aggregated for.",
						"type": "string"
					}
				}
			},
			"EvaluationConditionDto": {
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "Used to evaluate conditions of the process definition with the given id.",
						"type": "string"
					},
					"variables": {
						"nullable": true,
						"description": "A map of variables which are used for evaluation of the conditions and are injected into the process instances which have been triggered.\nEach key is a variable name and each value a JSON variable value object with the following properties.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"businessKey": {
						"nullable": true,
						"description": "Used for the process instances that have been triggered after the evaluation.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "Used to evaluate a condition for a tenant with the given id.\nWill only evaluate conditions of process definitions which belong to the tenant.",
						"type": "string"
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "A Boolean value that indicates whether the conditions should only be evaluated of process definitions which belong to no tenant or not.\nValue may only be true, as false is the default behavior.",
						"type": "boolean"
					}
				}
			},
			"ExecutionQueryDto": {
				"description": "A Execution instance query which defines a list of Execution instances",
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by the process definition the executions run on.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "Filter by the id of the process instance the execution belongs to.",
						"type": "string"
					},
					"variables": {
						"nullable": true,
						"description": "An array to only include executions that have variables with certain values.\n\nThe array consists of objects with the three properties `name`, `operator`\nand `value`.\n`name (String)` is the variable name, `operator (String)` is the comparison\noperator to be used and `value` the variable value.\n`value` may be `String`, `Number` or `Boolean`.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to; `gt` -\ngreater than;\n`gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or\nequal to;\n`like`.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/VariableQueryParameterDto"}
					},
					"incidentMessage": {
						"nullable": true,
						"description": "Filter by the incident message. Exact match.",
						"type": "string"
					},
					"variableNamesIgnoreCase": {
						"nullable": true,
						"description": "Match all variable names provided in `variables` and `processVariables` case-\ninsensitively. If set to `true` **variableName** and **variablename** are\ntreated as equal.",
						"type": "boolean"
					},
					"incidentType": {
						"nullable": true,
						"description": "Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.",
						"type": "string"
					},
					"active": {
						"nullable": true,
						"description": "Only include active executions. Value may only be `true`, as `false` is the default\nbehavior.",
						"type": "boolean"
					},
					"signalEventSubscriptionName": {
						"nullable": true,
						"description": "Select only those executions that expect a signal of the given name.",
						"type": "string"
					},
					"suspended": {
						"nullable": true,
						"description": "Only include suspended executions. Value may only be `true`, as `false` is the default\nbehavior.",
						"type": "boolean"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Filter by the key of the process definition the executions run on.",
						"type": "string"
					},
					"messageEventSubscriptionName": {
						"nullable": true,
						"description": "Select only those executions that expect a message of the given name.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "Filter by the id of the activity the execution currently executes.",
						"type": "string"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Filter by a  list of tenant ids. An execution must have one of the given\ntenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sorting": {
						"nullable": true,
						"description": "An array of criteria to sort the result by. Each element of the array is\n                       an object that specifies one ordering. The position in the array\n                       identifies the rank of an ordering, i.e., whether it is primary, secondary,\n                       etc. Has no effect for the `/count` endpoint",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"instanceId",
										"definitionKey",
										"definitionId",
										"tenantId"
									]
								}
							}
						}
					},
					"businessKey": {
						"nullable": true,
						"description": "Filter by the business key of the process instances the executions belong to.",
						"type": "string"
					},
					"variableValuesIgnoreCase": {
						"nullable": true,
						"description": "Match all variable values provided in `variables` and `processVariables` case-\ninsensitively. If set to `true` **variableValue** and **variablevalue** are\ntreated as equal.",
						"type": "boolean"
					},
					"incidentId": {
						"nullable": true,
						"description": "Filter by the incident id.",
						"type": "string"
					},
					"processVariables": {
						"nullable": true,
						"description": "An array to only include executions that belong to a process instance with variables\nwith certain values.\n\nThe array consists of objects with the three properties `name`, `operator`\nand `value`.\n`name (String)` is the variable name, `operator (String)` is the comparison\noperator to be used and `value` the variable value.\n`value` may be `String`, `Number` or `Boolean`.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/VariableQueryParameterDto"}
					},
					"incidentMessageLike": {
						"nullable": true,
						"description": "Filter by the incident message that the parameter is a substring of.",
						"type": "string"
					}
				}
			},
			"SortTaskQueryParametersDto": {
				"description": "Mandatory when `sortBy` is one of the following values: `processVariable`, `executionVariable`,\n`taskVariable`, `caseExecutionVariable` or `caseInstanceVariable`. Must be a JSON object with the properties\n`variable` and `type` where `variable` is a variable name and `type` is the name of a variable value type.",
				"type": "object",
				"properties": {
					"variable": {
						"nullable": true,
						"description": "The name of the variable to sort by.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "The name of the type of the variable value.",
						"type": "string"
					}
				}
			},
			"DecisionDefinitionDiagramDto": {
				"type": "object",
				"properties": {
					"dmnXml": {
						"nullable": true,
						"description": "An escaped XML string containing the XML that this decision definition was deployed with.\nCarriage returns, line feeds and quotation marks are escaped.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the decision definition.",
						"type": "string"
					}
				}
			},
			"CreateFilterDto": {
				"type": "object",
				"properties": {
					"owner": {
						"nullable": true,
						"description": "The user id of the owner of the filter.",
						"type": "string"
					},
					"query": {
						"description": "The query of the filter as a JSON object.",
						"type": "object"
					},
					"name": {
						"nullable": true,
						"description": "The name of the filter.",
						"type": "string"
					},
					"properties": {
						"description": "The properties of a filter as a JSON object.",
						"type": "object"
					},
					"resourceType": {
						"nullable": true,
						"description": "The resource type of the filter.",
						"type": "string"
					}
				}
			},
			"HistoricIdentityLinkLogDto": {
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition.",
						"type": "string"
					},
					"groupId": {
						"nullable": true,
						"description": "The id of the group.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "The type of identity link (candidate/assignee/owner).",
						"type": "string"
					},
					"userId": {
						"nullable": true,
						"description": "The id of the user/assignee.",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the identity link should be removed by the History Cleanup job. \n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant.",
						"type": "string"
					},
					"operationType": {
						"nullable": true,
						"description": "Type of operation (add/delete).",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process\ncontaining this identity link.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "Id of the Historic identity link entry.",
						"type": "string"
					},
					"time": {
						"nullable": true,
						"format": "date-time",
						"description": "The time when the identity link is logged. \n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"taskId": {
						"nullable": true,
						"description": "The id of the task.",
						"type": "string"
					},
					"assignerId": {
						"nullable": true,
						"description": "The id of the assigner.",
						"type": "string"
					}
				}
			},
			"RestartProcessInstanceModificationInstructionDto": {
				"type": "object",
				"required": ["type"],
				"properties": {
					"activityId": {
						"nullable": true,
						"description": "**Can be used with instructions of types** `startBeforeActivity`\nand `startAfterActivity`. Specifies the sequence flow to start.",
						"type": "string"
					},
					"transitionId": {
						"nullable": true,
						"description": "**Can be used with instructions of types** `startTransition`.\nSpecifies the sequence flow to start.",
						"type": "string"
					},
					"type": {
						"description": "**Mandatory**. One of the following values: `startBeforeActivity`, `startAfterActivity`, `startTransition`.\n\n* A `startBeforeActivity` instruction requests to enter a given activity.\n* A `startAfterActivity` instruction requests to execute the single outgoing sequence flow of a given activity.\n* A `startTransition` instruction requests to execute a specific sequence flow.",
						"type": "string",
						"enum": [
							"startBeforeActivity",
							"startAfterActivity",
							"startTransition"
						]
					}
				}
			},
			"MultipleProcessInstanceModificationInstructionDto": {
				"type": "object",
				"required": ["type"],
				"properties": {
					"activityId": {
						"nullable": true,
						"description": "Can be used with instructions of types `startTransition`. Specifies the sequence flow to start.",
						"type": "string"
					},
					"transitionId": {
						"nullable": true,
						"description": "Can be used with instructions of types `startTransition`. Specifies the sequence flow to start.",
						"type": "string"
					},
					"type": {
						"description": "**Mandatory**. One of the following values: `cancel`, `startBeforeActivity`, `startAfterActivity`, `startTransition`.\n\n* A cancel instruction requests cancellation of a single activity instance or all instances of one activity.\n* A startBeforeActivity instruction requests to enter a given activity.\n* A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity.\n* A startTransition instruction requests to execute a specific sequence flow.",
						"type": "string",
						"enum": [
							"cancel",
							"startBeforeActivity",
							"startAfterActivity",
							"startTransition"
						]
					},
					"cancelCurrentActiveActivityInstances": {
						"nullable": true,
						"description": "Can be used with instructions of type cancel. Prevents the deletion of new created activity instances.",
						"type": "boolean"
					}
				}
			},
			"JobDuedateDto": {
				"type": "object",
				"properties": {
					"duedate": {
						"nullable": true,
						"format": "date-time",
						"description": "The date to set when the job has the next execution.",
						"type": "string"
					},
					"cascade": {
						"nullable": true,
						"description": "A boolean value to indicate if modifications to the due date should cascade to\nsubsequent jobs. (e.g. Modify the due date of a timer by +15\nminutes. This flag indicates if a +15 minutes should be applied to all\nsubsequent timers.) This flag only affects timer jobs and only works if due date\nis not null. Default: `false`",
						"type": "boolean"
					}
				}
			},
			"AuthorizationExceptionDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"userId": {
							"nullable": true,
							"description": "The id of the user that does not have expected permissions",
							"type": "string"
						},
						"missingAuthorizations": {
							"nullable": true,
							"description": "",
							"type": "array",
							"items": {"$ref": "#/components/schemas/MissingAuthorizationDto"}
						}
					}
				},
				{"$ref": "#/components/schemas/ExceptionDto"}
			]},
			"HistoricActivityStatisticsDto": {
				"type": "object",
				"properties": {
					"canceled": {
						"nullable": true,
						"format": "int64",
						"description": "The total number of all canceled instances of the activity. **Note:** Will be `0`\n(not `null`), if canceled activity instances were excluded.",
						"type": "integer"
					},
					"resolvedIncidents": {
						"nullable": true,
						"format": "int64",
						"description": "The total number of resolved incidents for the activity. **Note:** Will be `0` (not\n`null`), if `incidents` is set to `false`.",
						"type": "integer"
					},
					"instances": {
						"nullable": true,
						"format": "int64",
						"description": "The total number of all running instances of the activity.",
						"type": "integer"
					},
					"finished": {
						"nullable": true,
						"format": "int64",
						"description": "The total number of all finished instances of the activity. **Note:** Will be `0`\n(not `null`), if finished activity instances were excluded.",
						"type": "integer"
					},
					"id": {
						"nullable": true,
						"description": "The id of the activity the results are aggregated for.",
						"type": "string"
					},
					"openIncidents": {
						"nullable": true,
						"format": "int64",
						"description": "The total number of open incidents for the activity. **Note:** Will be `0` (not\n`null`), if `incidents` is set to `false`.",
						"type": "integer"
					},
					"deletedIncidents": {
						"nullable": true,
						"format": "int64",
						"description": "The total number of deleted incidents for the activity. **Note:** Will be `0` (not\n`null`), if `incidents` is set to `false`.",
						"type": "integer"
					},
					"completeScope": {
						"nullable": true,
						"format": "int64",
						"description": "The total number of all instances which completed a scope of the activity.\n**Note:** Will be `0` (not `null`), if activity instances which\ncompleted a scope were excluded.",
						"type": "integer"
					}
				}
			},
			"CleanableHistoricDecisionInstanceReportResultDto": {
				"type": "object",
				"properties": {
					"finishedDecisionInstanceCount": {
						"nullable": true,
						"format": "int64",
						"description": "The count of the finished historic decision instances.",
						"type": "integer"
					},
					"decisionDefinitionId": {
						"nullable": true,
						"description": "The id of the decision definition.",
						"type": "string"
					},
					"decisionDefinitionName": {
						"nullable": true,
						"description": "The name of the decision definition.",
						"type": "string"
					},
					"decisionDefinitionVersion": {
						"nullable": true,
						"format": "int32",
						"description": "The version of the decision definition.",
						"type": "integer"
					},
					"cleanableDecisionInstanceCount": {
						"nullable": true,
						"format": "int64",
						"description": "The count of the cleanable historic decision instances, referring to history time\nto live.",
						"type": "integer"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the decision definition.",
						"type": "string"
					},
					"historyTimeToLive": {
						"nullable": true,
						"format": "int32",
						"description": "The history time to live of the decision definition.",
						"type": "integer"
					},
					"decisionDefinitionKey": {
						"nullable": true,
						"description": "The key of the decision definition.",
						"type": "string"
					}
				}
			},
			"DecisionRequirementsDefinitionDto": {
				"type": "object",
				"properties": {
					"resource": {
						"nullable": true,
						"description": "The file name of the decision requirements definition.",
						"type": "string"
					},
					"deploymentId": {
						"nullable": true,
						"description": "The deployment id of the decision requirements definition.",
						"type": "string"
					},
					"name": {
						"nullable": true,
						"description": "The name of the decision requirements definition.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the decisionrequirements definition.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the decision requirements definition",
						"type": "string"
					},
					"category": {
						"nullable": true,
						"description": "The category of the decision requirements definition.",
						"type": "string"
					},
					"version": {
						"nullable": true,
						"format": "int32",
						"description": "The version of the decision requirements definition that the engine assigned to it.",
						"type": "integer"
					},
					"key": {
						"nullable": true,
						"description": "The key of the decision requirements definition, i.e., the id of the DMN 1.0 XML decision definition.",
						"type": "string"
					}
				}
			},
			"UserProfileDto": {
				"type": "object",
				"properties": {
					"firstName": {
						"nullable": true,
						"description": "The first name of the user.",
						"type": "string"
					},
					"lastName": {
						"nullable": true,
						"description": "The first name of the user.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the user.",
						"type": "string"
					},
					"email": {
						"nullable": true,
						"description": "The email of the user.",
						"type": "string"
					}
				}
			},
			"CommentDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"processInstanceId": {
							"nullable": true,
							"description": "The id of the process instance the comment is related to.",
							"type": "string"
						},
						"rootProcessInstanceId": {
							"nullable": true,
							"description": "The process instance id of the root process instance that initiated the process\ncontaining the task.",
							"type": "string"
						},
						"id": {
							"nullable": true,
							"description": "The id of the task comment.",
							"type": "string"
						},
						"time": {
							"nullable": true,
							"format": "date-time",
							"description": "The time when the comment was created.\n[Default format]($(docsUrl)/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
							"type": "string"
						},
						"message": {
							"nullable": true,
							"description": "The content of the comment.",
							"type": "string"
						},
						"userId": {
							"nullable": true,
							"description": "The id of the user who created the comment.",
							"type": "string"
						},
						"taskId": {
							"nullable": true,
							"description": "The id of the task to which the comment belongs.",
							"type": "string"
						},
						"removalTime": {
							"nullable": true,
							"format": "date-time",
							"description": "The time after which the comment should be removed by the History Cleanup job.\n[Default format]($(docsUrl)/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
							"type": "string"
						}
					}
				},
				{"$ref": "#/components/schemas/LinkableDto"}
			]},
			"JobDefinitionPriorityDto": {
				"type": "object",
				"properties": {
					"priority": {
						"nullable": true,
						"format": "int64",
						"description": "The new execution priority number for jobs of the given definition. The\ndefinition's priority can be reset by using the value `null`. In\nthat case, the job definition's priority no longer applies but a new\njob's priority is determined as specified in the process model.",
						"type": "integer"
					},
					"includeJobs": {
						"nullable": true,
						"description": "A boolean value indicating whether existing jobs of the given definition should\nreceive the priority as well. Default value is `false`. Can only be\n`true` when the __priority__ parameter is not `null`.",
						"type": "boolean"
					}
				}
			},
			"AbstractSetRemovalTimeDto": {
				"type": "object",
				"properties": {
					"clearedRemovalTime": {
						"nullable": true,
						"description": "Sets the removal time to `null`. Value may only be `true`, as `false` is the default behavior.\n\n**Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `calculatedRemovalTime`.",
						"type": "boolean"
					},
					"calculatedRemovalTime": {
						"nullable": true,
						"description": "The removal time is calculated based on the engine's configuration settings. Value may only be `true`, as `false` is the default behavior.\n\n**Note:** Cannot be set in conjunction with `absoluteRemovalTime` or `clearedRemovalTime`.",
						"type": "boolean"
					},
					"absoluteRemovalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The date for which the instances shall be removed. Value may not be `null`.\n\n**Note:** Cannot be set in conjunction with `clearedRemovalTime` or `calculatedRemovalTime`.",
						"type": "string"
					}
				}
			},
			"ProcessDefinitionStatisticsResultDto": {
				"type": "object",
				"properties": {
					"@class": {
						"nullable": true,
						"description": "The fully qualified class name of the data transfer object class.\nThe class name might change in future releases.",
						"type": "string"
					},
					"instances": {
						"format": "int32",
						"description": "The total number of running process instances of this process definition.",
						"type": "integer"
					},
					"failedJobs": {
						"format": "int32",
						"description": "The total number of failed jobs for the running instances.\n**Note**: Will be `0` (not `null`), if failed jobs were excluded.",
						"type": "integer"
					},
					"incidents": {
						"nullable": true,
						"description": "Each item in the resulting array is an object which contains `incidentType` and `incidentCount`.\n**Note**: Will be an empty array, if `incidents` or `incidentsForType` were excluded.\nFurthermore, the array will be also empty if no incidents were found.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/IncidentStatisticsResultDto"}
					},
					"definition": {"$ref": "#/components/schemas/ProcessDefinitionDto"},
					"id": {
						"nullable": true,
						"description": "The id of the process definition the results are aggregated for.",
						"type": "string"
					}
				}
			},
			"VariableInstanceDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"processDefinitionId": {
							"nullable": true,
							"description": "The id of the process definition that this variable instance belongs to.",
							"type": "string"
						},
						"processInstanceId": {
							"nullable": true,
							"description": "The id of the process instance that this variable instance belongs to.",
							"type": "string"
						},
						"executionId": {
							"nullable": true,
							"description": "The id of the execution that this variable instance belongs to.",
							"type": "string"
						},
						"caseExecutionId": {
							"nullable": true,
							"description": "The id of the case execution that this variable instance belongs to.",
							"type": "string"
						},
						"caseInstanceId": {
							"nullable": true,
							"description": "The id of the case instance that this variable instance belongs to.",
							"type": "string"
						},
						"name": {
							"nullable": true,
							"description": "The name of the variable instance.",
							"type": "string"
						},
						"tenantId": {
							"nullable": true,
							"description": "The id of the tenant that this variable instance belongs to.",
							"type": "string"
						},
						"errorMessage": {
							"nullable": true,
							"description": "An error message in case a Java Serialized Object could not be de-serialized.",
							"type": "string"
						},
						"id": {
							"nullable": true,
							"description": "The id of the variable instance.",
							"type": "string"
						},
						"activityInstanceId": {
							"nullable": true,
							"description": "The id of the activity instance that this variable instance belongs to.",
							"type": "string"
						},
						"batchId": {
							"nullable": true,
							"description": "The id of the batch that this variable instance belongs to.<",
							"type": "string"
						},
						"taskId": {
							"nullable": true,
							"description": "The id of the task that this variable instance belongs to.",
							"type": "string"
						}
					}
				},
				{"$ref": "#/components/schemas/VariableValueDto"}
			]},
			"HistoricDecisionInstanceStatisticsDto": {
				"type": "object",
				"properties": {
					"evaluations": {
						"nullable": true,
						"format": "int32",
						"description": "A number of evaluation for decision definition.",
						"type": "integer"
					},
					"decisionDefinitionKey": {
						"nullable": true,
						"description": "A key of decision definition.",
						"type": "string"
					}
				}
			},
			"JobDefinitionsSuspensionStateDto": {"allOf": [
				{
					"description": "Defines by which selection criterion to activate or suspend job definitions.\nThe selection criteria are mutually exclusive and can only be one of:\n* `processDefinitionId`\n* `processDefinitionKey`",
					"type": "object",
					"properties": {
						"processDefinitionId": {
							"nullable": true,
							"description": "The process definition id of the job definitions to activate or suspend.",
							"type": "string"
						},
						"processDefinitionWithoutTenantId": {
							"nullable": true,
							"description": "Only activate or suspend job definitions of a process definition which belongs to\nno tenant. Value may only be `true`, as `false` is the default\nbehavior.\n\nNote that this parameter will only be considered \nin combination with `processDefinitionKey`.",
							"type": "boolean"
						},
						"processDefinitionTenantId": {
							"nullable": true,
							"description": "Only activate or suspend job definitions of a process definition which belongs to a\ntenant with the given id.\n\nNote that this parameter will only be considered \nin combination with `processDefinitionKey`.",
							"type": "string"
						},
						"processDefinitionKey": {
							"nullable": true,
							"description": "The process definition key of the job definitions to activate or suspend.",
							"type": "string"
						}
					}
				},
				{"$ref": "#/components/schemas/JobDefinitionSuspensionStateDto"}
			]},
			"JobRetriesDto": {"allOf": [
				{
					"type": "object",
					"properties": {"dueDate": {
						"nullable": true,
						"format": "date-time",
						"description": "The due date to set for the job. A due date indicates when this job is ready for execution.\nJobs with due dates in the past will be scheduled for execution.",
						"type": "string"
					}}
				},
				{"$ref": "#/components/schemas/RetriesDto"}
			]},
			"ActivityInstanceDto": {
				"description": "A JSON object corresponding to the Activity Instance tree of the given process instance.",
				"type": "object",
				"properties": {
					"childTransitionInstances": {
						"nullable": true,
						"description": "A list of child transition instances.\nA transition instance represents an execution waiting in an asynchronous continuation.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/TransitionInstanceDto"}
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance this activity instance is part of.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition.",
						"type": "string"
					},
					"activityName": {
						"nullable": true,
						"description": "The name of the activity",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "The id of the activity.",
						"type": "string"
					},
					"executionIds": {
						"nullable": true,
						"description": "A list of execution ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"name": {
						"nullable": true,
						"description": "The name of the activity. This property is deprecated. Please use 'activityName'.",
						"type": "string"
					},
					"incidents": {
						"nullable": true,
						"description": "A list of JSON objects containing incident specific properties:\n* `id`: the id of the incident\n* `activityId`: the activity id in which the incident occurred",
						"type": "array",
						"items": {"$ref": "#/components/schemas/ActivityInstanceIncidentDto"}
					},
					"id": {
						"nullable": true,
						"description": "The id of the activity instance.",
						"type": "string"
					},
					"activityType": {
						"nullable": true,
						"description": "The type of activity (corresponds to the XML element name in the BPMN 2.0, e.g., 'userTask')",
						"type": "string"
					},
					"incidentIds": {
						"nullable": true,
						"description": "A list of incident ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"childActivityInstances": {
						"nullable": true,
						"description": "A list of child activity instances.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/ActivityInstanceDto"}
					},
					"parentActivityInstanceId": {
						"nullable": true,
						"description": "The id of the parent activity instance, for example a sub process instance.",
						"type": "string"
					}
				}
			},
			"AttachmentDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"createTime": {
							"nullable": true,
							"format": "date-time",
							"description": "The time the variable was inserted.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
							"type": "string"
						},
						"name": {
							"nullable": true,
							"description": "The name of the task attachment.",
							"type": "string"
						},
						"description": {
							"nullable": true,
							"description": "The description of the task attachment.",
							"type": "string"
						},
						"rootProcessInstanceId": {
							"nullable": true,
							"description": "The process instance id of the root process instance that initiated the process containing the task.",
							"type": "string"
						},
						"id": {
							"nullable": true,
							"description": "The id of the task attachment.",
							"type": "string"
						},
						"type": {
							"nullable": true,
							"description": "Indication of the type of content that this attachment refers to.\nCan be MIME type or any other indication.",
							"type": "string"
						},
						"taskId": {
							"nullable": true,
							"description": "The id of the task to which the attachment belongs.",
							"type": "string"
						},
						"url": {
							"nullable": true,
							"description": "The url to the remote content of the task attachment.",
							"type": "string"
						},
						"removalTime": {
							"nullable": true,
							"format": "date-time",
							"description": "The time after which the attachment should be removed by the History Cleanup job.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
							"type": "string"
						}
					}
				},
				{"$ref": "#/components/schemas/LinkableDto"}
			]},
			"IncidentStatisticsResultDto": {
				"type": "object",
				"properties": {
					"incidentCount": {
						"nullable": true,
						"format": "int32",
						"description": "The total number of incidents for the corresponding incident type.",
						"type": "integer"
					},
					"incidentType": {
						"nullable": true,
						"description": "The type of the incident the number of incidents is aggregated for.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types) for a list of incident types.",
						"type": "string"
					}
				}
			},
			"PriorityDto": {
				"type": "object",
				"properties": {"priority": {
					"nullable": true,
					"format": "int64",
					"description": "The priority of the resource.",
					"type": "integer"
				}}
			},
			"HistoricDecisionInstanceDto": {
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition that this decision instance belongs to.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance that this decision instance belongs to.",
						"type": "string"
					},
					"rootDecisionInstanceId": {
						"nullable": true,
						"description": "The decision instance id of the evaluated root decision. Can be `null` if this\ninstance is the root decision instance of the evaluation.",
						"type": "string"
					},
					"caseDefinitionId": {
						"nullable": true,
						"description": "The id of the case definition that this decision instance belongs to.",
						"type": "string"
					},
					"ouputs": {
						"nullable": true,
						"description": "The list of decision output values. **Only exists** if `includeOutputs`\nwas set to `true` in the query.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/HistoricDecisionOutputInstanceDto"}
					},
					"inputs": {
						"nullable": true,
						"description": "The list of decision input values. **Only exists** if `includeInputs`\nwas set to `true` in the query.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/HistoricDecisionInputInstanceDto"}
					},
					"caseDefinitionKey": {
						"nullable": true,
						"description": "The key of the case definition that this decision instance belongs to.",
						"type": "string"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "The id of the case instance that this decision instance belongs to.",
						"type": "string"
					},
					"decisionDefinitionKey": {
						"nullable": true,
						"description": "The key of the decision definition that this decision instance belongs to.",
						"type": "string"
					},
					"activityInstanceId": {
						"nullable": true,
						"description": "The id of the activity instance that this decision instance belongs to.",
						"type": "string"
					},
					"evaluationTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the instance was evaluated. \n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"userId": {
						"nullable": true,
						"description": "The id of the authenticated user that has evaluated this decision instance without\na process or case instance.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the instance should be removed by the History Cleanup job.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition that this decision instance belongs to.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "The id of the activity that this decision instance belongs to.",
						"type": "string"
					},
					"decisionDefinitionId": {
						"nullable": true,
						"description": "The id of the decision definition that this decision instance belongs to.",
						"type": "string"
					},
					"decisionRequirementsDefinitionId": {
						"nullable": true,
						"description": "The id of the decision requirements definition that this decision instance belongs\nto.",
						"type": "string"
					},
					"decisionDefinitionName": {
						"nullable": true,
						"description": "The name of the decision definition that this decision instance belongs to.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the historic decision instance.",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the evaluation\nof this decision. Can be `null` if this decision instance is not\nevaluated as part of a BPMN process.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the decision instance.",
						"type": "string"
					},
					"collectResultValue": {
						"nullable": true,
						"format": "double",
						"description": "The result of the collect aggregation of the decision result if used. `null` if no\naggregation was used.",
						"type": "number"
					},
					"decisionRequirementsDefinitionKey": {
						"nullable": true,
						"description": "The key of the decision requirements definition that this decision instance belongs\nto.",
						"type": "string"
					}
				}
			},
			"PatchVariablesDto": {
				"type": "object",
				"properties": {
					"deletions": {
						"nullable": true,
						"description": "An array of String keys of variables to be deleted.",
						"type": "array",
						"items": {"type": "string"}
					},
					"modifications": {
						"nullable": true,
						"description": "A JSON object containing variable key-value pairs.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					}
				}
			},
			"UserCredentialsDto": {
				"type": "object",
				"properties": {
					"password": {
						"nullable": true,
						"description": "The users new password.",
						"type": "string"
					},
					"authenticatedUserPassword": {
						"nullable": true,
						"description": "The password of the authenticated user who changes the password of the user\n(i.e., the user with passed id as path parameter).",
						"type": "string"
					}
				}
			},
			"TelemetryLicenseKeyDto": {
				"type": "object",
				"properties": {
					"features": {
						"description": "A map of features included in the license.",
						"additionalProperties": {"type": "string"},
						"type": "object"
					},
					"unlimited": {
						"nullable": true,
						"description": "Flag that indicates if the license is unlimited.",
						"type": "boolean"
					},
					"raw": {
						"nullable": true,
						"description": "The raw license information.",
						"type": "string"
					},
					"valid-until": {
						"nullable": true,
						"format": "date",
						"description": "The expiration date of the license.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "The license type.",
						"type": "string"
					},
					"customer": {
						"nullable": true,
						"description": "The name of the customer the license was issued for.",
						"type": "string"
					}
				}
			},
			"BasicUserCredentialsDto": {
				"type": "object",
				"properties": {
					"password": {
						"nullable": true,
						"description": "A password of a user.",
						"type": "string"
					},
					"username": {
						"nullable": true,
						"description": "The username of a user.",
						"type": "string"
					}
				}
			},
			"AbstractVendorVersionInformationDto": {
				"type": "object",
				"properties": {
					"vendor": {
						"nullable": true,
						"description": "Information about the vendor.",
						"type": "string"
					},
					"version": {
						"nullable": true,
						"description": "Information about the version.",
						"type": "string"
					}
				}
			},
			"HandleExternalTaskDto": {
				"type": "object",
				"properties": {"workerId": {
					"description": "**Mandatory.** The ID of the worker who is performing the operation on the external task.\nIf the task is already locked, must match the id of the worker who has most recently\nlocked the task.",
					"type": "string"
				}}
			},
			"FetchExternalTaskTopicDto": {
				"type": "object",
				"required": [
					"topicName",
					"lockDuration"
				],
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter tasks based on process definition id.",
						"type": "string"
					},
					"variables": {
						"nullable": true,
						"description": "A JSON array of `String` values that represent variable names. For each result task belonging to this\ntopic, the given variables are returned as well if they are accessible from the external task's\nexecution. If not provided - all variables will be fetched.",
						"type": "array",
						"items": {"type": "string"}
					},
					"includeExtensionProperties": {
						"default": false,
						"nullable": true,
						"description": "Determines whether custom extension properties defined in the BPMN activity of the external task (e.g.\nvia the Extensions tab in the Camunda modeler) should be included in the response. Default: false",
						"type": "boolean"
					},
					"lockDuration": {
						"nullable": true,
						"format": "int64",
						"description": "**Mandatory.** The duration to lock the external tasks for in milliseconds.",
						"type": "integer"
					},
					"processDefinitionKeyIn": {
						"nullable": true,
						"description": "Filter tasks based on process definition keys.",
						"type": "array",
						"items": {"type": "string"}
					},
					"processDefinitionIdIn": {
						"nullable": true,
						"description": "Filter tasks based on process definition ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Filter tasks based on process definition key.",
						"type": "string"
					},
					"processDefinitionVersionTag": {
						"nullable": true,
						"description": "Filter tasks based on process definition version tag.",
						"type": "string"
					},
					"localVariables": {
						"default": false,
						"nullable": true,
						"description": "If `true` only local variables will be fetched.",
						"type": "boolean"
					},
					"deserializeValues": {
						"default": false,
						"nullable": true,
						"description": "Determines whether serializable variable values (typically variables that store custom Java objects)\nshould be deserialized on server side (default `false`).\n\nIf set to `true`, a serializable variable will be deserialized on server side and transformed to JSON\nusing [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note\nthat this requires the Java classes of the variable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized format. For example, a\nvariable that is serialized as XML will be returned as a JSON string containing XML.",
						"type": "boolean"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Filter tasks based on tenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"businessKey": {
						"nullable": true,
						"description": "A `String` value which enables the filtering of tasks based on process instance business key.",
						"type": "string"
					},
					"topicName": {
						"description": "**Mandatory.** The topic's name.",
						"type": "string"
					},
					"withoutTenantId": {
						"default": false,
						"nullable": true,
						"description": "Filter tasks without tenant id.",
						"type": "boolean"
					},
					"processVariables": {
						"description": "A `JSON` object used for filtering tasks based on process instance variable values. A property name of\nthe object represents a process variable name, while the property value represents the process variable\nvalue to filter tasks by.",
						"additionalProperties": true,
						"type": "object"
					}
				}
			},
			"CompleteExternalTaskDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"variables": {
							"nullable": true,
							"description": "A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:",
							"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
							"type": "object"
						},
						"localVariables": {
							"nullable": true,
							"description": "A JSON object containing local variable key-value pairs. Local variables are set only in the scope of external task. Each key is a variable name and each value a JSON variable value object with the following properties:",
							"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
							"type": "object"
						}
					}
				},
				{"$ref": "#/components/schemas/HandleExternalTaskDto"}
			]},
			"EventSubscriptionDto": {
				"type": "object",
				"properties": {
					"executionId": {
						"nullable": true,
						"description": "The execution that is subscribed on the referenced event.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The process instance this subscription belongs to.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "The identifier of the activity that this event subscription belongs to.\nThis could for example be the id of a receive task.",
						"type": "string"
					},
					"createdDate": {
						"nullable": true,
						"format": "date-time",
						"description": "The time this event subscription was created.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant this event subscription belongs to.\nCan be `null` if the subscription belongs to no single tenant.",
						"type": "string"
					},
					"eventName": {
						"nullable": true,
						"description": "The name of the event this subscription belongs to as defined in the process model.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the event subscription.",
						"type": "string"
					},
					"eventType": {
						"nullable": true,
						"description": "The type of the event subscription.",
						"type": "string"
					}
				}
			},
			"MigrationExecutionDto": {
				"type": "object",
				"properties": {
					"processInstanceQuery": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
					"skipIoMappings": {
						"nullable": true,
						"description": "A boolean value to control whether input/output mappings should be executed during\nmigration.",
						"type": "boolean"
					},
					"migrationPlan": {"$ref": "#/components/schemas/MigrationPlanDto"},
					"processInstanceIds": {
						"nullable": true,
						"description": "A list of process instance ids to migrate.",
						"type": "array",
						"items": {"type": "string"}
					},
					"skipCustomListeners": {
						"nullable": true,
						"description": "A boolean value to control whether execution listeners should be invoked during\nmigration.",
						"type": "boolean"
					}
				}
			},
			"TaskQueryDto": {
				"description": "A Task query which defines a group of Tasks.",
				"type": "object",
				"properties": {
					"maxPriority": {
						"nullable": true,
						"format": "int32",
						"description": "Restrict to tasks that have a lower or equal priority.",
						"type": "integer"
					},
					"dueAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that are due after the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.",
						"type": "string"
					},
					"variableNamesIgnoreCase": {
						"default": false,
						"nullable": true,
						"description": "Match all variable names in this query case-insensitively. If set\n`variableName` and `variablename` are treated as equal.",
						"type": "boolean"
					},
					"assigneeExpression": {
						"nullable": true,
						"description": "Restrict to tasks that the user described by the given expression is assigned to. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions.",
						"type": "string"
					},
					"caseDefinitionKey": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a case definition with the given key.",
						"type": "string"
					},
					"dueDate": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that are due on the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.",
						"type": "string"
					},
					"createdAfterExpression": {
						"nullable": true,
						"description": "Restrict to tasks that were created after the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					},
					"processInstanceIdIn": {
						"nullable": true,
						"description": "Restrict to tasks that belong to process instances with the given ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"processDefinitionName": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a process definition with the given name.",
						"type": "string"
					},
					"involvedUserExpression": {
						"nullable": true,
						"description": "Only include tasks that the user described by the given expression is involved in.\nA user is involved in a task if an identity link exists between task and user\n(e.g., the user is the assignee). See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions.",
						"type": "string"
					},
					"unassigned": {
						"default": false,
						"nullable": true,
						"description": "If set to `true`, restricts the query to all tasks that are unassigned.",
						"type": "boolean"
					},
					"descriptionLike": {
						"nullable": true,
						"description": "Restrict to tasks that have a description that has the parameter\nvalue as a substring.",
						"type": "string"
					},
					"caseDefinitionName": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a case definition with the given name.",
						"type": "string"
					},
					"assigneeNotIn": {
						"nullable": true,
						"description": "Only include tasks which are not assigned to one of the passed and comma-separated user ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"includeAssignedTasks": {
						"default": false,
						"nullable": true,
						"description": "Also include tasks that are assigned to users in candidate queries. Default is to only \ninclude tasks that are not assigned to any user if you query by candidate user or\ngroup(s).",
						"type": "boolean"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Only include tasks which belong to one of the passed and comma-separated \ntenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"variableValuesIgnoreCase": {
						"default": false,
						"nullable": true,
						"description": "Match all variable values in this query case-insensitively. If set\n`variableValue` and `variablevalue` are treated as equal.",
						"type": "boolean"
					},
					"caseInstanceBusinessKeyLike": {
						"nullable": true,
						"description": "Restrict to tasks that have a case instance business key that has the parameter value \nas a substring.",
						"type": "string"
					},
					"taskDefinitionKeyLike": {
						"nullable": true,
						"description": "Restrict to tasks that have a key that has the parameter value as a substring.",
						"type": "string"
					},
					"caseDefinitionNameLike": {
						"nullable": true,
						"description": "Restrict to tasks that have a case definition name that has the parameter value as a \nsubstring.",
						"type": "string"
					},
					"assigneeLikeExpression": {
						"nullable": true,
						"description": "Restrict to tasks that have an assignee that has the parameter value described by the \ngiven expression as a substring. See the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "Restrict to tasks that belong to process instances with the given id.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a process definition with the given id.",
						"type": "string"
					},
					"processDefinitionNameLike": {
						"nullable": true,
						"description": "Restrict to tasks that have a process definition name that has the parameter value as \na substring.",
						"type": "string"
					},
					"caseExecutionId": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a case execution with the given id.",
						"type": "string"
					},
					"candidateGroupExpression": {
						"nullable": true,
						"description": "Only include tasks that are offered to the group described by the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions.",
						"type": "string"
					},
					"caseDefinitionId": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a case definition with the given id.",
						"type": "string"
					},
					"assigneeLike": {
						"nullable": true,
						"description": "Restrict to tasks that have an assignee that has the parameter \nvalue as a substring.",
						"type": "string"
					},
					"active": {
						"default": false,
						"nullable": true,
						"description": "Only include active tasks. Value may only be `true`, as `false`\nis the default behavior.",
						"type": "boolean"
					},
					"priority": {
						"nullable": true,
						"format": "int32",
						"description": "Restrict to tasks that have the given priority.",
						"type": "integer"
					},
					"suspended": {
						"default": false,
						"nullable": true,
						"description": "Only include suspended tasks. Value may only be `true`, as\n`false` is the default behavior.",
						"type": "boolean"
					},
					"candidateGroup": {
						"nullable": true,
						"description": "Only include tasks that are offered to the given group.",
						"type": "string"
					},
					"followUpDate": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that have a followUp date on the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date\nmust have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "Restrict to tasks that belong to an execution with the given id.",
						"type": "string"
					},
					"taskDefinitionKey": {
						"nullable": true,
						"description": "Restrict to tasks that have the given key.",
						"type": "string"
					},
					"candidateUser": {
						"nullable": true,
						"description": "Only include tasks that are offered to the given user or to one of his groups.",
						"type": "string"
					},
					"orQueries": {
						"nullable": true,
						"description": "A JSON array of nested task queries with OR semantics. A task matches a nested query if it fulfills\n*at least one* of the query's predicates. With multiple nested queries, a task must fulfill at least one predicate of *each* query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).\n\nAll task query properties can be used except for: `sorting`, `withCandidateGroups`,\n`withoutCandidateGroups`, `withCandidateUsers`, `withoutCandidateUsers`\n\nSee the [User guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-engine-api/#or-queries)\nfor more information about OR queries.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/TaskQueryDto"}
					},
					"processInstanceBusinessKeyLike": {
						"nullable": true,
						"description": "Restrict to tasks that have a process instance business key that has the parameter \nvalue as a substring.",
						"type": "string"
					},
					"dueBeforeExpression": {
						"nullable": true,
						"description": "Restrict to tasks that are due before the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					},
					"candidateGroups": {
						"nullable": true,
						"description": "Restrict to tasks that are offered to any of the given candidate groups. Takes a\ncomma-separated list of group names, so for example\n`developers,support,sales`.",
						"type": "array",
						"items": {"type": "string"}
					},
					"name": {
						"nullable": true,
						"description": "Restrict to tasks that have the given name.",
						"type": "string"
					},
					"withoutDueDate": {
						"default": false,
						"nullable": true,
						"description": "Only include tasks which have no due date. Value may only be `true`, \nas `false` is the default behavior.",
						"type": "boolean"
					},
					"caseInstanceVariables": {
						"nullable": true,
						"description": "A JSON array to only include tasks that belong to a case instance with variables\nwith certain values. The array consists of JSON objects with three properties\n`name`, `operator` and `value`. `name` is the variable name, `operator` is the\ncomparison operator to be used and `value` the variable value. `value` may be of\ntype `String`, `Number` or `Boolean`.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/VariableQueryParameterDto"}
					},
					"assigned": {
						"default": false,
						"nullable": true,
						"description": "If set to `true`, restricts the query to all tasks that are assigned.",
						"type": "boolean"
					},
					"taskDefinitionKeyIn": {
						"nullable": true,
						"description": "Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.",
						"type": "array",
						"items": {"type": "string"}
					},
					"assignee": {
						"nullable": true,
						"description": "Restrict to tasks that the given user is assigned to.",
						"type": "string"
					},
					"followUpBeforeOrNotExistent": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that have no followUp date or a followUp date before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case\nis to query all `active` tasks for a user for a given date.",
						"type": "string"
					},
					"updatedAfterExpression": {
						"nullable": true,
						"description": "Restrict to tasks that were updated after the date described by the given expression. Every action that fires \na [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					},
					"updatedAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that were updated after the given date. Every action that fires \na [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must\nhave the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.",
						"type": "string"
					},
					"candidateGroupsExpression": {
						"nullable": true,
						"description": "Restrict to tasks that are offered to any of the candidate groups described by the\ngiven expression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to\n`java.util.List` of Strings.",
						"type": "string"
					},
					"withCandidateGroups": {
						"default": false,
						"nullable": true,
						"description": "Only include tasks which have a candidate group. Value may only be `true`,\nas `false` is the default behavior.",
						"type": "boolean"
					},
					"parentTaskId": {
						"nullable": true,
						"description": "Restrict query to all tasks that are sub tasks of the given task. Takes a task id.",
						"type": "string"
					},
					"description": {
						"nullable": true,
						"description": "Restrict to tasks that have the given description.",
						"type": "string"
					},
					"dueBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that are due before the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.",
						"type": "string"
					},
					"processInstanceBusinessKeyLikeExpression": {
						"nullable": true,
						"description": "Restrict to tasks that have a process instance business key that has the parameter \nvalue as a substring and is described by an expression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions.",
						"type": "string"
					},
					"taskIdIn": {
						"nullable": true,
						"description": "Restrict to tasks with any of the given ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"candidateUserExpression": {
						"nullable": true,
						"description": "Only include tasks that are offered to the user described by the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions.",
						"type": "string"
					},
					"createdOn": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that were created on the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.",
						"type": "string"
					},
					"withoutCandidateGroups": {
						"default": false,
						"nullable": true,
						"description": "Only include tasks which have no candidate group. Value may only be `true`,\nas `false` is the default behavior.",
						"type": "boolean"
					},
					"followUpDateExpression": {
						"nullable": true,
						"description": "Restrict to tasks that have a followUp date on the date described by the given\nexpression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					},
					"followUpAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that have a followUp date after the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a process definition with the given key.",
						"type": "string"
					},
					"delegationState": {
						"nullable": true,
						"description": "Restrict to tasks that are in the given delegation state. Valid values are\n`PENDING` and `RESOLVED`.",
						"type": "string",
						"enum": [
							"PENDING",
							"RESOLVED"
						]
					},
					"dueDateExpression": {
						"nullable": true,
						"description": "Restrict to tasks that are due on the date described by the given expression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					},
					"followUpBefore": {
						"nullable": true,
						"description": "Restrict to tasks that have a followUp date before the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.",
						"type": "string"
					},
					"nameNotLike": {
						"nullable": true,
						"description": "Restrict to tasks that do not have a name with the given parameter\nvalue as substring.",
						"type": "string"
					},
					"taskVariables": {
						"nullable": true,
						"description": "A JSON array to only include tasks that have variables with certain values. The\narray consists of JSON objects with three properties `name`, `operator` and `value`.\n`name` is the variable name, `operator` is the comparison operator to be used and\n`value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/VariableQueryParameterDto"}
					},
					"processInstanceBusinessKey": {
						"nullable": true,
						"description": "Restrict to tasks that belong to process instances with the given business key.",
						"type": "string"
					},
					"followUpBeforeOrNotExistentExpression": {
						"nullable": true,
						"description": "Restrict to tasks that have no followUp date or a followUp date before the date\ndescribed by the given expression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					},
					"sorting": {
						"nullable": true,
						"description": "Apply sorting of the result",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"instanceId",
										"caseInstanceId",
										"dueDate",
										"executionId",
										"caseExecutionId",
										"assignee",
										"created",
										"lastUpdated",
										"followUpDate",
										"description",
										"id",
										"name",
										"nameCaseInsensitive",
										"priority",
										"processVariable",
										"executionVariable",
										"taskVariable",
										"caseExecutionVariable",
										"caseInstanceVariable"
									]
								},
								"parameters": {"$ref": "#/components/schemas/SortTaskQueryParametersDto"}
							}
						}
					},
					"dueAfterExpression": {
						"nullable": true,
						"description": "Restrict to tasks that are due after the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					},
					"minPriority": {
						"nullable": true,
						"format": "int32",
						"description": "Restrict to tasks that have a higher or equal priority.",
						"type": "integer"
					},
					"owner": {
						"nullable": true,
						"description": "Restrict to tasks that the given user owns.",
						"type": "string"
					},
					"caseInstanceBusinessKey": {
						"nullable": true,
						"description": "Restrict to tasks that belong to case instances with the given business key.",
						"type": "string"
					},
					"withoutCandidateUsers": {
						"default": false,
						"nullable": true,
						"description": "Only include tasks which have no candidate users. Value may only be `true`,\nas `false` is the default behavior.",
						"type": "boolean"
					},
					"processInstanceBusinessKeyExpression": {
						"nullable": true,
						"description": "Restrict to tasks that belong to process instances with the given business key which \nis described by an expression. See the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions.",
						"type": "string"
					},
					"processDefinitionKeyIn": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a process definition with one of the given keys. The \nkeys need to be in a comma-separated list.",
						"type": "array",
						"items": {"type": "string"}
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "Restrict to tasks that belong to case instances with the given id.",
						"type": "string"
					},
					"ownerExpression": {
						"nullable": true,
						"description": "Restrict to tasks that the user described by the given expression owns. See the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions.",
						"type": "string"
					},
					"nameNotEqual": {
						"nullable": true,
						"description": "Restrict to tasks that do not have the given name.",
						"type": "string"
					},
					"followUpAfterExpression": {
						"nullable": true,
						"description": "Restrict to tasks that have a followUp date after the date described by the given\nexpression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					},
					"processInstanceBusinessKeyIn": {
						"nullable": true,
						"description": "Restrict to tasks that belong to process instances with one of the give business keys. \nThe keys need to be in a comma-separated list.",
						"type": "array",
						"items": {"type": "string"}
					},
					"createdAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that were created after the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must\nhave the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.",
						"type": "string"
					},
					"followUpBeforeExpression": {
						"nullable": true,
						"description": "Restrict to tasks that have a followUp date before the date described by the given\nexpression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					},
					"assigneeIn": {
						"nullable": true,
						"description": "Only include tasks which are assigned to one of the passed and comma-separated user ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"nameLike": {
						"nullable": true,
						"description": "Restrict to tasks that have a name with the given parameter value as substring.",
						"type": "string"
					},
					"activityInstanceIdIn": {
						"nullable": true,
						"description": "Only include tasks which belong to one of the passed and comma-separated activity \ninstance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"withoutTenantId": {
						"default": false,
						"nullable": true,
						"description": "Only include tasks which belong to no tenant. Value may only be `true`, \nas `false` is the default behavior.",
						"type": "boolean"
					},
					"involvedUser": {
						"nullable": true,
						"description": "Only include tasks that the given user is involved in. A user is involved in a task if \nan identity link exists between task and user (e.g., the user is the assignee).",
						"type": "string"
					},
					"createdBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that were created before the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must\nhave the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.",
						"type": "string"
					},
					"withCandidateUsers": {
						"default": false,
						"nullable": true,
						"description": "Only include tasks which have a candidate user. Value may only be `true`,\nas `false` is the default behavior.",
						"type": "boolean"
					},
					"createdOnExpression": {
						"nullable": true,
						"description": "Restrict to tasks that were created on the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					},
					"processVariables": {
						"nullable": true,
						"description": "A JSON array to only include tasks that belong to a process instance with variables\nwith certain values. The array consists of JSON objects with three properties\n`name`, `operator` and `value`. `name` is the variable name, `operator` is the\ncomparison operator to be used and `value` the variable value. `value` may be of\ntype `String`, `Number` or `Boolean`.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`;\n`notLike`.\n`key` and `value` may not contain underscore or comma characters.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/VariableQueryParameterDto"}
					},
					"taskId": {
						"nullable": true,
						"description": "Restrict to task with the given id.",
						"type": "string"
					},
					"createdBeforeExpression": {
						"nullable": true,
						"description": "Restrict to tasks that were created before the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object.",
						"type": "string"
					}
				}
			},
			"CorrelationMessageAsyncDto": {
				"type": "object",
				"properties": {
					"messageName": {
						"nullable": true,
						"description": "The name of the message to correlate. Corresponds to the 'name' element of the message defined in BPMN 2.0 XML. Can be null to correlate by other criteria only.",
						"type": "string"
					},
					"variables": {
						"nullable": true,
						"description": "All variables the operation will set in the root scope of the process instances the message is correlated to.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"processInstanceQuery": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
					"historicProcessInstanceQuery": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"},
					"processInstanceIds": {
						"nullable": true,
						"description": "A list of process instance ids that define a group of process instances\nto which the operation will correlate a message.\n\nPlease note that if `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery`\nare defined, the resulting operation will be performed on the union of these sets.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"UserOperationLogEntryDto": {
				"type": "object",
				"properties": {
					"batchId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this batch.",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to process\ndefinitions with this key.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the entry should be removed by the History Cleanup job.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"deploymentId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this\ndeployment.",
						"type": "string"
					},
					"property": {
						"nullable": true,
						"description": "The property changed by this operation.",
						"type": "string"
					},
					"operationId": {
						"nullable": true,
						"description": "The unique identifier of this operation. A composite operation that changes\nmultiple properties has a common `operationId`.",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process\ncontaining this entry.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The unique identifier of this log entry.",
						"type": "string"
					},
					"timestamp": {
						"nullable": true,
						"format": "date-time",
						"description": "Timestamp of this operation.",
						"type": "string"
					},
					"annotation": {
						"nullable": true,
						"description": "An arbitrary annotation set by a user for auditing reasons.",
						"type": "string"
					},
					"newValue": {
						"nullable": true,
						"description": "The new value of the changed property.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this process\ndefinition.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this process\ninstance.",
						"type": "string"
					},
					"caseExecutionId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this case\nexecution.",
						"type": "string"
					},
					"jobDefinitionId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this job\ndefinition.",
						"type": "string"
					},
					"caseDefinitionId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this case\ndefinition.",
						"type": "string"
					},
					"entityType": {
						"nullable": true,
						"description": "The type of the entity on which this operation was executed, e.g., `Task` or\n`Attachment`.",
						"type": "string"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this case\ninstance.",
						"type": "string"
					},
					"userId": {
						"nullable": true,
						"description": "The user who performed this operation.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this\nexecution.",
						"type": "string"
					},
					"jobId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this job.",
						"type": "string"
					},
					"orgValue": {
						"nullable": true,
						"description": "The original value of the changed property.",
						"type": "string"
					},
					"operationType": {
						"nullable": true,
						"description": "The type of this operation, e.g., `Assign`, `Claim` and so on.",
						"type": "string"
					},
					"category": {
						"nullable": true,
						"description": "The name of the category this operation was associated with, e.g., `TaskWorker` or\n`Admin`.",
						"type": "string"
					},
					"externalTaskId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this external task.",
						"type": "string"
					},
					"taskId": {
						"nullable": true,
						"description": "If not `null`, the operation is restricted to entities in relation to this task.",
						"type": "string"
					}
				}
			},
			"CreateIncidentDto": {
				"type": "object",
				"properties": {
					"configuration": {
						"nullable": true,
						"description": "A configuration for the new incident.",
						"type": "string"
					},
					"incidentType": {
						"nullable": true,
						"description": "A type of the new incident.",
						"type": "string"
					},
					"message": {
						"nullable": true,
						"description": "A message for the new incident.",
						"type": "string"
					}
				}
			},
			"TaskDto": {
				"type": "object",
				"properties": {
					"owner": {
						"nullable": true,
						"description": "The owner's id.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition the task belongs to.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance the task belongs to.",
						"type": "string"
					},
					"caseExecutionId": {
						"nullable": true,
						"description": "The id of the case execution the task belongs to.",
						"type": "string"
					},
					"caseDefinitionId": {
						"nullable": true,
						"description": "The id of the case definition the task belongs to.",
						"type": "string"
					},
					"formKey": {
						"nullable": true,
						"description": "If not `null`, the form key for the task.",
						"type": "string"
					},
					"created": {
						"nullable": true,
						"format": "date-time",
						"description": "The date the task was created on.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"parentTaskId": {
						"nullable": true,
						"description": "The id the parent task, if this task is a subtask.",
						"type": "string"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "The id of the case instance the task belongs to.",
						"type": "string"
					},
					"description": {
						"nullable": true,
						"description": "The task's description.",
						"type": "string"
					},
					"priority": {
						"nullable": true,
						"format": "int32",
						"description": "The task's priority.",
						"type": "integer"
					},
					"camundaFormRef": {"$ref": "#/components/schemas/CamundaFormRef"},
					"suspended": {
						"nullable": true,
						"description": "Whether the task belongs to a process instance that is suspended.",
						"type": "boolean"
					},
					"delegationState": {
						"nullable": true,
						"description": "The task's delegation state. Possible values are `PENDING` and `RESOLVED`.",
						"type": "string",
						"enum": [
							"PENDING",
							"RESOLVED"
						]
					},
					"lastUpdated": {
						"nullable": true,
						"format": "date-time",
						"description": "The date the task was last updated. Every action that fires a [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) will update this property.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"followUp": {
						"nullable": true,
						"format": "date-time",
						"description": "The follow-up date for the task.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "The id of the execution the task belongs to.",
						"type": "string"
					},
					"taskDefinitionKey": {
						"nullable": true,
						"description": "The task's key.",
						"type": "string"
					},
					"due": {
						"nullable": true,
						"format": "date-time",
						"description": "The task's due date.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"name": {
						"nullable": true,
						"description": "The task name.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "If not `null`, the tenant id of the task.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The task id.",
						"type": "string"
					},
					"assignee": {
						"nullable": true,
						"description": "The assignee's id.",
						"type": "string"
					}
				}
			},
			"TelemetryInternalsDto": {
				"type": "object",
				"properties": {
					"jdk": {"$ref": "#/components/schemas/AbstractVendorVersionInformationDto"},
					"database": {"$ref": "#/components/schemas/AbstractVendorVersionInformationDto"},
					"camunda-integration": {
						"nullable": true,
						"description": "List of Camunda integrations used (e.g., Camunda Spring Boot Starter, Camunda Run, WildFly/JBoss subsystem, Camunda EJB).",
						"type": "array",
						"items": {"type": "string"}
					},
					"application-server": {"$ref": "#/components/schemas/AbstractVendorVersionInformationDto"},
					"data-collection-start-date": {
						"format": "date-time",
						"description": "The date when the engine started to collect dynamic data, such as command executions and metrics. If telemetry sending is enabled, dynamic data resets on sending the data to Camunda.\nDynamic data and the date returned by this method are reset in three cases: engine startup, after engine start when sending telemetry data to Camunda is enabled via API, after sending telemetry data to Camunda (only when this was enabled)\nThe date is in the format <code>YYYY-MM-DD'T'HH:mm:ss.SSSZ<\/code>.",
						"type": "string"
					},
					"webapps": {
						"nullable": true,
						"description": "The webapps enabled in this installation of Camunda.",
						"type": "array",
						"items": {"type": "string"}
					},
					"license-key": {"$ref": "#/components/schemas/TelemetryLicenseKeyDto"},
					"metrics": {
						"nullable": true,
						"description": "The collected metrics are the number of root process instance executions started, the number of activity instances started or also known as flow node instances, and the number of executed decision instances and elements.",
						"additionalProperties": {"$ref": "#/components/schemas/TelemetryCountDto"},
						"type": "object"
					},
					"commands": {
						"nullable": true,
						"description": "The count of executed commands after the last retrieved data.",
						"additionalProperties": {"$ref": "#/components/schemas/TelemetryCountDto"},
						"type": "object"
					}
				}
			},
			"HistoricExternalTaskLogQueryDto": {
				"description": "A Historic External Task Log instance query which defines a list of Historic External Task Log instances",
				"type": "object",
				"properties": {
					"processInstanceId": {
						"nullable": true,
						"description": "Filter by process instance id.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by process definition id.",
						"type": "string"
					},
					"workerId": {
						"nullable": true,
						"description": "Filter by the id of the worker that the task was most recently locked by.",
						"type": "string"
					},
					"deletionLog": {
						"nullable": true,
						"description": "Only include deletion logs. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"creationLog": {
						"nullable": true,
						"description": "Only include creation logs. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"successLog": {
						"nullable": true,
						"description": "Only include success logs. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"errorMessage": {
						"nullable": true,
						"description": "Filter by external task exception message.",
						"type": "string"
					},
					"executionIdIn": {
						"nullable": true,
						"description": "Only include historic external task logs which belong to one of the passed execution ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Filter by process definition key.",
						"type": "string"
					},
					"failureLog": {
						"nullable": true,
						"description": "Only include failure logs. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"priorityLowerThanOrEquals": {
						"nullable": true,
						"format": "int64",
						"description": "Only include logs for which the associated external task had a priority lower than or\nequal to the given value. Value must be a valid `long` value.",
						"type": "integer"
					},
					"priorityHigherThanOrEquals": {
						"nullable": true,
						"format": "int64",
						"description": "Only include logs for which the associated external task had a priority higher than or\nequal to the given value. Value must be a valid `long` value.",
						"type": "integer"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Only include historic external task log entries which belong to one of the passed and\ncomma-separated tenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"activityInstanceIdIn": {
						"nullable": true,
						"description": "Only include historic external task logs which belong to one of the passed activity\ninstance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sorting": {
						"nullable": true,
						"description": "An array of criteria to sort the result by. Each element of the array is\n                       an object that specifies one ordering. The position in the array\n                       identifies the rank of an ordering, i.e., whether it is primary, secondary,\n                       etc. Sorting has no effect for `count` endpoints.",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"timestamp",
										"externalTaskId",
										"topicName",
										"workerId",
										"retries",
										"priority",
										"activityId",
										"activityInstanceId",
										"executionId",
										"processInstanceId",
										"processDefinitionId",
										"processDefinitionKey",
										"tenantId"
									]
								}
							}
						}
					},
					"topicName": {
						"nullable": true,
						"description": "Filter by an external task topic.",
						"type": "string"
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include historic external task log entries that belong to no tenant. Value may only\nbe `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"logId": {
						"nullable": true,
						"description": "Filter by historic external task log id.",
						"type": "string"
					},
					"externalTaskId": {
						"nullable": true,
						"description": "Filter by external task id.",
						"type": "string"
					},
					"activityIdIn": {
						"nullable": true,
						"description": "Only include historic external task logs which belong to one of the passed activity ids.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"ParseExceptionDto": {"allOf": [
				{
					"type": "object",
					"properties": {"details": {
						"nullable": true,
						"description": "A JSON Object containing list of errors and warnings occurred during deployment.",
						"additionalProperties": {"$ref": "#/components/schemas/ResourceReportDto"},
						"type": "object"
					}}
				},
				{"$ref": "#/components/schemas/ExceptionDto"}
			]},
			"HistoricDecisionInputInstanceDto": {
				"type": "object",
				"properties": {
					"decisionInstanceId": {
						"nullable": true,
						"description": "The id of the decision instance the input value belongs to.",
						"type": "string"
					},
					"createTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the variable was inserted. \n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"clauseName": {
						"nullable": true,
						"description": "The name of the clause the input value belongs to.",
						"type": "string"
					},
					"errorMessage": {
						"nullable": true,
						"description": "An error message in case a Java Serialized Object could not be de-serialized.",
						"type": "string"
					},
					"valueInfo": {
						"description": "A JSON object containing additional, value-type-dependent\nproperties.\n\nFor variables of type `Object`, the following properties are\nreturned:\n\n* `objectTypeName`: A string representation of the object's type\nname.\n\n* `serializationDataFormat`: The serialization format used to store\nthe variable.",
						"additionalProperties": true,
						"type": "object"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process\ncontaining this entry.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the decision input value.",
						"type": "string"
					},
					"clauseId": {
						"nullable": true,
						"description": "The id of the clause the input value belongs to.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "The value type of the variable.",
						"type": "string"
					},
					"value": {
						"description": "The variable's value. Value differs depending on the variable's type\nand on the `disableCustomObjectDeserialization` parameter.",
						"type": "object"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the entry should be removed by the History Cleanup job.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					}
				}
			},
			"TaskBpmnErrorDto": {
				"type": "object",
				"properties": {
					"variables": {
						"nullable": true,
						"description": "A JSON object containing variable key-value pairs.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"errorMessage": {
						"nullable": true,
						"description": "An error message that describes the error.",
						"type": "string"
					},
					"errorCode": {
						"nullable": true,
						"description": "An error code that indicates the predefined error. It is used to identify the BPMN\nerror handler.",
						"type": "string"
					}
				}
			},
			"AnyValue": {"description": "Can be any value - string, number, boolean, array or object.\n **Note**: Not every endpoint supports every type."},
			"HistoricDecisionOutputInstanceDto": {
				"type": "object",
				"properties": {
					"variableName": {
						"nullable": true,
						"description": "The name of the output variable.",
						"type": "string"
					},
					"decisionInstanceId": {
						"nullable": true,
						"description": "The id of the decision instance the output value belongs to.",
						"type": "string"
					},
					"errorMessage": {
						"nullable": true,
						"description": "An error message in case a Java Serialized Object could not be de-serialized.",
						"type": "string"
					},
					"valueInfo": {
						"description": "A JSON object containing additional, value-type-dependent\nproperties.\n\nFor variables of type `Object`, the following properties are\nreturned:\n\n* `objectTypeName`: A string representation of the object's type\nname.\n\n* `serializationDataFormat`: The serialization format used to store\nthe variable.",
						"additionalProperties": true,
						"type": "object"
					},
					"clauseId": {
						"nullable": true,
						"description": "The id of the clause the output value belongs to.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "The value type of the variable.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the entry should be removed by the History Cleanup job.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"createTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the variable was inserted. \n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"clauseName": {
						"nullable": true,
						"description": "The name of the clause the output value belongs to.",
						"type": "string"
					},
					"ruleOrder": {
						"nullable": true,
						"format": "int32",
						"description": "The order of the rule the output value belongs to.",
						"type": "integer"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process\ncontaining this entry.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the decision output value.",
						"type": "string"
					},
					"ruleId": {
						"nullable": true,
						"description": "The id of the rule the output value belongs to.",
						"type": "string"
					},
					"value": {
						"description": "The variable's value. Value differs depending on the variable's type\nand on the `disableCustomObjectDeserialization` parameter.",
						"type": "object"
					}
				}
			},
			"StartProcessInstanceDto": {
				"type": "object",
				"properties": {
					"variables": {
						"nullable": true,
						"description": "",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"withVariablesInReturn": {
						"nullable": true,
						"description": "Indicates if the variables, which was used by the process instance during execution, should be returned.\nDefault value: `false`",
						"type": "boolean"
					},
					"skipIoMappings": {
						"nullable": true,
						"description": "Skip execution of\n[input/output variable mappings](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#input-output-variable-mapping)\nfor activities that are started or ended as part of this request.\n**Note**: This option is currently only respected when start instructions are submitted\nvia the `startInstructions` property.",
						"type": "boolean"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "The case instance id the process instance is to be initialized with.",
						"type": "string"
					},
					"businessKey": {
						"nullable": true,
						"description": "The business key of the process instance.",
						"type": "string"
					},
					"startInstructions": {
						"nullable": true,
						"description": "**Optional**. A JSON array of instructions that specify which activities to start the process instance at.\nIf this property is omitted, the process instance starts at its default blank start event.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/ProcessInstanceModificationInstructionDto"}
					},
					"skipCustomListeners": {
						"nullable": true,
						"description": "Skip execution listener invocation for activities that are started or ended as part of this request.\n**Note**: This option is currently only respected when start instructions are submitted\nvia the `startInstructions` property.",
						"type": "boolean"
					}
				}
			},
			"MultiFormVariableBinaryDto": {
				"type": "object",
				"properties": {
					"data": {
						"nullable": true,
						"format": "binary",
						"description": "The binary data to be set.\nFor File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set\nOnly the filename is mandatory.",
						"type": "string"
					},
					"valueType": {
						"nullable": true,
						"description": "The name of the variable type. Either Bytes for a byte array variable or File for a file variable.",
						"type": "string",
						"enum": [
							"Bytes",
							"File"
						]
					}
				}
			},
			"SchemaLogEntryDto": {
				"type": "object",
				"properties": {
					"id": {
						"nullable": true,
						"description": "The id of the schema log entry.",
						"type": "string"
					},
					"version": {
						"nullable": true,
						"description": "The version of the schema.",
						"type": "string"
					},
					"timestamp": {
						"nullable": true,
						"format": "date-time",
						"description": "The date and time of the schema update.",
						"type": "string"
					}
				}
			},
			"CompleteTaskDto": {
				"type": "object",
				"properties": {
					"variables": {
						"nullable": true,
						"description": "A JSON object containing variable key-value pairs.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"withVariablesInReturn": {
						"default": false,
						"nullable": true,
						"description": "Indicates whether the response should contain the process variables or not. The\ndefault is `false` with a response code of `204`. If set to `true` the response\ncontains the process variables and has a response code of `200`. If the task is not\nassociated with a process instance (e.g. if it's part of a case instance) no\nvariables will be returned.",
						"type": "boolean"
					}
				}
			},
			"ConditionQueryParameterDto": {
				"type": "object",
				"properties": {
					"value": {"$ref": "#/components/schemas/AnyValue"},
					"operator": {
						"nullable": true,
						"description": "Comparison operator to be used. `notLike` is not supported by all endpoints.",
						"type": "string",
						"enum": [
							"eq",
							"neq",
							"gt",
							"gteq",
							"lt",
							"lteq",
							"like",
							"notLike"
						]
					}
				}
			},
			"ProcessDefinitionDiagramDto": {
				"type": "object",
				"properties": {
					"bpmn20Xml": {
						"nullable": true,
						"description": "An escaped XML string containing the XML that this definition was deployed with.\nCarriage returns, line feeds and quotation marks are escaped.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the process definition.",
						"type": "string"
					}
				}
			},
			"ProcessEngineDto": {
				"type": "object",
				"properties": {"name": {
					"nullable": true,
					"description": "The name of the process engine.",
					"type": "string"
				}}
			},
			"IdentityServiceGroupInfoDto": {
				"type": "object",
				"properties": {
					"groups": {
						"nullable": true,
						"description": "An array of group objects.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/IdentityServiceGroupDto"}
					},
					"groupUsers": {
						"nullable": true,
						"description": "An array that contains all users that are member in one of the groups.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/IdentityServiceUserDto"}
					}
				}
			},
			"JobDefinitionQueryDto": {
				"description": "A Job definition query which defines a list of Job definitions",
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "Only include job definitions which exist for the given process definition id.",
						"type": "string"
					},
					"jobDefinitionId": {
						"nullable": true,
						"description": "Filter by job definition id.",
						"type": "string"
					},
					"withOverridingJobPriority": {
						"nullable": true,
						"description": "Only include job definitions that have an overriding job priority defined. The only\neffective value is `true`. If set to `false`, this filter is not applied.",
						"type": "boolean"
					},
					"active": {
						"nullable": true,
						"description": "Only include active job definitions. Value may only be `true`, as `false` is the default\nbehavior.",
						"type": "boolean"
					},
					"suspended": {
						"nullable": true,
						"description": "Only include suspended job definitions. Value may only be `true`, as `false` is the\ndefault behavior.",
						"type": "boolean"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Only include job definitions which exist for the given process definition key.",
						"type": "string"
					},
					"includeJobDefinitionsWithoutTenantId": {
						"nullable": true,
						"description": "Include job definitions which belong to no tenant. Can be used in combination with\n`tenantIdIn`. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Only include job definitions which belong to one of the passed tenant\nids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sorting": {
						"nullable": true,
						"description": "An array of criteria to sort the result by. Each element of the array is\n                       an object that specifies one ordering. The position in the array\n                       identifies the rank of an ordering, i.e., whether it is primary, secondary,\n                       etc. Sorting has no effect for `count` endpoints.",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"jobDefinitionId",
										"activityId",
										"processDefinitionId",
										"processDefinitionKey",
										"jobType",
										"jobConfiguration",
										"tenantId"
									]
								}
							}
						}
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include job definitions which belong to no tenant. Value may only be `true`, as\n`false` is the default behavior.",
						"type": "boolean"
					},
					"jobConfiguration": {
						"nullable": true,
						"description": "Only include job definitions which exist for the given job configuration. For example: for\ntimer jobs it is the timer configuration.",
						"type": "string"
					},
					"jobType": {
						"nullable": true,
						"description": "Only include job definitions which exist for the given job type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation)\nfor more information about job types.",
						"type": "string"
					},
					"activityIdIn": {
						"nullable": true,
						"description": "Only include job definitions which belong to one of the passed activity ids.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"ProcessInstanceWithVariablesDto": {"allOf": [
				{
					"type": "object",
					"properties": {"variables": {
						"nullable": true,
						"description": "The id of the process instance.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					}}
				},
				{"$ref": "#/components/schemas/ProcessInstanceDto"}
			]},
			"ActivityInstanceIncidentDto": {
				"description": "An activity instance, incident pair.",
				"type": "object",
				"properties": {
					"activityId": {
						"nullable": true,
						"description": "The activity id in which the incident happened.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the incident.",
						"type": "string"
					}
				}
			},
			"TaskCountByCandidateGroupResultDto": {
				"type": "object",
				"properties": {
					"taskCount": {
						"nullable": true,
						"format": "int32",
						"description": "The number of tasks which have the group name as candidate group.",
						"type": "integer"
					},
					"groupName": {
						"nullable": true,
						"description": "The name of the candidate group. If there are tasks without a group name, the value will be `null`",
						"type": "string"
					}
				}
			},
			"CalledProcessDefinitionDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"callingProcessDefinitionId": {
							"nullable": true,
							"description": "The id of the calling process definition",
							"type": "string"
						},
						"calledFromActivityIds": {
							"nullable": true,
							"description": "Ids of the CallActivities which call this process.",
							"type": "array",
							"items": {"type": "string"}
						}
					}
				},
				{"$ref": "#/components/schemas/ProcessDefinitionDto"}
			]},
			"UserDto": {
				"type": "object",
				"properties": {
					"credentials": {"$ref": "#/components/schemas/UserCredentialsDto"},
					"profile": {"$ref": "#/components/schemas/UserProfileDto"}
				}
			},
			"ModificationDto": {
				"type": "object",
				"properties": {
					"annotation": {
						"nullable": true,
						"description": "An arbitrary text annotation set by a user for auditing reasons.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition for the modification",
						"type": "string"
					},
					"instructions": {
						"nullable": true,
						"description": "An array of modification instructions. The instructions are executed in the order they are in. ",
						"type": "array",
						"items": {"$ref": "#/components/schemas/MultipleProcessInstanceModificationInstructionDto"}
					},
					"skipIoMappings": {
						"nullable": true,
						"description": "Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#input-output-variable-mapping) for\nactivities that are started or ended as part of this request.",
						"type": "boolean"
					},
					"processInstanceQuery": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
					"skipCustomListeners": {
						"nullable": true,
						"description": "Skip execution listener invocation for activities that are started or ended as part\nof this request.",
						"type": "boolean"
					},
					"processInstanceIds": {
						"nullable": true,
						"description": "A list of process instance ids to modify.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"VariableInstanceQueryDto": {
				"description": "A variable instance query which defines a list of variable instances",
				"type": "object",
				"properties": {
					"variableName": {
						"nullable": true,
						"description": "Filter by variable instance name.",
						"type": "string"
					},
					"variableNamesIgnoreCase": {
						"nullable": true,
						"description": "Match all variable names provided in `variableValues` case-insensitively. If set to `true`\n**variableName** and **variablename** are treated as equal.",
						"type": "boolean"
					},
					"executionIdIn": {
						"nullable": true,
						"description": "Only include variable instances which belong to one of the passed \nexecution ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"caseInstanceIdIn": {
						"nullable": true,
						"description": "Only include variable instances which belong to one of the passed  case instance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"processInstanceIdIn": {
						"nullable": true,
						"description": "Only include variable instances which belong to one of the passed \nprocess instance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"taskIdIn": {
						"nullable": true,
						"description": "Only include variable instances which belong to one of the passed  task\nids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"variableValues": {
						"nullable": true,
						"description": "An array to only include variable instances that have the certain values.\nThe array consists of objects with the three properties `name`, `operator` and `value`. `name (String)` is the\nvariable name, `operator (String)` is the comparison operator to be used and `value` the variable value.\n`value` may be `String`, `Number` or `Boolean`.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater\nthan or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`",
						"type": "array",
						"items": {"$ref": "#/components/schemas/VariableQueryParameterDto"}
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Only include variable instances which belong to one of the passed \ntenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"activityInstanceIdIn": {
						"nullable": true,
						"description": "Only include variable instances which belong to one of the passed \nactivity instance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sorting": {
						"nullable": true,
						"description": "An array of criteria to sort the result by. Each element of the array is an object that specifies one ordering.\n                      The position in the array identifies the rank of an ordering, i.e., whether it is primary, secondary, etc.\n                      Sorting has no effect for `count` endpoints",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"variableName",
										"variableType",
										"activityInstanceId",
										"tenantId"
									]
								}
							}
						}
					},
					"variableValuesIgnoreCase": {
						"nullable": true,
						"description": "Match all variable values provided in `variableValues` case-insensitively. If set to\n`true` **variableValue** and **variablevalue** are treated as equal.",
						"type": "boolean"
					},
					"batchIdIn": {
						"nullable": true,
						"description": "Only include variable instances which belong to one of the passed \nbatch ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"variableNameLike": {
						"nullable": true,
						"description": "Filter by the variable instance name. The parameter can include the wildcard `%` to\nexpress like-strategy such as: starts with (`%`name), ends with (name`%`) or\ncontains (`%`name`%`).",
						"type": "string"
					},
					"variableScopeIdIn": {
						"nullable": true,
						"description": "Only include variable instances which belong to one of passed scope ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"caseExecutionIdIn": {
						"nullable": true,
						"description": "Only include variable instances which belong to one of the passed  case execution ids.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"DecisionDefinitionDto": {
				"type": "object",
				"properties": {
					"resource": {
						"nullable": true,
						"description": "The file name of the decision definition.",
						"type": "string"
					},
					"decisionRequirementsDefinitionId": {
						"nullable": true,
						"description": "The id of the decision requirements definition this decision definition belongs to.",
						"type": "string"
					},
					"deploymentId": {
						"nullable": true,
						"description": "The deployment id of the decision definition.",
						"type": "string"
					},
					"name": {
						"nullable": true,
						"description": "The name of the decision definition.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the decision definition.",
						"type": "string"
					},
					"historyTimeToLive": {
						"nullable": true,
						"format": "int32",
						"description": "History time to live value of the decision definition.\nIs used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).",
						"type": "integer",
						"minimum": 0
					},
					"versionTag": {
						"nullable": true,
						"description": "The version tag of the decision definition.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the decision definition",
						"type": "string"
					},
					"category": {
						"nullable": true,
						"description": "The category of the decision definition.",
						"type": "string"
					},
					"version": {
						"nullable": true,
						"format": "int32",
						"description": "The version of the decision definition that the engine assigned to it.",
						"type": "integer"
					},
					"key": {
						"nullable": true,
						"description": "The key of the decision definition, i.e., the id of the DMN 1.0 XML decision definition.",
						"type": "string"
					},
					"decisionRequirementsDefinitionKey": {
						"nullable": true,
						"description": "The key of the decision requirements definition this decision definition belongs to.",
						"type": "string"
					}
				}
			},
			"HistoricDecisionInstanceQueryDto": {
				"description": "A historic decision instance query which defines a list of historic decision instances",
				"type": "object",
				"properties": {
					"decisionInstanceIdIn": {
						"nullable": true,
						"description": "Filter by decision instance ids. Must be a comma-separated list of decision instance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"decisionDefinitionKeyIn": {
						"nullable": true,
						"description": "Filter by the keys of the decision definition the instances belongs to. Must be a comma-\nseparated list of decision definition keys.",
						"type": "array",
						"items": {"type": "string"}
					},
					"evaluatedAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that were evaluated after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-\ndd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"caseDefinitionKey": {
						"nullable": true,
						"description": "Filter by the key of the case definition the instances belongs to.",
						"type": "string"
					},
					"decisionDefinitionKey": {
						"nullable": true,
						"description": "Filter by the key of the decision definition the instances belongs to.",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Filter by the key of the process definition the instances belongs to.",
						"type": "string"
					},
					"disableCustomObjectDeserialization": {
						"nullable": true,
						"description": "Disables deserialization of input and output values that are custom objects.\nValue may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"includeInputs": {
						"nullable": true,
						"description": "Include input values in the result.\nValue may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"disableBinaryFetching": {
						"nullable": true,
						"description": "Disables fetching of byte array input and output values.\nValue may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"decisionDefinitionId": {
						"nullable": true,
						"description": "Filter by the decision definition the instances belongs to.",
						"type": "string"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Filter by a comma-separated list of tenant ids. A historic decision instance must have one\nof the given tenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"decisionDefinitionName": {
						"nullable": true,
						"description": "Filter by the name of the decision definition the instances belongs to.",
						"type": "string"
					},
					"rootDecisionInstancesOnly": {
						"nullable": true,
						"description": "Restrict to instances those are the root decision instance of an evaluation.\nValue may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"activityIdIn": {
						"nullable": true,
						"description": "Filter by the activity ids the instances belongs to.\nMust be a comma-separated list of acitvity ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"decisionRequirementsDefinitionKey": {
						"nullable": true,
						"description": "Filter by the key of the decision requirements definition the instances belongs to.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by the process definition the instances belongs to.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "Filter by the process instance the instances belongs to.",
						"type": "string"
					},
					"rootDecisionInstanceId": {
						"nullable": true,
						"description": "Restrict to instances that have a given root decision instance id.\nThis also includes the decision instance with the given id.",
						"type": "string"
					},
					"decisionInstanceId": {
						"nullable": true,
						"description": "Filter by decision instance id.",
						"type": "string"
					},
					"decisionDefinitionIdIn": {
						"nullable": true,
						"description": "Filter by the decision definitions the instances belongs to. Must be a\ncomma-separated list of decision definition ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"caseDefinitionId": {
						"nullable": true,
						"description": "Filter by the case definition the instances belongs to.",
						"type": "string"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "Filter by the case instance the instances belongs to.",
						"type": "string"
					},
					"evaluatedBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that were evaluated before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-\ndd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"includeOutputs": {
						"nullable": true,
						"description": "Include output values in the result.\nValue may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"decisionDefinitionNameLike": {
						"nullable": true,
						"description": "Filter by the name of the decision definition the instances belongs to, that the parameter\nis a substring of.",
						"type": "string"
					},
					"userId": {
						"nullable": true,
						"description": "Restrict to instances that were evaluated by the given user.",
						"type": "string"
					},
					"decisionRequirementsDefinitionId": {
						"nullable": true,
						"description": "Filter by the decision requirements definition the instances belongs to.",
						"type": "string"
					},
					"activityInstanceIdIn": {
						"nullable": true,
						"description": "Filter by the activity instance ids the instances belongs to.\nMust be a comma-separated list of acitvity instance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include historic decision instances that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior.",
						"type": "boolean"
					}
				}
			},
			"FormDto": {
				"title": "FormDto",
				"type": "object",
				"properties": {
					"contextPath": {
						"nullable": true,
						"description": "The context path of the process application. If the task (or the process definition) does not\nbelong to a process application deployment or a process definition at all, this\nproperty is not set.",
						"type": "string"
					},
					"camundaFormRef": {"$ref": "#/components/schemas/CamundaFormRef"},
					"key": {
						"nullable": true,
						"description": "The form key.",
						"type": "string"
					}
				}
			},
			"BatchStatisticsDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"remainingJobs": {
							"nullable": true,
							"format": "int32",
							"description": "The number of remaining batch execution jobs. This does include failed batch execution jobs and\nbatch execution jobs which still have to be created by the seed job.",
							"type": "integer"
						},
						"failedJobs": {
							"nullable": true,
							"format": "int32",
							"description": "The number of failed batch execution jobs. This does not include aborted or deleted batch execution jobs.",
							"type": "integer"
						},
						"completedJobs": {
							"nullable": true,
							"format": "int32",
							"description": "The number of completed batch execution jobs. This does include aborted/deleted batch execution jobs.",
							"type": "integer"
						}
					}
				},
				{"$ref": "#/components/schemas/BatchDto"}
			]},
			"MetricsResultDto": {
				"type": "object",
				"properties": {"result": {
					"nullable": true,
					"format": "int64",
					"description": "The current sum (count) for the selected metric.",
					"type": "integer"
				}}
			},
			"JobDto": {
				"type": "object",
				"properties": {
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance which execution created the job.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition which this job belongs to.",
						"type": "string"
					},
					"jobDefinitionId": {
						"nullable": true,
						"description": "The id of the associated job definition.",
						"type": "string"
					},
					"dueDate": {
						"nullable": true,
						"format": "date-time",
						"description": "The date on which this job is supposed to be processed.",
						"type": "string"
					},
					"priority": {
						"nullable": true,
						"format": "int64",
						"description": "The job's priority for execution.",
						"type": "integer"
					},
					"suspended": {
						"nullable": true,
						"description": "A flag indicating whether the job is suspended or not.",
						"type": "boolean"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition which this job belongs to.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "The specific execution id on which the job was created.",
						"type": "string"
					},
					"retries": {
						"nullable": true,
						"format": "int32",
						"description": "The number of retries this job has left.",
						"type": "integer"
					},
					"createTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The date on which this job has been created.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant which this job belongs to.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the job.",
						"type": "string"
					},
					"exceptionMessage": {
						"nullable": true,
						"description": "The message of the exception that occurred, the last time the job was executed. Is\nnull when no exception occurred.",
						"type": "string"
					},
					"failedActivityId": {
						"nullable": true,
						"description": "The id of the activity on which the last exception occurred, the last time the job\nwas executed. Is null when no exception occurred.",
						"type": "string"
					}
				}
			},
			"JobDefinitionSuspensionStateDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"executionDate": {
							"nullable": true,
							"description": "The date on which the referenced job definitions will be activated or suspended. If null,\nthe suspension state of the given job definitions is updated\nimmediately. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-\ndd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
							"type": "string"
						},
						"includeJobs": {
							"nullable": true,
							"description": "A `Boolean` value which indicates whether to activate or suspend also all jobs of\nthe referenced job definitions. When the value is set to `true`, all jobs\nof the provided job definitions will be activated or suspended and\nwhen the value is set to `false`, the suspension state of all jobs\nof the provided job definitions will not be updated.",
							"type": "boolean"
						}
					}
				},
				{"$ref": "#/components/schemas/SuspensionStateDto"}
			]},
			"TelemetryProductDto": {
				"type": "object",
				"properties": {
					"name": {
						"nullable": true,
						"description": "The name of the product (i.e., Camunda BPM Runtime).",
						"type": "string"
					},
					"edition": {
						"nullable": true,
						"description": "The edition of the product (i.e., either community or enterprise).",
						"type": "string"
					},
					"version": {
						"nullable": true,
						"description": "The version of the process engine (i.e., 7.X.Y).",
						"type": "string"
					},
					"internals": {"$ref": "#/components/schemas/TelemetryInternalsDto"}
				}
			},
			"ProcessInstanceModificationInstructionDto": {
				"type": "object",
				"required": ["type"],
				"properties": {
					"activityId": {
						"nullable": true,
						"description": "Can be used with instructions of types `startTransition`. Specifies the sequence flow to start.",
						"type": "string"
					},
					"variables": {"$ref": "#/components/schemas/TriggerVariableValueDto"},
					"transitionId": {
						"nullable": true,
						"description": "Can be used with instructions of types `startTransition`. Specifies the sequence flow to start.",
						"type": "string"
					},
					"ancestorActivityInstanceId": {
						"nullable": true,
						"description": "Can be used with instructions of type `startBeforeActivity`, `startAfterActivity`, and `startTransition`.\nValid values are the activity instance IDs supplied by the Get Activity Instance request.\nIf there are multiple parent activity instances of the targeted activity,\nthis specifies the ancestor scope in which hierarchy the activity/transition is to be instantiated.\n\nExample: When there are two instances of a subprocess and an activity contained in the subprocess is to be started,\nthis parameter allows to specifiy under which subprocess instance the activity should be started.",
						"type": "string"
					},
					"transitionInstanceId": {
						"nullable": true,
						"description": "Can be used with instructions of type `cancel`. Specifies the transition instance to cancel.\nValid values are the transition instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.19/reference/rest/process-instance/get-activity-instances/).",
						"type": "string"
					},
					"activityInstanceId": {
						"nullable": true,
						"description": "Can be used with instructions of type `cancel`. Specifies the activity instance to cancel.\nValid values are the activity instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.19/reference/rest/process-instance/get-activity-instances/).",
						"type": "string"
					},
					"type": {
						"description": "**Mandatory**. One of the following values: `cancel`, `startBeforeActivity`, `startAfterActivity`, `startTransition`.\n\n* A cancel instruction requests cancellation of a single activity instance or all instances of one activity.\n* A startBeforeActivity instruction requests to enter a given activity.\n* A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity.\n* A startTransition instruction requests to execute a specific sequence flow.",
						"type": "string",
						"enum": [
							"cancel",
							"startBeforeActivity",
							"startAfterActivity",
							"startTransition"
						]
					},
					"cancelCurrentActiveActivityInstances": {
						"nullable": true,
						"description": "Can be used with instructions of type cancel. Prevents the deletion of new created activity instances.",
						"type": "boolean"
					}
				}
			},
			"IdentityServiceUserDto": {
				"type": "object",
				"properties": {
					"firstName": {
						"nullable": true,
						"description": "The firstname of the user.",
						"type": "string"
					},
					"lastName": {
						"nullable": true,
						"description": "The lastname of the user.",
						"type": "string"
					},
					"displayName": {
						"nullable": true,
						"description": "The displayName is generated from the id or firstName and lastName if available.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the user.",
						"type": "string"
					}
				}
			},
			"CaseDefinitionDto": {
				"type": "object",
				"properties": {
					"resource": {
						"nullable": true,
						"description": "The file name of the case definition.",
						"type": "string"
					},
					"deploymentId": {
						"nullable": true,
						"description": "The deployment id of the case definition.",
						"type": "string"
					},
					"name": {
						"nullable": true,
						"description": "The name of the case definition.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the case definition.",
						"type": "string"
					},
					"historyTimeToLive": {
						"nullable": true,
						"format": "int32",
						"description": "History time to live value of the case definition.\nIs used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).",
						"type": "integer",
						"minimum": 0
					},
					"id": {
						"nullable": true,
						"description": "The id of the case definition",
						"type": "string"
					},
					"category": {
						"nullable": true,
						"description": "The category of the case definition.",
						"type": "string"
					},
					"version": {
						"nullable": true,
						"format": "int32",
						"description": "The version of the case definition that the engine assigned to it.",
						"type": "integer"
					},
					"key": {
						"nullable": true,
						"description": "The key of the case definition, i.e., the id of the CMMN 2.0 XML case definition.",
						"type": "string"
					}
				}
			},
			"SignalDto": {
				"type": "object",
				"properties": {
					"executionId": {
						"nullable": true,
						"description": "Optionally specifies a single execution which is notified by the signal.\n\n**Note**: If no execution id is defined the signal is broadcasted to all subscribed\nhandlers. ",
						"type": "string"
					},
					"variables": {
						"nullable": true,
						"description": "A JSON object containing variable key-value pairs. Each key is a variable name and\neach value a JSON variable value object.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"name": {
						"description": "The name of the signal to deliver.\n\n**Note**: This property is mandatory.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "Specifies a tenant to deliver the signal. The signal can only be received on\nexecutions or process definitions which belongs to the given tenant.\n\n**Note**: Cannot be used in combination with executionId.",
						"type": "string"
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "If true the signal can only be received on executions or process definitions which\nbelongs to no tenant. Value may not be false as this is the default behavior.\n\n**Note**: Cannot be used in combination with `executionId`.",
						"type": "boolean"
					}
				}
			},
			"TelemetryCountDto": {
				"type": "object",
				"properties": {"count": {
					"nullable": true,
					"format": "int64",
					"description": "An integer value representing the count for this metric.",
					"type": "integer"
				}}
			},
			"CleanableHistoricProcessInstanceReportResultDto": {
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition.",
						"type": "string"
					},
					"cleanableProcessInstanceCount": {
						"nullable": true,
						"format": "int64",
						"description": "The count of the cleanable historic process instances, referring to history time to\nlive.",
						"type": "integer"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the process definition.",
						"type": "string"
					},
					"historyTimeToLive": {
						"nullable": true,
						"format": "int32",
						"description": "The history time to live of the process definition.",
						"type": "integer"
					},
					"finishedProcessInstanceCount": {
						"nullable": true,
						"format": "int64",
						"description": "The count of the finished historic process instances.",
						"type": "integer"
					},
					"processDefinitionName": {
						"nullable": true,
						"description": "The name of the process definition.",
						"type": "string"
					},
					"processDefinitionVersion": {
						"nullable": true,
						"format": "int32",
						"description": "The version of the process definition.",
						"type": "integer"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition.",
						"type": "string"
					}
				}
			},
			"JobConditionQueryParameterDto": {
				"type": "object",
				"properties": {
					"value": {
						"nullable": true,
						"format": "date-time",
						"description": "Date value to compare with.",
						"type": "string"
					},
					"operator": {
						"nullable": true,
						"description": "Comparison operator to be used.",
						"type": "string",
						"enum": [
							"gt",
							"lt"
						]
					}
				}
			},
			"AuthorizationCheckResultDto": {
				"type": "object",
				"properties": {
					"resourceId": {
						"nullable": true,
						"description": "The id of the resource for which the permission check was performed.",
						"type": "string"
					},
					"authorized": {
						"nullable": true,
						"description": "Returns true or false depending on whether the user is authorized or not.",
						"type": "boolean"
					},
					"resourceName": {
						"nullable": true,
						"description": "The name of the resource for which the permission check was performed.",
						"type": "string"
					},
					"permissionName": {
						"nullable": true,
						"description": "Name of the permission which was checked.",
						"type": "string"
					}
				}
			},
			"EvaluateDecisionDto": {
				"type": "object",
				"properties": {"variables": {
					"nullable": true,
					"description": "",
					"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
					"type": "object"
				}}
			},
			"IdentityServiceGroupDto": {
				"type": "object",
				"properties": {
					"name": {
						"nullable": true,
						"description": "The name of the group.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the group.",
						"type": "string"
					}
				}
			},
			"ExternalTaskFailureDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"retries": {
							"nullable": true,
							"format": "int32",
							"description": "A number of how often the task should be retried. Must be >= 0. If this is 0, an incident is created and\nthe task cannot be fetched anymore unless the retries are increased again. The incident's message is set\nto the `errorMessage` parameter.",
							"type": "integer"
						},
						"variables": {
							"nullable": true,
							"description": "A JSON object containing variable key-value pairs. Each key is a variable name and each value a JSON variable value object with the following properties:",
							"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
							"type": "object"
						},
						"localVariables": {
							"nullable": true,
							"description": "A JSON object containing local variable key-value pairs. Local variables are set only in the scope of external task. Each key is a variable name and each value a JSON variable value object with the following properties:",
							"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
							"type": "object"
						},
						"retryTimeout": {
							"nullable": true,
							"format": "int64",
							"description": "A timeout in milliseconds before the external task becomes available again for fetching. Must be >= 0.",
							"type": "integer"
						},
						"errorMessage": {
							"nullable": true,
							"description": "An message indicating the reason of the failure.",
							"type": "string"
						},
						"errorDetails": {
							"nullable": true,
							"description": "A detailed error description.",
							"type": "string"
						}
					}
				},
				{"$ref": "#/components/schemas/HandleExternalTaskDto"}
			]},
			"DeleteHistoricProcessInstancesDto": {
				"type": "object",
				"properties": {
					"historicProcessInstanceIds": {
						"nullable": true,
						"description": "A list historic process instance ids to delete.",
						"type": "array",
						"items": {"type": "string"}
					},
					"historicProcessInstanceQuery": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"},
					"deleteReason": {
						"nullable": true,
						"description": "A string with delete reason.",
						"type": "string"
					},
					"failIfNotExists": {
						"nullable": true,
						"description": "If set to `false`, the request will still be successful if one ore more of the process ids are not found.",
						"type": "boolean"
					}
				}
			},
			"RestartProcessInstanceDto": {
				"type": "object",
				"properties": {
					"instructions": {
						"nullable": true,
						"description": "**Optional**. A JSON array of instructions that specify which activities to start the process instance at.\nIf this property is omitted, the process instance starts at its default blank start event.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/RestartProcessInstanceModificationInstructionDto"}
					},
					"withoutBusinessKey": {
						"nullable": true,
						"description": "Do not take over the business key of the historic process instance.",
						"type": "boolean"
					},
					"skipIoMappings": {
						"nullable": true,
						"description": "Skip execution of\n[input/output variable mappings](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#input-output-variable-mapping)\nfor activities that are started as part of this request.",
						"type": "boolean"
					},
					"initialVariables": {
						"nullable": true,
						"description": "Set the initial set of variables during restart. By default, the last set of variables is used.",
						"type": "boolean"
					},
					"historicProcessInstanceQuery": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"},
					"processInstanceIds": {
						"nullable": true,
						"description": "A list of process instance ids to restart.",
						"type": "array",
						"items": {"type": "string"}
					},
					"skipCustomListeners": {
						"nullable": true,
						"description": "Skip execution listener invocation for activities that are started as part of this request.",
						"type": "boolean"
					}
				}
			},
			"ProcessInstanceDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"caseInstanceId": {
							"nullable": true,
							"description": "The id of the case instance associated with the process instance.",
							"type": "string"
						},
						"businessKey": {
							"nullable": true,
							"description": "The business key of the process instance.",
							"type": "string"
						},
						"ended": {
							"nullable": true,
							"deprecated": true,
							"description": "A flag indicating whether the process instance has ended or not. Deprecated: will always be false!",
							"type": "boolean"
						},
						"tenantId": {
							"nullable": true,
							"description": "The tenant id of the process instance.",
							"type": "string"
						},
						"id": {
							"nullable": true,
							"description": "The id of the process instance.",
							"type": "string"
						},
						"suspended": {
							"nullable": true,
							"description": "A flag indicating whether the process instance is suspended or not.",
							"type": "boolean"
						},
						"definitionId": {
							"nullable": true,
							"description": "The id of the process definition that this process instance belongs to.",
							"type": "string"
						}
					}
				},
				{"$ref": "#/components/schemas/LinkableDto"}
			]},
			"ProcessDefinitionSuspensionStateDto": {
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definitions to activate or suspend.",
						"type": "string"
					},
					"executionDate": {
						"nullable": true,
						"format": "date-time",
						"description": "The date on which all process definitions with the given key will be activated or suspended.\nIf `null`, the suspension state of all process definitions with the given key is updated immediately.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"includeProcessInstances": {
						"nullable": true,
						"description": "A `Boolean` value which indicates whether to activate or suspend also all process instances of \nthe process definitions with the given key.\nWhen the value is set to `true`, all process instances of the process definitions with the given key\nwill be activated or suspended and when the value is set to `false`, the suspension state of \nall process instances of the process definitions with the given key will not be updated.",
						"type": "boolean"
					},
					"suspended": {
						"nullable": true,
						"description": "A `Boolean` value which indicates whether to activate or suspend all process definitions with the given key.\nWhen the value is set to `true`, all process definitions with the given key will be suspended and\nwhen the value is set to `false`, all process definitions with the given key will be activated.",
						"type": "boolean"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definitions to activate or suspend.",
						"type": "string"
					}
				}
			},
			"IncidentDto": {
				"type": "object",
				"properties": {
					"annotation": {
						"nullable": true,
						"description": "The annotation set to the incident.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition this incident is associated with.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance this incident is associated with.",
						"type": "string"
					},
					"jobDefinitionId": {
						"nullable": true,
						"description": "The job definition id the incident is associated with.",
						"type": "string"
					},
					"incidentMessage": {
						"nullable": true,
						"description": "The message of this incident.",
						"type": "string"
					},
					"configuration": {
						"nullable": true,
						"description": "The payload of this incident.",
						"type": "string"
					},
					"causeIncidentId": {
						"nullable": true,
						"description": "The id of the associated cause incident which has been triggered.",
						"type": "string"
					},
					"incidentType": {
						"nullable": true,
						"description": "The type of incident, for example: `failedJobs` will be returned in case of an incident which identified\na failed job during the execution of a process instance. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types) for a list of incident types.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "The id of the execution this incident is associated with.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "The id of the activity this incident is associated with.",
						"type": "string"
					},
					"incidentTimestamp": {
						"nullable": true,
						"format": "date-time",
						"description": "The time this incident happened. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"rootCauseIncidentId": {
						"nullable": true,
						"description": "The id of the associated root cause incident which has been triggered.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant this incident is associated with.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the incident.",
						"type": "string"
					},
					"failedActivityId": {
						"nullable": true,
						"description": "The id of the activity on which the last exception occurred.",
						"type": "string"
					}
				}
			},
			"MetricsIntervalResultDto": {
				"type": "object",
				"properties": {
					"name": {
						"nullable": true,
						"description": "The name of the metric.",
						"type": "string"
					},
					"reporter": {
						"nullable": true,
						"description": "The reporter of the metric. `null` if the metrics are aggregated by reporter.",
						"type": "string"
					},
					"value": {
						"nullable": true,
						"format": "int64",
						"description": "The value of the metric aggregated by the interval.",
						"type": "integer"
					},
					"timestamp": {
						"nullable": true,
						"format": "date-time",
						"description": "The interval timestamp.",
						"type": "string"
					}
				}
			},
			"MultiFormDeploymentDto": {
				"type": "object",
				"properties": {
					"deployment-name": {
						"nullable": true,
						"description": "The name for the deployment to be created.",
						"type": "string"
					},
					"deployment-source": {
						"nullable": true,
						"description": "The source for the deployment to be created.",
						"type": "string"
					},
					"deploy-changed-only": {
						"default": false,
						"nullable": true,
						"description": "A flag indicating whether the process engine should perform duplicate checking on a per-resource basis.\nIf set to true, only those resources that have actually changed are deployed.\nChecks are made against resources included previous deployments of the same name and only against the latest versions of those resources.\nIf set to true, the option enable-duplicate-filtering is overridden and set to true.",
						"type": "boolean"
					},
					"data": {
						"nullable": true,
						"format": "binary",
						"description": "The binary data to create the deployment resource.\nIt is possible to have more than one form part with different form part names for the binary data to create a deployment.",
						"type": "string"
					},
					"deployment-activation-time": {
						"nullable": true,
						"format": "date-time",
						"description": "Sets the date on which the process definitions contained in this deployment will be activated. This means that all process\ndefinitions will be deployed as usual, but they will be suspended from the start until the given activation date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"tenant-id": {
						"nullable": true,
						"description": "The tenant id for the deployment to be created.",
						"type": "string"
					},
					"enable-duplicate-filtering": {
						"default": false,
						"nullable": true,
						"description": "A flag indicating whether the process engine should perform duplicate checking for the deployment or not.\nThis allows you to check if a deployment with the same name and the same resouces already exists and\nif true, not create a new deployment but instead return the existing deployment. The default value is false.",
						"type": "boolean"
					}
				}
			},
			"MigrationInstructionDto": {
				"type": "object",
				"properties": {
					"targetActivityIds": {
						"nullable": true,
						"description": "The activity ids from the target process definition being mapped.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sourceActivityIds": {
						"nullable": true,
						"description": "The activity ids from the source process definition being mapped.",
						"type": "array",
						"items": {"type": "string"}
					},
					"updateEventTrigger": {
						"nullable": true,
						"description": "Configuration flag whether event triggers defined are going to be updated during migration.",
						"type": "boolean"
					}
				}
			},
			"ProcessDefinitionDto": {
				"type": "object",
				"properties": {
					"resource": {
						"nullable": true,
						"description": "The file name of the process definition.",
						"type": "string"
					},
					"startableInTasklist": {
						"nullable": true,
						"description": "A flag indicating whether the process definition is startable in Tasklist or not.",
						"type": "boolean"
					},
					"description": {
						"nullable": true,
						"description": "The description of the process definition.",
						"type": "string"
					},
					"historyTimeToLive": {
						"nullable": true,
						"format": "int32",
						"description": "History time to live value of the process definition.\nIs used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).",
						"type": "integer",
						"minimum": 0
					},
					"versionTag": {
						"nullable": true,
						"description": "The version tag of the process definition.",
						"type": "string"
					},
					"version": {
						"nullable": true,
						"format": "int32",
						"description": "The version of the process definition that the engine assigned to it.",
						"type": "integer"
					},
					"suspended": {
						"nullable": true,
						"description": "A flag indicating whether the definition is suspended or not.",
						"type": "boolean"
					},
					"diagram": {
						"nullable": true,
						"description": "The file name of the process definition diagram, if it exists.",
						"type": "string"
					},
					"deploymentId": {
						"nullable": true,
						"description": "The deployment id of the process definition.",
						"type": "string"
					},
					"name": {
						"nullable": true,
						"description": "The name of the process definition.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the process definition.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the process definition",
						"type": "string"
					},
					"category": {
						"nullable": true,
						"description": "The category of the process definition.",
						"type": "string"
					},
					"key": {
						"nullable": true,
						"description": "The key of the process definition, i.e., the id of the BPMN 2.0 XML process definition.",
						"type": "string"
					}
				}
			},
			"LockedExternalTaskDto": {
				"title": "LockedExternalTaskDto",
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition the external task is defined in.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance the external task belongs to.",
						"type": "string"
					},
					"workerId": {
						"nullable": true,
						"description": "The id of the worker that posesses or posessed the most recent lock.",
						"type": "string"
					},
					"variables": {
						"nullable": true,
						"description": "A JSON object containing a property for each of the requested variables. The key is the variable name,\nthe value is a JSON object of serialized variable values with the following properties:",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"lockExpirationTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The date that the task's most recent lock expires or has expired.",
						"type": "string"
					},
					"errorMessage": {
						"nullable": true,
						"description": "The full error message submitted with the latest reported failure executing this task;`null` if no failure\nwas reported previously or if no error message was submitted",
						"type": "string"
					},
					"activityInstanceId": {
						"nullable": true,
						"description": "The id of the activity instance that the external task belongs to.",
						"type": "string"
					},
					"priority": {
						"nullable": true,
						"format": "int64",
						"description": "The priority of the external task.",
						"type": "integer"
					},
					"suspended": {
						"nullable": true,
						"description": "Whether the process instance the external task belongs to is suspended.",
						"type": "boolean"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition the external task is defined in.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "The id of the activity that this external task belongs to.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "The id of the execution that the external task belongs to.",
						"type": "string"
					},
					"processDefinitionVersionTag": {
						"nullable": true,
						"description": "The version tag of the process definition the external task is defined in.",
						"type": "string"
					},
					"retries": {
						"nullable": true,
						"format": "int32",
						"description": "The number of retries the task currently has left.",
						"type": "integer"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant the external task belongs to.",
						"type": "string"
					},
					"businessKey": {
						"nullable": true,
						"description": "The business key of the process instance the external task belongs to.",
						"type": "string"
					},
					"topicName": {
						"nullable": true,
						"description": "The topic name of the external task.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the external task.",
						"type": "string"
					},
					"errorDetails": {
						"nullable": true,
						"description": "The error details submitted with the latest reported failure executing this task.`null` if no failure was\nreported previously or if no error details was submitted",
						"type": "string"
					}
				}
			},
			"HistoricDetailDto": {
				"type": "object",
				"properties": {
					"caseDefinitionKey": {
						"nullable": true,
						"description": "The key of the case definition that this historic detail belongs to.",
						"type": "string"
					},
					"activityInstanceId": {
						"nullable": true,
						"description": "The id of the activity instance the historic detail belongs to.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "The type of the historic detail. Either `formField` for a submitted form field\nvalue or `variableUpdate` for variable updates.",
						"type": "string"
					},
					"userOperationId": {
						"nullable": true,
						"description": "The id of user operation which links historic detail with\n[user operation log](https://docs.camunda.org/manual/7.19/reference/rest/history/user-operation-log/)\nentries.",
						"type": "string"
					},
					"fieldValue": {
						"description": "The submitted form field value. The value differs depending on the form field's type\nand on the `deserializeValue` parameter.\n\n**Note:** This property is only set for a `HistoricVariableUpdate` historic details.\nIn these cases, the value of the `type` property is `formField`.",
						"type": "object"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition that this historic detail belongs to.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the historic detail should be removed by the History Cleanup job.\nDefault [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"variableType": {
						"nullable": true,
						"description": "The value type of the variable.\n\n**Note:** This property is only set for a `HistoricVariableUpdate` historic details.\nIn these cases, the value of the `type` property is `variableUpdate`.",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process\ncontaining this historic detail.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the historic detail.",
						"type": "string"
					},
					"value": {
						"description": "The variable's value. Value differs depending on the variable's type\nand on the deserializeValues parameter.\n\n**Note:** This property is only set for a `HistoricVariableUpdate` historic details.\nIn these cases, the value of the `type` property is `variableUpdate`.",
						"type": "object"
					},
					"fieldId": {
						"nullable": true,
						"description": "The id of the form field.\n\n**Note:** This property is only set for a `HistoricVariableUpdate` historic details.\nIn these cases, the value of the `type` property is `formField`.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition that this historic detail belongs to.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance the historic detail belongs to.",
						"type": "string"
					},
					"caseExecutionId": {
						"nullable": true,
						"description": "The id of the case execution the historic detail belongs to.",
						"type": "string"
					},
					"variableName": {
						"nullable": true,
						"description": "The name of the variable which has been updated.\n\n**Note:** This property is only set for a `HistoricVariableUpdate` historic details.\nIn these cases, the value of the `type` property is `variableUpdate`.",
						"type": "string"
					},
					"caseDefinitionId": {
						"nullable": true,
						"description": "The id of the case definition that this historic detail belongs to.",
						"type": "string"
					},
					"initial": {
						"nullable": true,
						"description": "Returns `true` for variable updates that contains the initial values of the variables.\n\n**Note:** This property is only set for a `HistoricVariableUpdate` historic details.\nIn these cases, the value of the `type` property is `variableUpdate`.",
						"type": "boolean"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "The id of the case instance the historic detail belongs to.",
						"type": "string"
					},
					"valueInfo": {
						"description": "A JSON object containing additional, value-type-dependent properties.\nFor variables of type `Object`, the following properties are returned:\n\n* `objectTypeName`: A string representation of the object's type name.\n* `serializationDataFormat`: The serialization format used to store the variable.\n\n**Note:** This property is only set for a `HistoricVariableUpdate` historic details.\nIn these cases, the value of the `type` property is `variableUpdate`.",
						"additionalProperties": true,
						"type": "object"
					},
					"errorMessage": {
						"nullable": true,
						"description": "An error message in case a Java Serialized Object\ncould not be de-serialized.\n\n**Note:** This property is only set for a `HistoricVariableUpdate` historic details.\nIn these cases, the value of the `type` property is `variableUpdate`.",
						"type": "string"
					},
					"variableInstanceId": {
						"nullable": true,
						"description": "The id of the associated variable instance.\n\n**Note:** This property is only set for a `HistoricVariableUpdate` historic details.\nIn these cases, the value of the `type` property is `variableUpdate`.",
						"type": "string"
					},
					"revision": {
						"nullable": true,
						"format": "int32",
						"description": "The revision of the historic variable update.\n\n**Note:** This property is only set for a `HistoricVariableUpdate` historic details.\nIn these cases, the value of the `type` property is `variableUpdate`.",
						"type": "integer"
					},
					"executionId": {
						"nullable": true,
						"description": "The id of the execution the historic detail belongs to.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant that this historic detail belongs to.",
						"type": "string"
					},
					"time": {
						"nullable": true,
						"format": "date-time",
						"description": "The time when this historic detail occurred. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"taskId": {
						"nullable": true,
						"description": "The id of the task the historic detail belongs to.",
						"type": "string"
					}
				}
			},
			"StartProcessInstanceFormDto": {
				"type": "object",
				"properties": {
					"variables": {
						"nullable": true,
						"description": "",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"businessKey": {
						"nullable": true,
						"description": "The business key the process instance is to be initialized with.\nThe business key uniquely identifies the process instance in the context of the given process definition.",
						"type": "string"
					}
				}
			},
			"TelemetryConfigurationDto": {
				"type": "object",
				"properties": {"enableTelemetry": {
					"nullable": true,
					"description": "Specifies if the telemetry data should be sent or not.",
					"type": "boolean"
				}}
			},
			"RedeploymentDto": {
				"description": "A JSON object with the following properties:",
				"title": "RedeploymentDto",
				"type": "object",
				"properties": {
					"resourceNames": {
						"nullable": true,
						"description": "A list of deployment resource names to re-deploy.",
						"type": "array",
						"items": {"type": "string"}
					},
					"source": {
						"nullable": true,
						"description": "Sets the source of the deployment.",
						"type": "string"
					},
					"resourceIds": {
						"nullable": true,
						"description": "A list of deployment resource ids to re-deploy.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"HistoricBatchQueryDto": {
				"description": "Query for the historic batches to set the removal time for.",
				"type": "object",
				"properties": {
					"tenantIdIn": {
						"nullable": true,
						"description": "Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given\ntenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sorting": {
						"nullable": true,
						"description": "An array of criteria to sort the result by. Each element of the array is\n                       an object that specifies one ordering. The position in the array\n                       identifies the rank of an ordering, i.e., whether it is primary, secondary,\n                       etc. Has no effect for the `/count` endpoint",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"batchId",
										"startTime",
										"endTime",
										"tenantId"
									]
								}
							}
						}
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include batches which belong to no tenant. Value can effectively only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"completed": {
						"nullable": true,
						"description": "\nFilter completed or not completed batches. If the value is\n`true`, only completed batches, i.e., end time is set, are\nreturned. Otherwise, if the value is `false`, only running\nbatches, i.e., end time is null, are returned.",
						"type": "boolean"
					},
					"batchId": {
						"nullable": true,
						"description": "Filter by batch id.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "Filter by batch type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/batch/#creating-a-batch)\nfor more information about batch types.",
						"type": "string"
					}
				}
			},
			"TriggerVariableValueDto": {"allOf": [
				{
					"type": "object",
					"properties": {"local": {
						"nullable": true,
						"description": "Indicates whether the variable should be a local variable or not.\nIf set to true, the variable becomes a local variable of the execution\nentering the target activity.",
						"type": "boolean"
					}}
				},
				{"$ref": "#/components/schemas/VariableValueDto"}
			]},
			"TenantDto": {
				"type": "object",
				"properties": {
					"name": {
						"nullable": true,
						"description": "The name of the tenant.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the tenant.",
						"type": "string"
					}
				}
			},
			"BatchDto": {
				"type": "object",
				"properties": {
					"createUserId": {
						"nullable": true,
						"description": "The id of the user that created the batch.",
						"type": "string"
					},
					"invocationsPerBatchJob": {
						"nullable": true,
						"format": "int32",
						"description": "Every batch execution job invokes the command executed by the batch `invocationsPerBatchJob` times.\nE.g., for a process instance migration batch this specifies the number of process instances which are migrated per batch execution job.",
						"type": "integer"
					},
					"totalJobs": {
						"nullable": true,
						"format": "int32",
						"description": "The total jobs of a batch is the number of batch execution jobs required to complete the batch.",
						"type": "integer"
					},
					"batchJobsPerSeed": {
						"nullable": true,
						"format": "int32",
						"description": "The number of batch execution jobs created per seed job invocation.\nThe batch seed job is invoked until it has created all batch execution jobs required by the batch\n(see `totalJobs` property).",
						"type": "integer"
					},
					"seedJobDefinitionId": {
						"nullable": true,
						"description": "The job definition id for the seed jobs of this batch.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "The type of the batch.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/batch/#creating-a-batch)\nfor more information about batch types.",
						"type": "string"
					},
					"suspended": {
						"nullable": true,
						"description": "Indicates whether this batch is suspended or not.",
						"type": "boolean"
					},
					"monitorJobDefinitionId": {
						"nullable": true,
						"description": "The job definition id for the monitor jobs of this batch.",
						"type": "string"
					},
					"jobsCreated": {
						"nullable": true,
						"format": "int32",
						"description": "The number of batch execution jobs already created by the seed job.",
						"type": "integer"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the batch.",
						"type": "string"
					},
					"startTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the batch was started. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further information,\nplease see the [documentation] (https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)",
						"type": "string"
					},
					"executionStartTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the batch execution was started, i.e., at least one batch job has been executed. Default\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further information, please see the [documentation]\n(https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the batch.",
						"type": "string"
					},
					"batchJobDefinitionId": {
						"nullable": true,
						"description": "The job definition id for the batch execution jobs of this batch.",
						"type": "string"
					}
				}
			},
			"DeleteProcessInstancesDto": {
				"type": "object",
				"properties": {
					"processInstanceQuery": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
					"historicProcessInstanceQuery": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"},
					"deleteReason": {
						"nullable": true,
						"description": "A string with delete reason.",
						"type": "string"
					},
					"skipSubprocesses": {
						"nullable": true,
						"description": "Skip deletion of the subprocesses related to deleted processes as part of this request.",
						"type": "boolean"
					},
					"processInstanceIds": {
						"nullable": true,
						"description": "A list process instance ids to delete.",
						"type": "array",
						"items": {"type": "string"}
					},
					"skipCustomListeners": {
						"nullable": true,
						"description": "Skip execution listener invocation for activities that are started or ended as part of this request.",
						"type": "boolean"
					}
				}
			},
			"ProcessInstanceSuspensionStateDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"processDefinitionId": {
							"nullable": true,
							"description": "The process definition id of the process instances to activate or suspend.\n\n**Note**: This parameter can be used only with combination of `suspended`.",
							"type": "string"
						},
						"processDefinitionWithoutTenantId": {
							"nullable": true,
							"description": "Only activate or suspend process instances of a process definition which belongs to no tenant.\nValue may only be true, as false is the default behavior.\n\n**Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionTenantId`.",
							"type": "boolean"
						},
						"processInstanceQuery": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
						"processDefinitionTenantId": {
							"nullable": true,
							"description": "Only activate or suspend process instances of a process definition which belongs to a tenant with the given id.\n\n**Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionWithoutTenantId`.",
							"type": "string"
						},
						"historicProcessInstanceQuery": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"},
						"processInstanceIds": {
							"nullable": true,
							"description": "A list of process instance ids which defines a group of process instances\nwhich will be activated or suspended by the operation.\n\n**Note**: This parameter can be used only with combination of `suspended`, `processInstanceQuery`, and `historicProcessInstanceQuery`.",
							"type": "array",
							"items": {"type": "string"}
						},
						"processDefinitionKey": {
							"nullable": true,
							"description": "The process definition key of the process instances to activate or suspend.\n\n**Note**: This parameter can be used only with combination of `suspended`, `processDefinitionTenantId`, and `processDefinitionWithoutTenantId`.",
							"type": "string"
						}
					}
				},
				{"$ref": "#/components/schemas/SuspensionStateDto"}
			]},
			"HistoricExternalTaskLogDto": {
				"type": "object",
				"properties": {
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance on which the associated external task was created.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition which the associated external task belongs to.",
						"type": "string"
					},
					"workerId": {
						"nullable": true,
						"description": "The id of the worker that posessed the most recent lock.",
						"type": "string"
					},
					"deletionLog": {
						"nullable": true,
						"description": "A flag indicating whether this log represents the deletion of the associated\nexternal task.",
						"type": "boolean"
					},
					"creationLog": {
						"nullable": true,
						"description": "A flag indicating whether this log represents the creation of the associated\nexternal task.",
						"type": "boolean"
					},
					"successLog": {
						"nullable": true,
						"description": "A flag indicating whether this log represents the successful execution of the\nassociated external task.",
						"type": "boolean"
					},
					"errorMessage": {
						"nullable": true,
						"description": "The message of the error that occurred by executing the associated external task.",
						"type": "string"
					},
					"activityInstanceId": {
						"nullable": true,
						"description": "The id of the activity instance on which the associated external task was created.",
						"type": "string"
					},
					"priority": {
						"nullable": true,
						"format": "int64",
						"description": "The execution priority the external task had when the log entry was created.",
						"type": "integer"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition which the associated external task belongs to.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which this log should be removed by the History Cleanup job. Default\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.  For further information, please see the [documentation](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)",
						"type": "string"
					},
					"failureLog": {
						"nullable": true,
						"description": "A flag indicating whether this log represents the failed execution of the\nassociated external task.",
						"type": "boolean"
					},
					"retries": {
						"nullable": true,
						"format": "int32",
						"description": "The number of retries the associated external task has left.",
						"type": "integer"
					},
					"activityId": {
						"nullable": true,
						"description": "The id of the activity on which the associated external task was created.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "The execution id on which the associated external task was created.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant that this historic external task log entry belongs to.",
						"type": "string"
					},
					"topicName": {
						"nullable": true,
						"description": "The topic name of the associated external task.",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process\ncontaining this log.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the log entry.",
						"type": "string"
					},
					"externalTaskId": {
						"nullable": true,
						"description": "The id of the external task.",
						"type": "string"
					},
					"timestamp": {
						"nullable": true,
						"format": "date-time",
						"description": "The time when the log entry has been written.",
						"type": "string"
					}
				}
			},
			"ExecutionTriggerDto": {
				"type": "object",
				"properties": {"variables": {
					"nullable": true,
					"description": "A JSON object containing variable key-value pairs. Each key is a variable name and\neach value a JSON variable value object.",
					"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
					"type": "object"
				}}
			},
			"HistoricBatchDto": {
				"type": "object",
				"properties": {
					"createUserId": {
						"nullable": true,
						"description": "The batch creator's user id.",
						"type": "string"
					},
					"invocationsPerBatchJob": {
						"nullable": true,
						"format": "int32",
						"description": "\nEvery batch execution job invokes the command executed by the batch\n`invocationsPerBatchJob` times. E.g., for a process instance\nmigration batch this specifies the number of process instances\nwhich are migrated per batch execution job.\n",
						"type": "integer"
					},
					"totalJobs": {
						"nullable": true,
						"format": "int32",
						"description": "\nThe total jobs of a batch is the number of batch execution\njobs required to complete the batch.\n",
						"type": "integer"
					},
					"batchJobsPerSeed": {
						"nullable": true,
						"format": "int32",
						"description": "\nThe number of batch execution jobs created per seed job invocation.\nThe batch seed job is invoked until it has created all batch\nexecution jobs required by the batch (see `totalJobs` property).\n",
						"type": "integer"
					},
					"seedJobDefinitionId": {
						"nullable": true,
						"description": "The job definition id for the seed jobs of this batch.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "The type of the batch. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/batch/#creating-a-batch)\nfor more information about batch types.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the historic batch should be removed by the History Cleanup\njob. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.\nFor further information, please see the [documentation](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)",
						"type": "string"
					},
					"monitorJobDefinitionId": {
						"nullable": true,
						"description": "The job definition id for the monitor jobs of this batch.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the batch.",
						"type": "string"
					},
					"startTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the batch was started. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.\nFor further information, please see the [documentation](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)",
						"type": "string"
					},
					"executionStartTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the batch execution was started, i.e., at least one batch job has been executed. Default format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`. For further information, please see the [documentation]\n(https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the batch.",
						"type": "string"
					},
					"endTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the batch ended. Default format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.\nFor further information, please see the [documentation](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)",
						"type": "string"
					},
					"batchJobDefinitionId": {
						"nullable": true,
						"description": "The job definition id for the batch execution jobs of this batch.",
						"type": "string"
					}
				}
			},
			"SetRemovalTimeToHistoricBatchesDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"historicBatchIds": {
							"nullable": true,
							"description": "The ids of the historic batches to set the removal time for.",
							"type": "array",
							"items": {"type": "string"}
						},
						"historicBatchQuery": {
							"nullable": true,
							"description": "Query for the historic batches to set the removal time for.",
							"type": "object"
						}
					}
				},
				{"$ref": "#/components/schemas/AbstractSetRemovalTimeDto"}
			]},
			"HistoricActivityInstanceDto": {
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition that this activity instance belongs to.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance that this activity instance belongs to.",
						"type": "string"
					},
					"durationInMillis": {
						"nullable": true,
						"format": "int64",
						"description": "The time the instance took to finish (in milliseconds).",
						"type": "integer"
					},
					"activityName": {
						"nullable": true,
						"description": "The name of the activity that this object is an instance of.",
						"type": "string"
					},
					"completeScope": {
						"nullable": true,
						"description": "If `true`, this activity instance did complete a BPMN 2.0 scope.",
						"type": "boolean"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition that this activity instance belongs to.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the activity instance should be removed by the History Cleanup job. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "The id of the activity that this object is an instance of.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "The id of the execution that executed this activity instance.",
						"type": "string"
					},
					"canceled": {
						"nullable": true,
						"description": "If `true`, this activity instance is canceled.",
						"type": "boolean"
					},
					"calledCaseInstanceId": {
						"nullable": true,
						"description": "The id of the called case instance. Is only set if the activity is a call activity and the called instance a case instance.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the activity instance.",
						"type": "string"
					},
					"startTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the instance was started. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process containing this activity instance.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the activity instance.",
						"type": "string"
					},
					"assignee": {
						"nullable": true,
						"description": "The assignee of the task that is associated to this activity instance. Is only set if the activity is a user task.",
						"type": "string"
					},
					"endTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the instance ended. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"activityType": {
						"nullable": true,
						"description": "The type of the activity that this object is an instance of.",
						"type": "string"
					},
					"calledProcessInstanceId": {
						"nullable": true,
						"description": "The id of the called process instance. Is only set if the activity is a call activity and the called instance a process instance.",
						"type": "string"
					},
					"taskId": {
						"nullable": true,
						"description": "The id of the task that is associated to this activity instance. Is only set if the activity is a user task.",
						"type": "string"
					},
					"parentActivityInstanceId": {
						"nullable": true,
						"description": "The id of the parent activity instance, for example a sub process instance.",
						"type": "string"
					}
				}
			},
			"HistoricTaskInstanceDto": {
				"type": "object",
				"properties": {
					"parentTaskId": {
						"nullable": true,
						"description": "The id of the parent task, if this task is a subtask.",
						"type": "string"
					},
					"caseDefinitionKey": {
						"nullable": true,
						"description": "The key of the case definition the task belongs to.",
						"type": "string"
					},
					"description": {
						"nullable": true,
						"description": "The task's description.",
						"type": "string"
					},
					"activityInstanceId": {
						"nullable": true,
						"description": "The id of the activity that this object is an instance of.",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition the task belongs to.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the task should be removed by the History Cleanup job. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"duration": {
						"nullable": true,
						"format": "int64",
						"description": "The time the task took to finish (in milliseconds).",
						"type": "integer"
					},
					"followUp": {
						"nullable": true,
						"format": "date-time",
						"description": "The follow-up date for the task. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"startTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the task was started. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process\ncontaining this task.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The task id.",
						"type": "string"
					},
					"owner": {
						"nullable": true,
						"description": "The owner's id.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition the task belongs to.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance the task belongs to.",
						"type": "string"
					},
					"caseExecutionId": {
						"nullable": true,
						"description": "The id of the case execution the task belongs to.",
						"type": "string"
					},
					"caseDefinitionId": {
						"nullable": true,
						"description": "The id of the case definition the task belongs to.",
						"type": "string"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "The id of the case instance the task belongs to.",
						"type": "string"
					},
					"priority": {
						"nullable": true,
						"format": "int32",
						"description": "The task's priority.",
						"type": "integer"
					},
					"deleteReason": {
						"nullable": true,
						"description": "The task's delete reason.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "The id of the execution the task belongs to.",
						"type": "string"
					},
					"taskDefinitionKey": {
						"nullable": true,
						"description": "The task's key.",
						"type": "string"
					},
					"due": {
						"nullable": true,
						"format": "date-time",
						"description": "The task's due date. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"name": {
						"nullable": true,
						"description": "The task name.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the task instance.",
						"type": "string"
					},
					"assignee": {
						"nullable": true,
						"description": "The assignee's id.",
						"type": "string"
					},
					"endTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the task ended. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					}
				}
			},
			"JobQueryDto": {
				"description": "A Job instance query which defines a list of Job instances",
				"type": "object",
				"properties": {
					"withRetriesLeft": {
						"nullable": true,
						"description": "Only select jobs which have retries left. Value may only be `true`, as `false` is the\ndefault behavior.",
						"type": "boolean"
					},
					"dueDates": {
						"nullable": true,
						"description": "Only select jobs where the due date is lower or higher than the given date.\n",
						"type": "array",
						"items": {"$ref": "#/components/schemas/JobConditionQueryParameterDto"}
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Filter by the key of the process definition the jobs run on.",
						"type": "string"
					},
					"jobIds": {
						"nullable": true,
						"description": "Filter by a  list of job ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"activityId": {
						"nullable": true,
						"description": "Only select jobs which exist for an activity with the given id.",
						"type": "string"
					},
					"priorityLowerThanOrEquals": {
						"nullable": true,
						"format": "int64",
						"description": "Only include jobs with a priority lower than or equal to the given value. Value must be a\nvalid `long` value.",
						"type": "integer"
					},
					"withException": {
						"nullable": true,
						"description": "Only select jobs that failed due to an exception. Value may only be `true`, as `false` is\nthe default behavior.",
						"type": "boolean"
					},
					"priorityHigherThanOrEquals": {
						"nullable": true,
						"format": "int64",
						"description": "Only include jobs with a priority higher than or equal to the given value. Value must be a\nvalid `long` value.",
						"type": "integer"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Only include jobs which belong to one of the passed  tenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sorting": {
						"nullable": true,
						"description": "An array of criteria to sort the result by. Each element of the array is\n                       an object that specifies one ordering. The position in the array\n                       identifies the rank of an ordering, i.e., whether it is primary, secondary,\n                       etc. Does not have an effect for the `count` endpoint.",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"jobId",
										"executionId",
										"processInstanceId",
										"processDefinitionId",
										"processDefinitionKey",
										"jobPriority",
										"jobRetries",
										"jobDueDate",
										"tenantId"
									]
								}
							}
						}
					},
					"createTimes": {
						"nullable": true,
						"description": "Only select jobs created before or after the given date.\n",
						"type": "array",
						"items": {"$ref": "#/components/schemas/JobConditionQueryParameterDto"}
					},
					"exceptionMessage": {
						"nullable": true,
						"description": "Only select jobs that failed due to an exception with the given message.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "Only select jobs which exist for the given process instance.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by the id of the process definition the jobs run on.",
						"type": "string"
					},
					"jobDefinitionId": {
						"nullable": true,
						"description": "Only select jobs which exist for the given job definition.",
						"type": "string"
					},
					"timers": {
						"nullable": true,
						"description": "Only select jobs that are timers. Cannot be used together with `messages`. Value may only\nbe `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"active": {
						"nullable": true,
						"description": "Only include active jobs. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"processInstanceIds": {
						"nullable": true,
						"description": "Only select jobs which exist for the given  list of process instance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"executable": {
						"nullable": true,
						"description": "Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due\ndate is in the past. Value may only be `true`, as `false` is the default\nbehavior.",
						"type": "boolean"
					},
					"suspended": {
						"nullable": true,
						"description": "Only include suspended jobs. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"jobId": {
						"nullable": true,
						"description": "Filter by job id.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "Only select jobs which exist for the given execution.",
						"type": "string"
					},
					"includeJobsWithoutTenantId": {
						"nullable": true,
						"description": "Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`.\nValue may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"messages": {
						"nullable": true,
						"description": "Only select jobs that are messages. Cannot be used together with `timers`. Value may only\nbe `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the\ndefault behavior.",
						"type": "boolean"
					},
					"noRetriesLeft": {
						"nullable": true,
						"description": "Only select jobs which have no retries left. Value may only be `true`, as `false` is the\ndefault behavior.",
						"type": "boolean"
					},
					"failedActivityId": {
						"nullable": true,
						"description": "Only select jobs that failed due to an exception at an activity with the given id.",
						"type": "string"
					}
				}
			},
			"CountResultDto": {
				"type": "object",
				"properties": {"count": {
					"format": "int64",
					"description": "The number of matching instances.",
					"type": "integer"
				}}
			},
			"HistoryTimeToLiveDto": {
				"type": "object",
				"properties": {"historyTimeToLive": {
					"nullable": true,
					"format": "int32",
					"description": "New value for historyTimeToLive field of the definition.\nCan be `null`. Can not be negative.",
					"type": "integer",
					"minimum": 0
				}}
			},
			"HistoricTaskInstanceReportResultDto": {
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition.\n\n**Note:** This property is only set for a historic task report object.\nIn these cases, the value of the `reportType` query parameter is `count`.",
						"type": "string"
					},
					"average": {
						"nullable": true,
						"format": "int64",
						"description": "The average duration in milliseconds of all completed process instances which were\nstarted in the given period.\n\n**Note:** This property is only set for a duration report object.\nIn these cases, the value of the `reportType` query parameter is `duration`.",
						"type": "integer"
					},
					"period": {
						"nullable": true,
						"format": "int32",
						"description": "Specifies a span of time within a year.\n**Note:** The period must be interpreted in conjunction with the returned `periodUnit`.\n\n**Note:** This property is only set for a duration report object.\nIn these cases, the value of the `reportType` query parameter is `duration`.",
						"type": "integer"
					},
					"count": {
						"nullable": true,
						"format": "int64",
						"description": "The number of tasks which have the given definition.\n\n**Note:** This property is only set for a historic task report object.\nIn these cases, the value of the `reportType` query parameter is `count`.",
						"type": "integer"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant.",
						"type": "string"
					},
					"maximum": {
						"nullable": true,
						"format": "int64",
						"description": "The greatest duration in milliseconds of all completed process instances which were\nstarted in the given period.\n\n**Note:** This property is only set for a duration report object.\nIn these cases, the value of the `reportType` query parameter is `duration`.",
						"type": "integer"
					},
					"taskName": {
						"nullable": true,
						"description": "The name of the task. It is only available when the `groupBy` parameter is set to `taskName`.\nElse the value is `null`.\n\n**Note:** This property is only set for a historic task report object.\nIn these cases, the value of the `reportType` query parameter is `count`.",
						"type": "string"
					},
					"processDefinitionName": {
						"nullable": true,
						"description": "The name of the process definition.\n\n**Note:** This property is only set for a historic task report object.\nIn these cases, the value of the `reportType` query parameter is `count`.",
						"type": "string"
					},
					"periodUnit": {
						"nullable": true,
						"description": "The unit of the given period. Possible values are `MONTH` and `QUARTER`.\n\n**Note:** This property is only set for a duration report object.\nIn these cases, the value of the `reportType` query parameter is `duration`.",
						"type": "string",
						"enum": [
							"MONTH",
							"QUARTER"
						]
					},
					"minimum": {
						"nullable": true,
						"format": "int64",
						"description": "The smallest duration in milliseconds of all completed process instances which\nwere started in the given period.\n\n**Note:** This property is only set for a duration report object.\nIn these cases, the value of the `reportType` query parameter is `duration`.",
						"type": "integer"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition.\n\n**Note:** This property is only set for a historic task report object.\nIn these cases, the value of the `reportType` query parameter is `count`.",
						"type": "string"
					}
				}
			},
			"MigrationInstructionValidationReportDto": {
				"type": "object",
				"properties": {
					"failures": {
						"nullable": true,
						"description": "A list of instruction validation report messages.",
						"type": "array",
						"items": {"type": "string"}
					},
					"instruction": {"$ref": "#/components/schemas/MigrationInstructionDto"}
				}
			},
			"AnnotationDto": {
				"type": "object",
				"properties": {"annotation": {
					"nullable": true,
					"description": "The annotation value to put.",
					"type": "string"
				}}
			},
			"CleanableHistoricBatchReportResultDto": {
				"type": "object",
				"properties": {
					"historyTimeToLive": {
						"nullable": true,
						"format": "int32",
						"description": "The history time to live of the batch operation.",
						"type": "integer"
					},
					"batchType": {
						"nullable": true,
						"description": "The type of the batch operation.",
						"type": "string"
					},
					"finishedBatchesCount": {
						"nullable": true,
						"format": "int64",
						"description": "The count of the finished batch operations.",
						"type": "integer"
					},
					"cleanableBatchesCount": {
						"nullable": true,
						"format": "int64",
						"description": "The count of the cleanable historic batch operations, referring to history time to\nlive.",
						"type": "integer"
					}
				}
			},
			"TaskEscalationDto": {
				"type": "object",
				"properties": {
					"variables": {
						"nullable": true,
						"description": "A JSON object containing variable key-value pairs.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"escalationCode": {
						"nullable": true,
						"description": "An escalation code that indicates the predefined escalation. It is used to identify\nthe BPMN escalation handler.",
						"type": "string"
					}
				}
			},
			"FilterDto": {
				"type": "object",
				"properties": {
					"owner": {
						"nullable": true,
						"description": "The user id of the owner of the filter.",
						"type": "string"
					},
					"query": {
						"description": "The query of the filter as a JSON object.",
						"type": "object"
					},
					"name": {
						"nullable": true,
						"description": "The name of the filter.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the filter.",
						"type": "string"
					},
					"properties": {
						"description": "The properties of a filter as a JSON object.",
						"type": "object"
					},
					"resourceType": {
						"nullable": true,
						"description": "The resource type of the filter.",
						"type": "string"
					},
					"itemCount": {
						"nullable": true,
						"format": "int64",
						"description": "\nThe number of items matched by the filter itself. Note: Only exists\nif the query parameter\n`itemCount` was set to `true`",
						"type": "integer"
					}
				}
			},
			"AuthenticationResult": {
				"type": "object",
				"properties": {
					"authenticated": {
						"nullable": true,
						"description": "A flag indicating if user is authenticated.",
						"type": "boolean"
					},
					"tenants": {
						"nullable": true,
						"description": "Will be null.",
						"type": "array",
						"items": {"type": "string"}
					},
					"authenticatedUser": {
						"nullable": true,
						"description": "An id of authenticated user.",
						"type": "string"
					},
					"groups": {
						"nullable": true,
						"description": "Will be null.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"SetVariablesAsyncDto": {
				"type": "object",
				"properties": {
					"variables": {
						"nullable": true,
						"description": "A variables the operation will set in the root scope of the process instances.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"processInstanceQuery": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
					"historicProcessInstanceQuery": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"},
					"processInstanceIds": {
						"nullable": true,
						"description": "A list of process instance ids that define a group of process instances\nto which the operation will set variables.\n\nPlease note that if `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery`\nare defined, the resulting operation will be performed on the union of these sets.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"MigrationPlanDto": {
				"type": "object",
				"properties": {
					"targetProcessDefinitionId": {
						"nullable": true,
						"description": "The id of the target process definition for the migration.",
						"type": "string"
					},
					"instructions": {
						"nullable": true,
						"description": "A list of migration instructions which map equal activities. Each\nmigration instruction is a JSON object with the following properties:",
						"type": "array",
						"items": {"$ref": "#/components/schemas/MigrationInstructionDto"}
					},
					"variables": {
						"nullable": true,
						"description": "A map of variables which will be set into the process instances' scope.\nEach key is a variable name and each value a JSON variable value object.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"sourceProcessDefinitionId": {
						"nullable": true,
						"description": "The id of the source process definition for the migration.",
						"type": "string"
					}
				}
			},
			"HistoricProcessInstanceQueryDto": {
				"description": "A historic process instance query which defines a group of historic process instances",
				"type": "object",
				"properties": {
					"variableNamesIgnoreCase": {
						"nullable": true,
						"description": "Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal.",
						"type": "boolean"
					},
					"subCaseInstanceId": {
						"nullable": true,
						"description": "Restrict query to one process instance that has a sub case instance with the given id.",
						"type": "string"
					},
					"incidentType": {
						"nullable": true,
						"description": "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types) for a list of incident types.",
						"type": "string"
					},
					"executedActivityAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that executed an activity after the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"processDefinitionName": {
						"nullable": true,
						"description": "Filter by the name of the process definition the instances run on.",
						"type": "string"
					},
					"executedJobAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that executed an job after the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Filter by the key of the process definition the instances run on.",
						"type": "string"
					},
					"withRootIncidents": {
						"nullable": true,
						"description": "Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"subProcessInstanceId": {
						"nullable": true,
						"description": "Restrict query to one process instance that has a sub process instance with the given id.",
						"type": "string"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of `Strings`",
						"type": "array",
						"items": {"type": "string"}
					},
					"internallyTerminated": {
						"nullable": true,
						"description": "Restrict to instances that are internallyTerminated.",
						"type": "boolean"
					},
					"processInstanceBusinessKey": {
						"nullable": true,
						"description": "Filter by process instance business key.",
						"type": "string"
					},
					"sorting": {
						"nullable": true,
						"description": "Apply sorting of the result",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"instanceId",
										"definitionId",
										"definitionKey",
										"definitionName",
										"definitionVersion",
										"businessKey",
										"startTime",
										"endTime",
										"duration",
										"tenantId"
									]
								}
							}
						}
					},
					"variableValuesIgnoreCase": {
						"nullable": true,
						"description": "Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal.",
						"type": "boolean"
					},
					"processDefinitionKeyNotIn": {
						"nullable": true,
						"description": "Exclude instances that belong to a set of process definitions. Must be a JSON array of `Strings`.",
						"type": "array",
						"items": {"type": "string"}
					},
					"unfinished": {
						"nullable": true,
						"description": "Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"startedAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that were started after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"executedActivityBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that executed an activity before the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"rootProcessInstances": {
						"nullable": true,
						"description": "Restrict the query to all process instances that are top level process instances.",
						"type": "boolean"
					},
					"withIncidents": {
						"nullable": true,
						"description": "Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"incidentStatus": {
						"nullable": true,
						"description": "Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.",
						"type": "string",
						"enum": [
							"open",
							"resolved"
						]
					},
					"superProcessInstanceId": {
						"nullable": true,
						"description": "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "Filter by process instance id.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by the process definition the instances run on.",
						"type": "string"
					},
					"processDefinitionNameLike": {
						"nullable": true,
						"description": "Filter by process definition names that the parameter is a substring of.",
						"type": "string"
					},
					"finishedAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that were finished after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"variables": {
						"nullable": true,
						"description": "A JSON array to only include process instances that have/had variables with certain values.\nThe array consists of objects with the three properties `name`, `operator` and `value`. `name` (`String`) is the variable name,\n`operator` (`String`) is the comparison operator to be used and `value` the variable value.\n\nValue may be `String`, `Number` or `Boolean`.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.\n",
						"type": "array",
						"items": {"$ref": "#/components/schemas/VariableQueryParameterDto"}
					},
					"incidentMessage": {
						"nullable": true,
						"description": "Filter by the incident message. Exact match.",
						"type": "string"
					},
					"activeActivityIdIn": {
						"nullable": true,
						"description": "Restrict to instances that have an active activity with one of given ids. Must be a JSON array of `Strings`",
						"type": "array",
						"items": {"type": "string"}
					},
					"processDefinitionKeyIn": {
						"nullable": true,
						"description": "Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of `Strings`.",
						"type": "array",
						"items": {"type": "string"}
					},
					"startedBy": {
						"nullable": true,
						"description": "Only include process instances that were started by the given user.",
						"type": "string"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.",
						"type": "string"
					},
					"externallyTerminated": {
						"nullable": true,
						"description": "Restrict to instances that are externallyTerminated.",
						"type": "boolean"
					},
					"executedActivityIdIn": {
						"nullable": true,
						"description": "Restrict to instances that executed an activity with one of given ids. Must be a JSON array of `Strings`",
						"type": "array",
						"items": {"type": "string"}
					},
					"active": {
						"nullable": true,
						"description": "Restrict to instances that are active.",
						"type": "boolean"
					},
					"finished": {
						"nullable": true,
						"description": "Only include finished process instances. This flag includes all process instances\nthat are completed or terminated. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"completed": {
						"nullable": true,
						"description": "Restrict to instances that are completed.",
						"type": "boolean"
					},
					"processInstanceBusinessKeyIn": {
						"nullable": true,
						"description": "Filter by a list of business keys. A process instance must have one of the given business keys. Must be a JSON array of `Strings`",
						"type": "array",
						"items": {"type": "string"}
					},
					"superCaseInstanceId": {
						"nullable": true,
						"description": "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.",
						"type": "string"
					},
					"processInstanceIds": {
						"nullable": true,
						"description": "Filter by process instance ids. Must be a JSON array of `Strings`.",
						"type": "array",
						"items": {"type": "string"}
					},
					"suspended": {
						"nullable": true,
						"description": "Restrict to instances that are suspended.",
						"type": "boolean"
					},
					"orQueries": {
						"nullable": true,
						"description": "A JSON array of nested historic process instance queries with OR semantics.\n\nA process instance matches a nested query if it fulfills at least one of the query's predicates.\n\nWith multiple nested queries, a process instance must fulfill at least one predicate of each query\n([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).\n\nAll process instance query properties can be used except for: `sorting`\n\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"}
					},
					"processInstanceBusinessKeyLike": {
						"nullable": true,
						"description": "Filter by process instance business key that the parameter is a substring of.",
						"type": "string"
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"startedBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that were started before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"incidentMessageLike": {
						"nullable": true,
						"description": "Filter by the incident message that the parameter is a substring of.",
						"type": "string"
					},
					"finishedBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that were finished before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"executedJobBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to instances that executed an job before the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					}
				}
			},
			"MessageCorrelationResultWithVariableDto": {
				"description": "The `processInstance` property only has a value if the resultType is set to `ProcessDefinition`.\nThe processInstance with the properties as described in the\n[get single instance](https://docs.camunda.org/manual/7.19/reference/rest/process-instance/get/) method.\n\nThe `execution` property only has a value if the resultType is set to `Execution`.\nThe execution with the properties as described in the\n[get single execution](https://docs.camunda.org/manual/7.19/reference/rest/execution/get/) method.",
				"type": "object",
				"properties": {
					"execution": {"$ref": "#/components/schemas/ExecutionDto"},
					"variables": {
						"nullable": true,
						"description": "This property is returned if the `variablesInResultEnabled` is set to `true`.\nContains a list of the process variables. ",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"processInstance": {"$ref": "#/components/schemas/ProcessInstanceDto"},
					"resultType": {
						"nullable": true,
						"description": "Indicates if the message was correlated to a message start event or an \nintermediate message catching event. In the first case, the resultType is \n`ProcessDefinition` and otherwise `Execution`.",
						"type": "string",
						"enum": [
							"Execution",
							"ProcessDefinition"
						]
					}
				}
			},
			"MissingAuthorizationDto": {
				"type": "object",
				"properties": {
					"resourceId": {
						"nullable": true,
						"description": "The id of the resource that the user is missing permission for.",
						"type": "string"
					},
					"resourceName": {
						"nullable": true,
						"description": "The name of the resource that the user is missing permission for.",
						"type": "string"
					},
					"permissionName": {
						"nullable": true,
						"description": "The permission name that the user is missing.",
						"type": "string"
					}
				}
			},
			"PasswordPolicyDto": {
				"type": "object",
				"properties": {"rules": {
					"nullable": true,
					"description": "An array of password policy rules. Each element of the array is representing one rule of the policy.",
					"type": "array",
					"items": {"$ref": "#/components/schemas/PasswordPolicyRuleDto"}
				}}
			},
			"SetRemovalTimeToHistoricDecisionInstancesDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"historicDecisionInstanceIds": {
							"nullable": true,
							"description": "The ids of the historic decision instances to set the removal time for.",
							"type": "array",
							"items": {"type": "string"}
						},
						"hierarchical": {
							"nullable": true,
							"description": "Sets the removal time to all historic decision instances in the hierarchy.\nValue may only be `true`, as `false` is the default behavior.",
							"type": "boolean"
						},
						"historicDecisionInstanceQuery": {"$ref": "#/components/schemas/HistoricDecisionInstanceQueryDto"}
					}
				},
				{"$ref": "#/components/schemas/AbstractSetRemovalTimeDto"}
			]},
			"HistoricVariableInstanceDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"processDefinitionId": {
							"nullable": true,
							"description": "The id of the process definition the variable instance belongs to.",
							"type": "string"
						},
						"processInstanceId": {
							"nullable": true,
							"description": "The process instance id the variable instance belongs to.",
							"type": "string"
						},
						"caseExecutionId": {
							"nullable": true,
							"description": "The case execution id the variable instance belongs to.",
							"type": "string"
						},
						"caseDefinitionId": {
							"nullable": true,
							"description": "The id of the case definition the variable instance belongs to.",
							"type": "string"
						},
						"caseDefinitionKey": {
							"nullable": true,
							"description": "The key of the case definition the variable instance belongs to.",
							"type": "string"
						},
						"caseInstanceId": {
							"nullable": true,
							"description": "The case instance id the variable instance belongs to.",
							"type": "string"
						},
						"errorMessage": {
							"nullable": true,
							"description": "An error message in case a Java Serialized Object could not be de-serialized.",
							"type": "string"
						},
						"activityInstanceId": {
							"nullable": true,
							"description": "The id of the activity instance in which the variable is valid.",
							"type": "string"
						},
						"processDefinitionKey": {
							"nullable": true,
							"description": "The key of the process definition the variable instance belongs to.",
							"type": "string"
						},
						"removalTime": {
							"nullable": true,
							"format": "date-time",
							"description": "The time after which the variable should be removed by the History Cleanup job.\n[Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
							"type": "string"
						},
						"executionId": {
							"nullable": true,
							"description": "The execution id the variable instance belongs to.",
							"type": "string"
						},
						"createTime": {
							"nullable": true,
							"format": "date-time",
							"description": "The time the variable was inserted. [Default format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
							"type": "string"
						},
						"name": {
							"nullable": true,
							"description": "The name of the variable instance.",
							"type": "string"
						},
						"tenantId": {
							"nullable": true,
							"description": "The id of the tenant that this variable instance belongs to.",
							"type": "string"
						},
						"rootProcessInstanceId": {
							"nullable": true,
							"description": "The process instance id of the root process instance that initiated the process\ncontaining this variable.",
							"type": "string"
						},
						"id": {
							"nullable": true,
							"description": "The id of the variable instance.",
							"type": "string"
						},
						"state": {
							"nullable": true,
							"description": "The current state of the variable. Can be 'CREATED' or 'DELETED'.",
							"type": "string"
						},
						"taskId": {
							"nullable": true,
							"description": "The id of the task the variable instance belongs to.",
							"type": "string"
						}
					}
				},
				{"$ref": "#/components/schemas/VariableValueDto"}
			]},
			"MigrationPlanGenerationDto": {
				"type": "object",
				"properties": {
					"targetProcessDefinitionId": {
						"nullable": true,
						"description": "The id of the target process definition for the migration.",
						"type": "string"
					},
					"updateEventTriggers": {
						"nullable": true,
						"description": "A boolean flag indicating whether instructions between events should be configured\nto update the event triggers.",
						"type": "boolean"
					},
					"variables": {
						"nullable": true,
						"description": "A map of variables which will be set into the process instances' scope.\nEach key is a variable name and each value a JSON variable value object.",
						"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
						"type": "object"
					},
					"sourceProcessDefinitionId": {
						"nullable": true,
						"description": "The id of the source process definition for the migration.",
						"type": "string"
					}
				}
			},
			"ExternalTaskDto": {
				"description": "An External Task object with the following properties",
				"title": "ExternalTaskDto",
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition the external task is defined in.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the process instance the external task belongs to.",
						"type": "string"
					},
					"workerId": {
						"nullable": true,
						"description": "The id of the worker that posesses or posessed the most recent lock.",
						"type": "string"
					},
					"lockExpirationTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The date that the task's most recent lock expires or has expired.",
						"type": "string"
					},
					"errorMessage": {
						"nullable": true,
						"description": "The full error message submitted with the latest reported failure executing this task; `null` if no\nfailure was reported previously or if no error message was submitted",
						"type": "string"
					},
					"activityInstanceId": {
						"nullable": true,
						"description": "The id of the activity instance that the external task belongs to.",
						"type": "string"
					},
					"priority": {
						"nullable": true,
						"format": "int64",
						"description": "The priority of the external task.",
						"type": "integer"
					},
					"suspended": {
						"nullable": true,
						"description": "A flag indicating whether the external task is suspended or not.",
						"type": "boolean"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition the external task is defined in.",
						"type": "string"
					},
					"activityId": {
						"nullable": true,
						"description": "The id of the activity that this external task belongs to.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "The id of the execution that the external task belongs to.",
						"type": "string"
					},
					"processDefinitionVersionTag": {
						"nullable": true,
						"description": "The version tag of the process definition the external task is defined in.",
						"type": "string"
					},
					"retries": {
						"nullable": true,
						"format": "int32",
						"description": "The number of retries the task currently has left.",
						"type": "integer"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant the external task belongs to.",
						"type": "string"
					},
					"businessKey": {
						"nullable": true,
						"description": "The business key of the process instance the external task belongs to.",
						"type": "string"
					},
					"topicName": {
						"nullable": true,
						"description": "The topic name of the external task.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the external task.",
						"type": "string"
					}
				}
			},
			"SetRetriesForExternalTasksDto": {
				"type": "object",
				"properties": {
					"externalTaskQuery": {"$ref": "#/components/schemas/ExternalTaskQueryDto"},
					"retries": {
						"nullable": true,
						"format": "int32",
						"description": "The number of retries to set for the external task.  Must be >= 0. If this is 0, an incident is created\nand the task cannot be fetched anymore unless the retries are increased again. Can not be null.",
						"type": "integer"
					},
					"processInstanceQuery": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
					"historicProcessInstanceQuery": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"},
					"processInstanceIds": {
						"nullable": true,
						"description": "The ids of process instances containing the tasks to set the number of retries for.",
						"type": "array",
						"items": {"type": "string"}
					},
					"externalTaskIds": {
						"nullable": true,
						"description": "The ids of the external tasks to set the number of retries for.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"HistoricVariableInstanceQueryDto": {
				"description": "A Historic Variable Instance instance query which defines a list of Historic Variable Instance instances",
				"type": "object",
				"properties": {
					"processInstanceId": {
						"nullable": true,
						"description": "Filter by the process instance the variable belongs to.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by the process definition the variable belongs to.",
						"type": "string"
					},
					"variableName": {
						"nullable": true,
						"description": "Filter by variable name.",
						"type": "string"
					},
					"variableTypeIn": {
						"nullable": true,
						"description": "Only include historic variable instances which belong to one of the passed and comma-\nseparated variable types. A list of all supported variable types can be found\n[here](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#supported-variable-values).\n**Note:** All non-primitive variables are associated with the type\n'serializable'.",
						"type": "array",
						"items": {"type": "string"}
					},
					"caseActivityIdIn": {
						"nullable": true,
						"description": "Only include historic variable instances which belong to one of the passed and  case activity ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"variableValue": {
						"description": "Filter by variable value. May be `String`, `Number` or `Boolean`.",
						"type": "object"
					},
					"variableNamesIgnoreCase": {
						"nullable": true,
						"description": "Match the variable name provided in `variableName` and `variableNameLike` case-\ninsensitively. If set to `true` **variableName** and **variablename** are\ntreated as equal.",
						"type": "boolean"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "Filter by the case instance the variable belongs to.",
						"type": "string"
					},
					"executionIdIn": {
						"nullable": true,
						"description": "Only include historic variable instances which belong to one of the passed and  execution ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"includeDeleted": {
						"nullable": true,
						"description": "Include variables that has already been deleted during the execution.",
						"type": "boolean"
					},
					"processInstanceIdIn": {
						"nullable": true,
						"description": "Only include historic variable instances which belong to one of the passed  process instance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"variableNameIn": {
						"nullable": true,
						"description": "Only include historic variable instances which belong to one of the passed  variable names.",
						"type": "array",
						"items": {"type": "string"}
					},
					"taskIdIn": {
						"nullable": true,
						"description": "Only include historic variable instances which belong to one of the passed and  task ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Filter by a key of the process definition the variable belongs to.",
						"type": "string"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Only include historic variable instances which belong to one of the passed and comma-\nseparated tenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"activityInstanceIdIn": {
						"nullable": true,
						"description": "Only include historic variable instances which belong to one of the passed and  activity instance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"sorting": {
						"nullable": true,
						"description": "An array of criteria to sort the result by. Each element of the array is\n                     an object that specifies one ordering. The position in the array\n                     identifies the rank of an ordering, i.e., whether it is primary, secondary,\n                     etc. Sorting has no effect for `count` endpoints",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"instanceId",
										"variableName",
										"tenantId"
									]
								}
							}
						}
					},
					"variableValuesIgnoreCase": {
						"nullable": true,
						"description": "Match the variable value provided in `variableValue` case-insensitively. If set to `true`\n**variableValue** and **variablevalue** are treated as equal.",
						"type": "boolean"
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include historic variable instances that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"variableNameLike": {
						"nullable": true,
						"description": "Restrict to variables with a name like the parameter.",
						"type": "string"
					},
					"caseExecutionIdIn": {
						"nullable": true,
						"description": "Only include historic variable instances which belong to one of the passed and  case execution ids.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"SetRemovalTimeToHistoricProcessInstancesDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"historicProcessInstanceIds": {
							"nullable": true,
							"description": "The id of the process instance.",
							"type": "array",
							"items": {"type": "string"}
						},
						"hierarchical": {
							"nullable": true,
							"description": "Sets the removal time to all historic process instances in the hierarchy.\nValue may only be `true`, as `false` is the default behavior.",
							"type": "boolean"
						},
						"historicProcessInstanceQuery": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"}
					}
				},
				{"$ref": "#/components/schemas/AbstractSetRemovalTimeDto"}
			]},
			"VariableQueryParameterDto": {"allOf": [
				{
					"type": "object",
					"properties": {"name": {
						"nullable": true,
						"description": "Variable name",
						"type": "string"
					}}
				},
				{"$ref": "#/components/schemas/ConditionQueryParameterDto"}
			]},
			"VersionDto": {
				"type": "object",
				"properties": {"version": {
					"nullable": true,
					"description": "The version of the Rest API.",
					"type": "string"
				}}
			},
			"HistoricTaskInstanceQueryDto": {
				"description": "A Historic Task instance query which defines a list of Historic Task instances",
				"type": "object",
				"properties": {
					"variableNamesIgnoreCase": {
						"nullable": true,
						"description": "Match the variable name provided in `taskVariables` and `processVariables` case-\ninsensitively. If set to `true` **variableName** and **variablename** are\ntreated as equal.",
						"type": "boolean"
					},
					"caseDefinitionKey": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a case definition with the given key.",
						"type": "string"
					},
					"taskDescription": {
						"nullable": true,
						"description": "Restrict to tasks that have the given description.",
						"type": "string"
					},
					"processDefinitionName": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a process definition with the given name.",
						"type": "string"
					},
					"unassigned": {
						"nullable": true,
						"description": "If set to `true`, restricts the query to all tasks that are unassigned.",
						"type": "boolean"
					},
					"caseDefinitionName": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a case definition with the given name.",
						"type": "string"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Filter by a  list of tenant ids. A task instance must have one of the given\ntenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"taskParentTaskId": {
						"nullable": true,
						"description": "Filter by parent task id.",
						"type": "string"
					},
					"taskFollowUpDateBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"variableValuesIgnoreCase": {
						"nullable": true,
						"description": "Match the variable value provided in `taskVariables` and `processVariables` case-\ninsensitively. If set to `true` **variableValue** and **variablevalue** are\ntreated as equal.",
						"type": "boolean"
					},
					"taskHadCandidateGroup": {
						"nullable": true,
						"description": "Restrict to tasks with a historic identity link to the given candidate group.",
						"type": "string"
					},
					"taskDueDateAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"taskFollowUpDateAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"processInstanceId": {
						"nullable": true,
						"description": "Filter by process instance id.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by process definition id.",
						"type": "string"
					},
					"caseExecutionId": {
						"nullable": true,
						"description": "Filter by the id of the case execution that executed the task.",
						"type": "string"
					},
					"caseDefinitionId": {
						"nullable": true,
						"description": "Filter by case definition id.",
						"type": "string"
					},
					"taskFollowUpDate": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"finished": {
						"nullable": true,
						"description": "Only include finished tasks. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"taskNameLike": {
						"nullable": true,
						"description": "Restrict to tasks that have a name with the given parameter value as substring.",
						"type": "string"
					},
					"taskAssigneeLike": {
						"nullable": true,
						"description": "Restrict to tasks that are assigned to users with the parameter value as a substring.",
						"type": "string"
					},
					"executionId": {
						"nullable": true,
						"description": "Filter by the id of the execution that executed the task.",
						"type": "string"
					},
					"taskDefinitionKey": {
						"nullable": true,
						"description": "Restrict to tasks that have the given key.",
						"type": "string"
					},
					"taskDeleteReasonLike": {
						"nullable": true,
						"description": "Restrict to tasks that have a delete reason that has the parameter value as a substring.",
						"type": "string"
					},
					"taskDueDate": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"orQueries": {
						"nullable": true,
						"description": "A JSON array of nested historic task instance queries with OR semantics.\n\nA task instance matches a nested query if it fulfills at least one of the query's predicates.\n\nWith multiple nested queries, a task instance must fulfill at least one predicate of each query\n([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).\n\nAll task instance query properties can be used except for: `sorting`, `withCandidateGroups`, ` withoutCandidateGroups`.\n\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/HistoricTaskInstanceQueryDto"}
					},
					"processInstanceBusinessKeyLike": {
						"nullable": true,
						"description": "Filter by  process instance business key that has the parameter value as a substring.",
						"type": "string"
					},
					"taskName": {
						"nullable": true,
						"description": "Restrict to tasks that have the given name.",
						"type": "string"
					},
					"taskDefinitionKeyIn": {
						"nullable": true,
						"description": "Restrict to tasks that have one of the passed  task definition keys.",
						"type": "array",
						"items": {"type": "string"}
					},
					"assigned": {
						"nullable": true,
						"description": "If set to `true`, restricts the query to all tasks that are assigned.",
						"type": "boolean"
					},
					"taskDueDateBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"startedBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"finishedBefore": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"taskInvolvedGroup": {
						"nullable": true,
						"description": "Restrict to tasks with a historic identity link to the given group.",
						"type": "string"
					},
					"taskOwner": {
						"nullable": true,
						"description": "Restrict to tasks that the given user owns.",
						"type": "string"
					},
					"withCandidateGroups": {
						"nullable": true,
						"description": "Only include tasks which have a candidate group. Value may only be `true`,\nas `false` is the default behavior.",
						"type": "boolean"
					},
					"withoutCandidateGroups": {
						"nullable": true,
						"description": "Only include tasks which have no candidate group. Value may only be `true`,\nas `false` is the default behavior.",
						"type": "boolean"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Restrict to tasks that belong to a process definition with the given key.",
						"type": "string"
					},
					"processUnfinished": {
						"nullable": true,
						"description": "Only include tasks of unfinished processes. Value may only be `true`, as `false` is the\ndefault behavior.",
						"type": "boolean"
					},
					"taskVariables": {
						"nullable": true,
						"description": "Only include tasks that have variables with certain values. Variable filtering expressions are\ncomma-separated and are structured as follows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n**Note:** Values are always treated as `String` objects on server side.\n\n\nValid operator values are:\n* `eq` - equal to;\n* `neq` - not equal to;\n* `gt` - greater than;\n* `gteq` - greater than or equal to;\n* `lt` - lower than;\n* `lteq` - lower than or equal to;\n* `like`.\n\n`key` and `value` may not contain underscore or comma characters.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/VariableQueryParameterDto"}
					},
					"processInstanceBusinessKey": {
						"nullable": true,
						"description": "Filter by process instance business key.",
						"type": "string"
					},
					"sorting": {
						"nullable": true,
						"description": "An array of criteria to sort the result by. Each element of the array is\n                    an object that specifies one ordering. The position in the array\n                    identifies the rank of an ordering, i.e., whether it is primary, secondary,\n                    etc. Sorting has no effect for `count` endpoints",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"taskId",
										"activityInstanceId",
										"processDefinitionId",
										"processInstanceId",
										"executionId",
										"duration",
										"endTime",
										"startTime",
										"taskName",
										"taskDescription",
										"assignee",
										"owner",
										"dueDate",
										"followUpDate",
										"deleteReason",
										"taskDefinitionKey",
										"priority",
										"caseDefinitionId",
										"caseInstanceId",
										"caseExecutionId",
										"tenantId"
									]
								}
							}
						}
					},
					"unfinished": {
						"nullable": true,
						"description": "Only include unfinished tasks. Value may only be `true`, as `false` is the default\nbehavior.",
						"type": "boolean"
					},
					"startedAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"finishedAfter": {
						"nullable": true,
						"format": "date-time",
						"description": "Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`.",
						"type": "string"
					},
					"taskInvolvedUser": {
						"nullable": true,
						"description": "Restrict to tasks with a historic identity link to the given user.",
						"type": "string"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "Filter by case instance id.",
						"type": "string"
					},
					"taskPriority": {
						"nullable": true,
						"format": "int32",
						"description": "Restrict to tasks that have the given priority.",
						"type": "integer"
					},
					"processInstanceBusinessKeyIn": {
						"nullable": true,
						"description": "Filter by process instances with one of the give business keys.\nThe keys need to be in a comma-separated list.",
						"type": "array",
						"items": {"type": "string"}
					},
					"withoutTaskDueDate": {
						"nullable": true,
						"description": "Only include tasks which have no due date. Value may only be `true`, as `false` is the\ndefault behavior.",
						"type": "boolean"
					},
					"processFinished": {
						"nullable": true,
						"description": "Only include tasks of finished processes. Value may only be `true`, as `false` is the\ndefault behavior.",
						"type": "boolean"
					},
					"activityInstanceIdIn": {
						"nullable": true,
						"description": "Only include tasks which belong to one of the passed  activity instance ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"taskAssignee": {
						"nullable": true,
						"description": "Restrict to tasks that the given user is assigned to.",
						"type": "string"
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include historic task instances that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"taskDeleteReason": {
						"nullable": true,
						"description": "Restrict to tasks that have the given delete reason.",
						"type": "string"
					},
					"processVariables": {
						"nullable": true,
						"description": "Only include tasks that belong to process instances that have variables with certain\nvalues. Variable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n**Note:** Values are always treated as `String` objects on server side.\n\n\nValid operator values are:\n* `eq` - equal to;\n* `neq` - not equal to;\n* `gt` - greater than;\n* `gteq` - greater than or equal to;\n* `lt` - lower than;\n* `lteq` - lower than or equal to;\n* `like`;\n* `notLike`.\n\n`key` and `value` may not contain underscore or comma characters.",
						"type": "array",
						"items": {"$ref": "#/components/schemas/VariableQueryParameterDto"}
					},
					"taskDescriptionLike": {
						"nullable": true,
						"description": "Restrict to tasks that have a description that has the parameter value as a substring.",
						"type": "string"
					},
					"taskOwnerLike": {
						"nullable": true,
						"description": "Restrict to tasks that are owned by users with the parameter value as a substring.",
						"type": "string"
					},
					"taskHadCandidateUser": {
						"nullable": true,
						"description": "Restrict to tasks with a historic identity link to the given candidate user.",
						"type": "string"
					},
					"taskId": {
						"nullable": true,
						"description": "Filter by task id.",
						"type": "string"
					}
				}
			},
			"ProblemDto": {
				"type": "object",
				"properties": {
					"mainElementId": {
						"nullable": true,
						"description": "The main element id where the problem occurred.",
						"type": "string"
					},
					"line": {
						"nullable": true,
						"format": "int32",
						"description": "The line where the problem occurred.",
						"type": "integer"
					},
					"column": {
						"nullable": true,
						"format": "int32",
						"description": "The column where the problem occurred.",
						"type": "integer"
					},
					"message": {
						"nullable": true,
						"description": "The message of the problem.",
						"type": "string"
					},
					"elementIds": {
						"nullable": true,
						"description": "A list of element id affected by the problem.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"RetriesDto": {
				"type": "object",
				"properties": {"retries": {
					"nullable": true,
					"format": "int32",
					"description": "The number of retries to set for the resource.  Must be >= 0. If this is 0, an incident is created\nand the task, or job, cannot be fetched, or acquired anymore unless the retries are increased again.\nCan not be null.",
					"type": "integer"
				}}
			},
			"SetJobRetriesDto": {"allOf": [
				{
					"description": "Defines the number of retries for a selection of jobs.\nPlease note that if both jobIds and jobQuery are provided,\nthen retries will be set on the union of these sets.",
					"type": "object",
					"properties": {
						"jobIds": {
							"nullable": true,
							"description": "A list of job ids to set retries for.",
							"type": "array",
							"items": {"type": "string"}
						},
						"jobQuery": {"$ref": "#/components/schemas/JobQueryDto"}
					}
				},
				{"$ref": "#/components/schemas/JobRetriesDto"}
			]},
			"HistoricJobLogQueryDto": {
				"description": "A Historic Job Log instance query which defines a list of Historic Job Log instances",
				"type": "object",
				"properties": {
					"failedActivityIdIn": {
						"nullable": true,
						"description": "Only include historic job logs which belong to failures of one of the passed activity ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"processInstanceId": {
						"nullable": true,
						"description": "Filter by process instance id.",
						"type": "string"
					},
					"processDefinitionId": {
						"nullable": true,
						"description": "Filter by process definition id.",
						"type": "string"
					},
					"jobDefinitionId": {
						"nullable": true,
						"description": "Filter by job definition id.",
						"type": "string"
					},
					"deletionLog": {
						"nullable": true,
						"description": "Only include deletion logs. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"creationLog": {
						"nullable": true,
						"description": "Only include creation logs. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"jobPriorityHigherThanOrEquals": {
						"nullable": true,
						"format": "int64",
						"description": "Only include logs for which the associated job had a priority higher than or equal to the\ngiven value. Value must be a valid `long` value.",
						"type": "integer"
					},
					"successLog": {
						"nullable": true,
						"description": "Only include success logs. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"jobDefinitionConfiguration": {
						"nullable": true,
						"description": "Filter by job definition configuration.",
						"type": "string"
					},
					"executionIdIn": {
						"nullable": true,
						"description": "Only include historic job logs which belong to one of the passed execution ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"jobExceptionMessage": {
						"nullable": true,
						"description": "Filter by job exception message.",
						"type": "string"
					},
					"jobPriorityLowerThanOrEquals": {
						"nullable": true,
						"format": "int64",
						"description": "Only include logs for which the associated job had a priority lower than or equal to the\ngiven value. Value must be a valid `long` value.",
						"type": "integer"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "Filter by process definition key.",
						"type": "string"
					},
					"jobDefinitionType": {
						"nullable": true,
						"description": "Filter by job definition type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation)\nfor more information about job definition types.",
						"type": "string"
					},
					"failureLog": {
						"nullable": true,
						"description": "Only include failure logs. Value may only be `true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"jobId": {
						"nullable": true,
						"description": "Filter by job id.",
						"type": "string"
					},
					"hostname": {
						"nullable": true,
						"description": "Filter by hostname.",
						"type": "string"
					},
					"tenantIdIn": {
						"nullable": true,
						"description": "Only include historic job log entries which belong to one of the passed and comma-\nseparated tenant ids.",
						"type": "array",
						"items": {"type": "string"}
					},
					"deploymentId": {
						"nullable": true,
						"description": "Filter by deployment id.",
						"type": "string"
					},
					"sorting": {
						"nullable": true,
						"description": "An array of criteria to sort the result by. Each element of the array is\n                       an object that specifies one ordering. The position in the array\n                       identifies the rank of an ordering, i.e., whether it is primary, secondary,\n                       etc. Sorting has no effect for `count` endpoints",
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"sortOrder": {
									"nullable": true,
									"description": "Sort the results in a given order. Values may be `asc` for ascending order or `desc` for\ndescending order. Must be used in conjunction with the sortBy parameter.",
									"type": "string",
									"enum": [
										"asc",
										"desc"
									]
								},
								"sortBy": {
									"nullable": true,
									"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter.",
									"type": "string",
									"enum": [
										"timestamp",
										"jobId",
										"jobDefinitionId",
										"jobDueDate",
										"jobRetries",
										"jobPriority",
										"activityId",
										"executionId",
										"processInstanceId",
										"processDefinitionId",
										"processDefinitionKey",
										"deploymentId",
										"hostname",
										"occurrence",
										"tenantId"
									]
								}
							}
						}
					},
					"withoutTenantId": {
						"nullable": true,
						"description": "Only include historic job log entries that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior.",
						"type": "boolean"
					},
					"logId": {
						"nullable": true,
						"description": "Filter by historic job log id.",
						"type": "string"
					},
					"activityIdIn": {
						"nullable": true,
						"description": "Only include historic job logs which belong to one of the passed activity ids.",
						"type": "array",
						"items": {"type": "string"}
					}
				}
			},
			"ResourceOptionsDto": {"allOf": [
				{
					"type": "object",
					"properties": {}
				},
				{"$ref": "#/components/schemas/LinkableDto"}
			]},
			"DeploymentWithDefinitionsDto": {"allOf": [
				{
					"type": "object",
					"properties": {
						"deployedProcessDefinitions": {
							"nullable": true,
							"description": "A JSON Object containing a property for each of the process definitions,\nwhich are successfully deployed with that deployment.\nThe key is the process definition id, the value is a JSON Object corresponding to the process definition.",
							"additionalProperties": {"$ref": "#/components/schemas/ProcessDefinitionDto"},
							"type": "object"
						},
						"deployedDecisionDefinitions": {
							"nullable": true,
							"description": "A JSON Object containing a property for each of the decision definitions,\nwhich are successfully deployed with that deployment.\nThe key is the decision definition id, the value is a JSON Object corresponding to the decision definition.",
							"additionalProperties": {"$ref": "#/components/schemas/DecisionDefinitionDto"},
							"type": "object"
						},
						"deployedCaseDefinitions": {
							"nullable": true,
							"description": "A JSON Object containing a property for each of the case definitions,\nwhich are successfully deployed with that deployment.\nThe key is the case definition id, the value is a JSON Object corresponding to the case definition.",
							"additionalProperties": {"$ref": "#/components/schemas/CaseDefinitionDto"},
							"type": "object"
						},
						"deployedDecisionRequirementsDefinitions": {
							"nullable": true,
							"description": "A JSON Object containing a property for each of the decision requirements definitions,\nwhich are successfully deployed with that deployment.\nThe key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.",
							"additionalProperties": {"$ref": "#/components/schemas/DecisionRequirementsDefinitionDto"},
							"type": "object"
						}
					}
				},
				{"$ref": "#/components/schemas/DeploymentDto"}
			]},
			"UserIdDto": {
				"type": "object",
				"properties": {"userId": {
					"nullable": true,
					"description": "The id of the user that the current action refers to.",
					"type": "string"
				}}
			},
			"LinkableDto": {
				"type": "object",
				"properties": {"links": {
					"nullable": true,
					"description": "The links associated to this resource, with `method`, `href` and `rel`.",
					"type": "array",
					"items": {"$ref": "#/components/schemas/AtomLink"}
				}}
			},
			"HistoricProcessInstanceDto": {
				"type": "object",
				"properties": {
					"processDefinitionId": {
						"nullable": true,
						"description": "The id of the process definition that this process instance belongs to.",
						"type": "string"
					},
					"durationInMillis": {
						"nullable": true,
						"format": "int64",
						"description": "The time the instance took to finish (in milliseconds).",
						"type": "integer"
					},
					"caseInstanceId": {
						"nullable": true,
						"description": "The id of the parent case instance, if it exists.",
						"type": "string"
					},
					"processDefinitionName": {
						"nullable": true,
						"description": "The name of the process definition that this process instance belongs to.",
						"type": "string"
					},
					"superCaseInstanceId": {
						"nullable": true,
						"description": "The id of the parent case instance, if it exists.",
						"type": "string"
					},
					"deleteReason": {
						"nullable": true,
						"description": "The provided delete reason in case the process instance was canceled during execution.",
						"type": "string"
					},
					"processDefinitionKey": {
						"nullable": true,
						"description": "The key of the process definition that this process instance belongs to.",
						"type": "string"
					},
					"removalTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time after which the instance should be removed by the History Cleanup job. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"startUserId": {
						"nullable": true,
						"description": "The id of the user who started the process instance.",
						"type": "string"
					},
					"startActivityId": {
						"nullable": true,
						"description": "The id of the initial activity that was executed (e.g., a start event).",
						"type": "string"
					},
					"businessKey": {
						"nullable": true,
						"description": "The business key of the process instance.",
						"type": "string"
					},
					"tenantId": {
						"nullable": true,
						"description": "The tenant id of the process instance.",
						"type": "string"
					},
					"rootProcessInstanceId": {
						"nullable": true,
						"description": "The process instance id of the root process instance that initiated the process.",
						"type": "string"
					},
					"startTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the instance was started. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the process instance.",
						"type": "string"
					},
					"endTime": {
						"nullable": true,
						"format": "date-time",
						"description": "The time the instance ended. Default [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
						"type": "string"
					},
					"state": {
						"nullable": true,
						"description": "Last state of the process instance, possible values are:\n\n`ACTIVE` - running process instance\n\n`SUSPENDED` - suspended process instances\n\n`COMPLETED` - completed through normal end event\n\n`EXTERNALLY_TERMINATED` - terminated externally, for instance through REST API\n\n`INTERNALLY_TERMINATED` - terminated internally, for instance by terminating boundary event",
						"type": "string",
						"enum": [
							"ACTIVE",
							"SUSPENDED",
							"COMPLETED",
							"EXTERNALLY_TERMINATED",
							"INTERNALLY_TERMINATED"
						]
					},
					"processDefinitionVersion": {
						"nullable": true,
						"format": "int32",
						"description": "The version of the process definition that this process instance belongs to.",
						"type": "integer"
					},
					"superProcessInstanceId": {
						"nullable": true,
						"description": "The id of the parent process instance, if it exists.",
						"type": "string"
					}
				}
			},
			"IdentityLinkDto": {
				"type": "object",
				"required": ["type"],
				"properties": {
					"groupId": {
						"nullable": true,
						"description": "The id of the group participating in this link. Either `groupId` or `userId` is set.",
						"type": "string"
					},
					"type": {
						"nullable": true,
						"description": "The type of the identity link. The value of the this property can be user-defined. The Process Engine\nprovides three pre-defined Identity Link `type`s:\n\n* `candidate`\n* `assignee` - reserved for the task assignee\n* `owner` - reserved for the task owner\n\n**Note**: When adding or removing an Identity Link, the `type` property must be defined.",
						"type": "string"
					},
					"userId": {
						"nullable": true,
						"description": "The id of the user participating in this link. Either `userId` or `groupId` is set.",
						"type": "string"
					}
				}
			},
			"ExecutionDto": {
				"type": "object",
				"properties": {
					"processInstanceId": {
						"nullable": true,
						"description": "The id of the root of the execution tree representing the process instance.",
						"type": "string"
					},
					"ended": {
						"nullable": true,
						"description": "Indicates if the execution is ended.",
						"type": "boolean"
					},
					"tenantId": {
						"nullable": true,
						"description": "The id of the tenant this execution belongs to. Can be `null`\nif the execution belongs to no single tenant.",
						"type": "string"
					},
					"id": {
						"nullable": true,
						"description": "The id of the Execution.",
						"type": "string"
					}
				}
			},
			"LockExternalTaskDto": {"allOf": [
				{
					"type": "object",
					"properties": {"lockDuration": {
						"format": "int64",
						"description": "The duration to lock the external task for in milliseconds.\n**Note:** Attempting to lock an already locked external task with the same `workerId`\nwill succeed and a new lock duration will be set, starting from the current moment.",
						"type": "integer"
					}}
				},
				{"$ref": "#/components/schemas/HandleExternalTaskDto"}
			]},
			"ExceptionDto": {
				"title": "ExceptionDto",
				"type": "object",
				"properties": {
					"code": {
						"description": "The code allows your client application to identify the error in an automated fashion.\nYou can look up the meaning of all built-in codes and learn how to add custom codes\nin the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/error-handling/#exception-codes).",
						"type": "number"
					},
					"type": {
						"nullable": true,
						"description": "An exception class indicating the occurred error.",
						"type": "string"
					},
					"message": {
						"nullable": true,
						"description": "A detailed message of the error.",
						"type": "string"
					}
				}
			}
		},
		"securitySchemes": {"basicAuth": {
			"scheme": "basic",
			"type": "http"
		}}
	},
	"servers": [
		{
			"variables": {
				"port": {"default": "8080"},
				"host": {"default": "localhost"},
				"contextPath": {"default": "engine-rest"}
			},
			"description": "The API server for the default process engine",
			"url": "http://{host}:{port}/{contextPath}"
		},
		{
			"variables": {
				"port": {"default": "8080"},
				"host": {"default": "localhost"},
				"contextPath": {"default": "engine-rest"},
				"engineName": {"default": "default"}
			},
			"description": "The API server for a named process engine",
			"url": "http://{host}:{port}/{contextPath}/engine/{engineName}"
		},
		{
			"variables": {"url": {"default": ""}},
			"description": "The API server with a custom url",
			"url": "{url}"
		}
	],
	"openapi": "3.0.2",
	"paths": {
		"/process-instance/suspended-async": {"post": {
			"summary": "Activate/Suspend In Batch",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ProcessInstanceSuspensionStateAsyncDto"},
				"examples": {"example-1": {
					"summary": "POST `/process-instance/suspended-async`",
					"description": "Suspend Process Instance In Batch",
					"value": {
						"processInstanceIds": [
							"processInstanceId1",
							"processInstanceIdN"
						],
						"suspended": true
					}
				}}
			}}},
			"operationId": "updateSuspensionStateAsyncOperation",
			"description": "Activates or suspends process instances asynchronously with a list of process instance ids,\na process instance query, and/or a historical process instance query.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"createUserId": "demo",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"jobsCreated": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "Bad Request\nReturned if some of the request parameters are invalid,\nfor example if the provided processDefinitionId or processDefinitionKey parameter is null.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Process Instance"]
		}},
		"/history/batch/set-removal-time": {"post": {
			"summary": "Set Removal Time Async (POST)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SetRemovalTimeToHistoricBatchesDto"},
				"examples": {"example-1": {
					"summary": "POST `/history/batch/set-removal-time`",
					"value": {
						"historicBatchIds": [
							"b4d2ad98-7240-11e9-98b7-be5e0f7575b7",
							"b4d2ad94-7240-11e9-98b7-be5e0f7575b7"
						],
						"absoluteRemovalTime": "2019-05-05T11:56:24.725+0200",
						"historicBatchQuery": {"completed": true}
					}
				}}
			}}},
			"operationId": "setRemovalTimeAsyncHistoricBatch",
			"description": "Sets the removal time to multiple historic batches asynchronously (batch).\n\nAt least __historicBatchIds__ or __historicBatchQuery__ has to be\nprovided. If both are provided,\nall instances matching query criterion and instances from the list\nwill be updated with a removal time.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "POST `/history/batch/set-removal-time`",
							"value": {
								"monitorJobDefinitionId": "120b568f-724a-11e9-98b7-be5e0f7575b7",
								"invocationsPerBatchJob": 1,
								"totalJobs": 12,
								"tenantId": "accounting",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "120b5690-724a-11e9-98b7-be5e0f7575b7",
								"id": "120b568d-724a-11e9-98b7-be5e0f7575b7",
								"type": "batch-set-removal-time",
								"batchJobDefinitionId": "120b568e-724a-11e9-98b7-be5e0f7575b7"
							}
						}}
					}}
				},
				"400": {
					"description": "\nRequest was unsuccessful due to a bad user request. This occurs if\nsome of the query parameters are invalid, e.g. if neither\nhistoricBatchIds nor historicBatchQuery is present or if no mode is\nspecified.\n\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Historic Batch"]
		}},
		"/process-definition/key/{key}/startForm": {"get": {
			"summary": "Get Start Form Key",
			"operationId": "getStartFormByKey",
			"description": "Retrieves the key of the start form for the latest version of the process definition\nwhich belongs to no tenant.\nThe form key corresponds to the `FormData#formKey` property in the engine.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/FormDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "GET `process-definition/key/aKey/startForm`",
							"value": {
								"contextPath": "http://localhost:8080/my-process-application/",
								"key": "aFormKey"
							}
						}}
					}}
				},
				"400": {
					"description": "Process definition has no start form defined. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the process definition (the latest version thereof) for which the form key is to be retrieved.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/history/batch/count": {"get": {
			"summary": "Get Historic Batch Count",
			"operationId": "getHistoricBatchesCount",
			"description": "Requests the number of historic batches that fulfill the query criteria.\nTakes the same filtering parameters as the\n[Get Historic Batches](https://docs.camunda.org/manual/7.19/reference/rest/history/batch/get-query/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "GET `/history/batch/count?type=aBatchType`",
							"value": {"count": 1}
						}}
					}}
				},
				"400": {
					"description": "\nReturned if some of the query parameters are invalid, for example if\na `sortOrder` parameter is supplied, but no `sortBy`.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "batchId",
					"description": "Filter by batch id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "type",
					"description": "Filter by batch type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/batch/#creating-a-batch)\nfor more information about batch types."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "completed",
					"description": "\nFilter completed or not completed batches. If the value is\n`true`, only completed batches, i.e., end time is set, are\nreturned. Otherwise, if the value is `false`, only running\nbatches, i.e., end time is null, are returned."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given\ntenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include batches which belong to no tenant. Value can effectively only be `true`, as `false` is the default behavior."
				}
			],
			"tags": ["Historic Batch"]
		}},
		"/external-task/{id}/priority": {"put": {
			"summary": "Set Priority",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/PriorityDto"},
				"examples": {"example-1": {
					"summary": "PUT /external-task/anId/priority",
					"value": {"priority": 5}
				}}
			}}},
			"operationId": "setExternalTaskResourcePriority",
			"description": "Sets the priority of an existing external task by id. The default value of a priority is 0.",
			"responses": {
				"204": {"description": "Request successful."},
				"404": {
					"description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,\ne.g., due to a caught BPMN boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the external task to set the priority for.",
				"required": true
			}],
			"tags": ["External Task"]
		}},
		"/history/decision-instance/delete": {"post": {
			"summary": "Delete Async (POST)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/DeleteHistoricDecisionInstancesDto"},
				"examples": {"example-1": {
					"summary": "POST `/history/decision-instance/delete`",
					"description": "POST `/history/decision-instance/delete`",
					"value": {
						"historicDecisionInstanceIds": [
							"aDecision",
							"secondDecision"
						],
						"historicDecisionInstanceQuery": {"decisionDefinitionKey": "a-definition-key"},
						"deleteReason": "a delete reason"
					}
				}}
			}}},
			"operationId": "deleteAsync",
			"description": "Delete multiple historic decision instances asynchronously (batch).\nAt least `historicDecisionInstanceIds` or `historicDecisionInstanceQuery` \nhas to be provided. If both are provided then all instances matching query \ncriterion and instances from the list will be deleted.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "POST `/history/decision-instance/delete`",
							"description": "POST `/history/decision-instance/delete`",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"suspened": false,
								"createUserId": "aUser",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"jobsCreated": 10,
								"tenantId": null,
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId"
							}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, i.e. neither\n`historicDecisionInstanceIds` nor `historicDecisionInstanceQuery` is\npresent. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) \nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Historic Decision Instance"]
		}},
		"/user/{id}/profile": {
			"get": {
				"summary": "Get Profile",
				"operationId": "getUserProfile",
				"description": "Retrieves a user's profile.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/UserProfileDto"},
							"examples": {"example-1": {
								"summary": "GET `/user/jonny1/profile",
								"value": {
									"firstName": "John",
									"lastName": "Doe",
									"id": "jonny1",
									"email": "anEmailAddress"
								}
							}}
						}}
					},
					"404": {
						"description": "Execution with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the user to retrieve.",
					"required": true
				}],
				"tags": ["User"]
			},
			"put": {
				"summary": "Update User Profile",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/UserProfileDto"},
					"examples": {"example-1": {
						"summary": "PUT `/user/jonny1/profile`",
						"value": {
							"firstName": "John",
							"lastName": "Doe",
							"id": "jonny1",
							"email": "aNewEmailAddress"
						}
					}}
				}}},
				"operationId": "updateProfile",
				"description": "Updates the profile information of an already existing user.",
				"responses": {
					"500": {
						"description": "The user could not be updated due to an internal server error. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "Identity service is read-only (Cannot modify users / groups / memberships).",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "If the user with the requested Id cannot be found.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the user.",
					"required": true
				}],
				"tags": ["User"]
			}
		},
		"/decision-definition/{id}/xml": {"get": {
			"summary": "Get XML By Id",
			"operationId": "getDecisionDefinitionDmnXmlById",
			"description": "Retrieves the DMN XML of a decision definition.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionDefinitionDiagramDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for GET `/decision-definition/aDecisionDefinitionId/xml`",
							"value": {
								"dmnXml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                                    <definitions xmlns=\"http://www.omg.org/spec/DMN/20151101/dmn.xsd\"\n                                                 id=\"definitions\"\n                                                 name=\"camunda\"\n                                                 namespace=\"http://camunda.org/schema/1.0/dmn\">\n                                      <decision id=\"testDecision\" name=\"decision\">\n                                        <decisionTable id=\"table\">\n                                          <output id=\"result\" name=\"result\" >\n                                          <\/output>\n                                          <rule id=\"rule\">\n                                            <outputEntry id=\"output1\">\n                                              <text>\"not okay\"<\/text>\n                                            <\/outputEntry>\n                                          <\/rule>\n                                        <\/decisionTable>\n                                      <\/decision>\n                                    <\/definitions>",
								"id": "aDecisionDefinitionId"
							}
						}}
					}}
				},
				"404": {
					"description": "Decision definition with given id does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the decision definition.",
				"required": true
			}],
			"tags": ["Decision Definition"]
		}},
		"/history/job-log/count": {
			"post": {
				"summary": "Get Job Log Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricJobLogQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/job-log/count`",
						"value": {"jobId": "aJobId"}
					}}
				}}},
				"operationId": "queryHistoricJobLogsCount",
				"description": "Queries for the number of historic job logs that fulfill the given parameters.\nThis method takes the same message body as the\n[Get Job Logs (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/job-log/post-job-log-query/)\nmethod and therefore it is slightly more powerful than the\n[Get Job Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/job-log/get-job-log-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "POST `/history/job-log/count`",
								"description": "POST `/history/job-log/count`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Historic Job Log"]
			},
			"get": {
				"summary": "Get Job Log Count",
				"operationId": "getHistoricJobLogsCount",
				"description": "Queries for the number of historic job logs that fulfill the given parameters.\nTakes the same parameters as the\n[Get Job Logs](https://docs.camunda.org/manual/7.19/reference/rest/history/job-log/get-job-log-query/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "GET `/history/job-log/count?jobId=aJobId`",
								"description": "GET `/history/job-log/count?jobId=aJobId`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "logId",
						"description": "Filter by historic job log id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobId",
						"description": "Filter by job id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobExceptionMessage",
						"description": "Filter by job exception message."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobDefinitionId",
						"description": "Filter by job definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobDefinitionType",
						"description": "Filter by job definition type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation)\nfor more information about job definition types."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobDefinitionConfiguration",
						"description": "Filter by job definition configuration."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityIdIn",
						"description": "Only include historic job logs which belong to one of the passed activity ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "failedActivityIdIn",
						"description": "Only include historic job logs which belong to failures of one of the passed activity ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionIdIn",
						"description": "Only include historic job logs which belong to one of the passed execution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by process definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by process definition key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "deploymentId",
						"description": "Filter by deployment id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include historic job log entries which belong to one of the passed and comma-\nseparated tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic job log entries that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "hostname",
						"description": "Filter by hostname."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "jobPriorityLowerThanOrEquals",
						"description": "Only include logs for which the associated job had a priority lower than or equal to the\ngiven value. Value must be a valid `long` value."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "jobPriorityHigherThanOrEquals",
						"description": "Only include logs for which the associated job had a priority higher than or equal to the\ngiven value. Value must be a valid `long` value."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "creationLog",
						"description": "Only include creation logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "failureLog",
						"description": "Only include failure logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "successLog",
						"description": "Only include success logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deletionLog",
						"description": "Only include deletion logs. Value may only be `true`, as `false` is the default behavior."
					}
				],
				"tags": ["Historic Job Log"]
			}
		},
		"/history/detail/{id}": {"get": {
			"summary": "Get Historic Detail",
			"operationId": "historicDetail",
			"description": "Retrieves a historic detail by id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/HistoricDetailDto"},
						"examples": {"example-1": {
							"summary": "GET `/history/detail/3cd79390-001a-11e7-8c6b-34f39ab71d4e`",
							"description": "GET `/history/detail/3cd79390-001a-11e7-8c6b-34f39ab71d4e`",
							"value": {
								"caseDefinitionKey": null,
								"activityInstanceId": "StartEvent_1:3cd7456e-001a-11e7-8c6b-34f39ab71d4e",
								"type": "variableUpdate",
								"userOperationId": "3cd76c7f-001a-11e7-8c6b-34f39ab71d4e",
								"processDefinitionKey": "invoice",
								"removalTime": "2018-02-10T14:33:19.000+0200",
								"variableType": "Double",
								"rootProcessInstanceId": "aRootProcessInstanceId",
								"id": "3cd79390-001a-11e7-8c6b-34f39ab71d4e",
								"value": 30,
								"processDefinitionId": "invoice:1:3c59899b-001a-11e7-8c6b-34f39ab71d4e",
								"processInstanceId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
								"caseExecutionId": null,
								"variableName": "amount",
								"caseDefinitionId": null,
								"initial": true,
								"caseInstanceId": null,
								"valueInfo": {},
								"errorMessage": null,
								"variableInstanceId": "3cd65b08-001a-11e7-8c6b-34f39ab71d4e",
								"revision": 0,
								"executionId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
								"tenantId": null,
								"time": "2017-03-03T15:03:54.000+0200",
								"taskId": null
							}
						}}
					}}
				},
				"404": {
					"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the detail.",
					"required": true
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "deserializeValue",
					"description": "Determines whether serializable variable values (typically\nvariables that store custom Java objects) should be deserialized\non server side (default `true`).\n\nIf set to `true`, a serializable variable will be deserialized on\nserver side and transformed to JSON using\n[Jackson's](https://github.com/FasterXML/jackson) POJO/bean\nproperty introspection feature. Note that this requires the Java\nclasses of the variable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its\nserialized format. For example, a variable that is serialized as\nXML will be returned as a JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of\nbackward compatibility, we recommend setting this parameter to\n`false` when developing web applications that are independent of\nthe Java process applications deployed to the engine."
				}
			],
			"tags": ["Historic Detail"]
		}},
		"/process-definition/{id}/form-variables": {"get": {
			"summary": "Get Start Form Variables",
			"operationId": "getStartFormVariables",
			"description": "Retrieves the start form variables for a process definition\n(only if they are defined via the \n[Generated Task Form](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms) approach).\nThe start form variables take form data specified on the start event into account.\nIf form fields are defined, the variable types and default values\nof the form fields are taken into account.",
			"responses": {
				"200": {
					"description": "Request successful. A JSON object containing a property for each variable returned.",
					"content": {"application/json": {
						"schema": {
							"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
							"type": "object"
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "GET `/process-definition/anId/form-variables`",
							"value": {
								"firstName": {
									"valueInfo": {},
									"type": "String",
									"value": "Jonny"
								},
								"amount": {
									"valueInfo": {},
									"type": "integer",
									"value": 5
								}
							}
						}}
					}}
				},
				"404": {
					"description": "The id is null or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the process definition to retrieve the variables for.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "variableNames",
					"description": "A comma-separated list of variable names. Allows restricting the list of requested\nvariables to the variable names in the list. It is best practice to restrict the\nlist of variables to the variables actually required by the form in order to\nminimize fetching of data. If the query parameter is ommitted all variables are\nfetched. If the query parameter contains non-existent variable names, the variable\nnames are ignored."
				},
				{
					"schema": {
						"default": true,
						"type": "boolean"
					},
					"in": "query",
					"name": "deserializeValues",
					"description": "Determines whether serializable variable values (typically variables that store\ncustom Java objects) should be deserialized on server side (default true).\n\nIf set to true, a serializable variable will be deserialized on server side and\ntransformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean\nproperty introspection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to false, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string\ncontaining XML.\n\n**Note**: While true is the default value for reasons of backward compatibility, we\nrecommend setting this parameter to false when developing web applications that are\nindependent of the Java process applications deployed to the engine."
				}
			],
			"tags": ["Process Definition"]
		}},
		"/history/decision-instance/count": {"get": {
			"summary": "Get Historic Decision Instance Count",
			"operationId": "getHistoricDecisionInstancesCount",
			"description": "Queries for the number of historic decision instances that fulfill the given parameters. \nTakes the same parameters as the \n[Get Historic Decision Instances](https://docs.camunda.org/manual/7.19/reference/rest/history/decision-instance/get-decision-instance-query/) \nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/history/decision-instance/count`",
							"value": {"count": 4}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionInstanceId",
					"description": "Filter by decision instance id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionInstanceIdIn",
					"description": "Filter by decision instance ids. Must be a comma-separated list of decision instance ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionId",
					"description": "Filter by the decision definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionIdIn",
					"description": "Filter by the decision definitions the instances belongs to. Must be a\ncomma-separated list of decision definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionKey",
					"description": "Filter by the key of the decision definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionKeyIn",
					"description": "Filter by the keys of the decision definition the instances belongs to. Must be a comma-\nseparated list of decision definition keys."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionName",
					"description": "Filter by the name of the decision definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionNameLike",
					"description": "Filter by the name of the decision definition the instances belongs to, that the parameter\nis a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Filter by the process definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKey",
					"description": "Filter by the key of the process definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Filter by the process instance the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseDefinitionId",
					"description": "Filter by the case definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseDefinitionKey",
					"description": "Filter by the key of the case definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseInstanceId",
					"description": "Filter by the case instance the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityIdIn",
					"description": "Filter by the activity ids the instances belongs to.\nMust be a comma-separated list of acitvity ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityInstanceIdIn",
					"description": "Filter by the activity instance ids the instances belongs to.\nMust be a comma-separated list of acitvity instance ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A historic decision instance must have one\nof the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include historic decision instances that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "evaluatedBefore",
					"description": "Restrict to instances that were evaluated before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-\ndd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "evaluatedAfter",
					"description": "Restrict to instances that were evaluated after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-\ndd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "userId",
					"description": "Restrict to instances that were evaluated by the given user."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "rootDecisionInstanceId",
					"description": "Restrict to instances that have a given root decision instance id.\nThis also includes the decision instance with the given id."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "rootDecisionInstancesOnly",
					"description": "Restrict to instances those are the root decision instance of an evaluation.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionId",
					"description": "Filter by the decision requirements definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionKey",
					"description": "Filter by the key of the decision requirements definition the instances belongs to."
				}
			],
			"tags": ["Historic Decision Instance"]
		}},
		"/identity/groups": {"get": {
			"summary": "Get a User's Groups",
			"operationId": "getGroupInfo",
			"description": "Gets the groups of a user by id and includes all users that share a group with the\ngiven user.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/IdentityServiceGroupInfoDto"},
						"examples": {"example-1": {
							"description": "GET `/identity/groups?userId=aUserId`",
							"value": {
								"groups": [{
									"name": "group1",
									"id": "group1Id"
								}],
								"groupUsers": [{
									"firstName": "firstName",
									"lastName": "lastName",
									"displayName": "firstName lastName",
									"id": "anotherUserId"
								}]
							}
						}}
					}}
				},
				"400": {
					"description": "If the `userId` query parameter is missing. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "query",
				"name": "userId",
				"description": "The id of the user to get the groups for.",
				"required": true
			}],
			"tags": ["Identity"]
		}},
		"/history/activity-instance": {
			"post": {
				"summary": "Get List (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricActivityInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/activity-instance`",
						"value": {
							"sorting": [
								{
									"sortOrder": "asc",
									"sortBy": "activityId"
								},
								{
									"sortOrder": "desc",
									"sortBy": "executionId"
								}
							],
							"taskAssignee": "peter",
							"activityType": "userTask"
						}
					}}
				}}},
				"operationId": "queryHistoricActivityInstances",
				"description": "Queries for historic activity instances that fulfill the given parameters.\nThe size of the result set can be retrieved by using the\n[Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricActivityInstanceDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200 Response 1",
								"value": [{
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"durationInMillis": 2000,
									"activityName": "anActivityName",
									"completeScope": false,
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"activityId": "anActivity",
									"canceled": true,
									"executionId": "anExecutionId",
									"calledCaseInstanceId": null,
									"tenantId": null,
									"startTime": "2013-04-23T11:20:43.000+0200",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"assignee": "peter",
									"endTime": "2013-04-23T18:42:43.000+0200",
									"id": "aHistoricActivityInstanceId",
									"activityType": "userTask",
									"calledProcessInstanceId": "aHistoricCalledProcessInstanceId",
									"taskId": "aTaskId",
									"parentActivityInstanceId": "aHistoricParentActivityInstanceId"
								}]
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Historic Activity Instance"]
			},
			"get": {
				"summary": "Get List",
				"operationId": "getHistoricActivityInstances",
				"description": "Queries for historic activity instances that fulfill the given parameters.\nThe size of the result set can be retrieved by using the\n[Get Historic Activity Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/activity-instance/get-activity-instance-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricActivityInstanceDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response for GET `/history/activity-instance?activityType=userTask&taskAssignee=peter`",
								"value": [{
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"durationInMillis": 2000,
									"activityName": "anActivityName",
									"completeScope": false,
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"activityId": "anActivity",
									"canceled": true,
									"executionId": "anExecutionId",
									"calledCaseInstanceId": null,
									"tenantId": null,
									"startTime": "2013-04-23T11:20:43.000+0200",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"assignee": "peter",
									"endTime": "2013-04-23T18:42:43.000+0200",
									"id": "aHistoricActivityInstanceId",
									"activityType": "userTask",
									"calledProcessInstanceId": "aHistoricCalledProcessInstanceId",
									"taskId": "aTaskId",
									"parentActivityInstanceId": "aHistoricParentActivityInstanceId"
								}]
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {
							"type": "string",
							"enum": [
								"activityInstanceId",
								"instanceId",
								"executionId",
								"activityId",
								"activityName",
								"activityType",
								"startTime",
								"endTime",
								"duration",
								"definitionId",
								"occurrence",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceId",
						"description": "Filter by activity instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by process definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Filter by the id of the execution that executed the activity instance."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityId",
						"description": "Filter by the activity id (according to BPMN 2.0 XML)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityName",
						"description": "Filter by the activity name (according to BPMN 2.0 XML)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityType",
						"description": "Filter by activity type."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskAssignee",
						"description": "Only include activity instances that are user tasks and assigned to a given user."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "finished",
						"description": "Only include finished activity instances.\nValue may only be `true`, as `false` behaves the same as when the property is not set."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "unfinished",
						"description": "Only include unfinished activity instances.\nValue may only be `true`, as `false` behaves the same as when the property is not set."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "canceled",
						"description": "Only include canceled activity instances.\nValue may only be `true`, as `false` behaves the same as when the property is not set."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "completeScope",
						"description": "Only include activity instances which completed a scope.\nValue may only be `true`, as `false` behaves the same as when the property is not set."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedBefore",
						"description": "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedAfter",
						"description": "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedBefore",
						"description": "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedAfter",
						"description": "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior."
					}
				],
				"tags": ["Historic Activity Instance"]
			}
		},
		"/process-instance": {
			"post": {
				"summary": "Get List (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/process-instance` Request Body 1",
						"value": {
							"processDefinitionId": "aProcessDefinitionId",
							"variables": [
								{
									"name": "myVariable",
									"value": "camunda",
									"operator": "eq"
								},
								{
									"name": "mySecondVariable",
									"value": 124,
									"operator": "neq"
								}
							],
							"sorting": [
								{
									"sortOrder": "asc",
									"sortBy": "definitionKey"
								},
								{
									"sortOrder": "desc",
									"sortBy": "instanceId"
								}
							]
						}
					}}
				}}},
				"operationId": "queryProcessInstances",
				"description": "Queries for process instances that fulfill given parameters through a JSON object.\nThis method is slightly more powerful than the Get Instances method because\nit allows filtering by multiple process variables of types `string`, `number` or `boolean`.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/ProcessInstanceDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200 Response 1",
								"value": [{
									"caseInstanceId": "aCaseInstanceId",
									"businessKey": "aKey",
									"ended": false,
									"tenantId": null,
									"links": [],
									"id": "anId",
									"suspended": false,
									"definitionId": "aProcessDefinitionId"
								}]
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid,\nfor example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Process Instance"]
			},
			"get": {
				"summary": "Get List",
				"operationId": "getProcessInstances",
				"description": "Queries for process instances that fulfill given parameters.\nParameters may be static as well as dynamic runtime properties of process instances.\nThe size of the result set can be retrieved by using the Get Instance Count method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/ProcessInstanceDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response for GET `/process-instance?variables=myVariable_eq_camunda,mySecondVariable_neq_aBadValue`",
								"value": [{
									"caseInstanceId": "aCaseInstanceId",
									"businessKey": "aKey",
									"ended": false,
									"tenantId": null,
									"links": [],
									"id": "anId",
									"suspended": false,
									"definitionId": "aProcDefId"
								}]
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid,\nfor example if a sortOrder parameter is supplied, but no sortBy, or if an invalid operator for variable comparison is used.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {
							"type": "string",
							"enum": [
								"instanceId",
								"definitionKey",
								"definitionId",
								"tenantId",
								"businessKey"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIds",
						"description": "Filter by a comma-separated list of process instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "businessKey",
						"description": "Filter by process instance business key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "businessKeyLike",
						"description": "Filter by process instance business key that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Filter by case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the deployment the id belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by the key of the process definition the instances run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKeyIn",
						"description": "Filter by a comma-separated list of process definition keys.\nA process instance must have one of the given process definition keys."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKeyNotIn",
						"description": "Exclude instances by a comma-separated list of process definition keys.\nA process instance must not have one of the given process definition keys."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "deploymentId",
						"description": "Filter by the deployment the id belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "superProcessInstance",
						"description": "Restrict query to all process instances that are sub process instances of the given process instance.\nTakes a process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "subProcessInstance",
						"description": "Restrict query to all process instances that have the given process instance as a sub process instance.\nTakes a process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "superCaseInstance",
						"description": "Restrict query to all process instances that are sub process instances of the given case instance.\nTakes a case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "subCaseInstance",
						"description": "Restrict query to all process instances that have the given case instance as a sub case instance.\nTakes a case instance id."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "active",
						"description": "Only include active process instances. Value may only be true,\nas false is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended process instances. Value may only be true,\nas false is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withIncident",
						"description": "Filter by presence of incidents. Selects only process instances that have an incident."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentId",
						"description": "Filter by the incident id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentType",
						"description": "Filter by the incident type.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types)\nfor a list of incident types."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessage",
						"description": "Filter by the incident message. Exact match."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessageLike",
						"description": "Filter by the incident message that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include process instances which belong to no tenant."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "processDefinitionWithoutTenantId",
						"description": "Only include process instances which process definition has no tenant id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityIdIn",
						"description": "Filter by a comma-separated list of activity ids.\nA process instance must currently wait in a leaf activity with one of the given activity ids."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "rootProcessInstances",
						"description": "Restrict the query to all process instances that are top level process instances."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "leafProcessInstances",
						"description": "Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variables",
						"description": "Only include process instances that have variables with certain values.\nVariable filtering expressions are comma-separated and are structured as follows:\n\nA valid parameter value has the form `key_operator_value`. `key` is the variable name,\n`operator` is the comparison operator to be used and `value` the variable value.\n\n**Note**: Values are always treated as String objects on server side.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match all variable names in this query case-insensitively.\nIf set to true variableName and variablename are treated as equal."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match all variable values in this query case-insensitively.\nIf set to true variableValue and variablevalue are treated as equal."
					}
				],
				"tags": ["Process Instance"]
			}
		},
		"/task/{id}/comment/{commentId}": {"get": {
			"summary": "Get",
			"operationId": "getComment",
			"description": "Retrieves a task comment by task id and comment id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CommentDto"},
						"examples": {"example-1": {
							"summary": "GET /task/aTaskId/comment",
							"value": {
								"processInstanceId": "96dc383f-23eb-11e6-8e4a-f6aefe19b687",
								"rootProcessInstanceId": "aRootProcessInstanceId",
								"id": "aTaskCommentId",
								"time": "2013-01-02T21:37:03.664+0200",
								"message": "comment content",
								"userId": "userId",
								"taskId": "aTaskId",
								"removalTime": "2018-02-10T14:33:19.000+0200"
							}
						}}
					}}
				},
				"404": {
					"description": "The task or comment with given task and comment id does not exist, or the history of\nthe engine is disabled. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the task.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "commentId",
					"description": "The id of the comment to be retrieved.",
					"required": true
				}
			],
			"tags": ["Task Comment"]
		}},
		"/task/count": {
			"post": {
				"summary": "Get List Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/TaskQueryDto"},
					"examples": {
						"example-1": {
							"summary": "POST `/task` Request Body 1",
							"value": {
								"assigneeIn": "anAssignee,anotherAssignee",
								"taskVariables": [
									{
										"name": "varName",
										"value": "varValue",
										"operator": "eq"
									},
									{
										"name": "anotherVarName",
										"value": 30,
										"operator": "neq"
									}
								],
								"sorting": [
									{
										"sortOrder": "asc",
										"sortBy": "dueDate"
									},
									{
										"sortOrder": "desc",
										"sortBy": "processVariable",
										"parameters": {
											"variable": "orderId",
											"type": "String"
										}
									}
								],
								"processInstanceBusinessKeyIn": "aBusinessKey,anotherBusinessKey",
								"priority": 10
							}
						},
						"example-2": {
							"summary": "POST `/task` Request Body 2",
							"description": "Logical query: assignee = \"John Munda\" AND (name = \"Approve Invoice\" OR priority = 5) AND (suspended = false OR taskDefinitionKey = \"approveInvoice\")",
							"value": {
								"orQueries": [
									{
										"name": "Approve Invoice",
										"priority": 5
									},
									{
										"taskDefinitionKey": "approveInvoice",
										"suspended": false
									}
								],
								"assignee": "John Munda"
							}
						}
					}
				}}},
				"operationId": "queryTasksCount",
				"description": "Retrieves the number of tasks that fulfill the given filter. Corresponds to the size\nof the result set of the [Get Tasks (POST)](https://docs.camunda.org/manual/7.19/reference/rest/task/post-query/)\nmethod and takes the same parameters.\n\n**Security Consideration**:\nThere are several parameters (such as `assigneeExpression`) for specifying an EL\nexpression. These are disabled by default to prevent remote code execution. See the\nsection on\n[security considerations for custom code](https://docs.camunda.org/manual/7.19/user-guide/process-engine/securing-custom-code/)\nin the user guide for details.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Task"]
			},
			"get": {
				"summary": "Get List Count",
				"operationId": "getTasksCount",
				"description": "Retrieves the number of tasks that fulfill a provided filter. Corresponds to the size\nof the result set when using the [Get Tasks](https://docs.camunda.org/manual/7.19/reference/rest/task/) method.\n\n**Security Consideration:** There are several query parameters (such as\nassigneeExpression) for specifying an EL expression. These are disabled by default to\nprevent remote code execution. See the section on\n[security considerations](https://docs.camunda.org/manual/7.19/user-guide/process-engine/securing-custom-code/)\nfor custom code in the user guide for details.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskId",
						"description": "Restrict to task with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskIdIn",
						"description": "Restrict to tasks with any of the given ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Restrict to tasks that belong to process instances with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIdIn",
						"description": "Restrict to tasks that belong to process instances with the given ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKey",
						"description": "Restrict to tasks that belong to process instances with the given business key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyExpression",
						"description": "Restrict to tasks that belong to process instances with the given business key which \nis described by an expression. See the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyIn",
						"description": "Restrict to tasks that belong to process instances with one of the give business keys. \nThe keys need to be in a comma-separated list."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyLike",
						"description": "Restrict to tasks that have a process instance business key that has the parameter \nvalue as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyLikeExpression",
						"description": "Restrict to tasks that have a process instance business key that has the parameter \nvalue as a substring and is described by an expression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Restrict to tasks that belong to a process definition with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Restrict to tasks that belong to a process definition with the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKeyIn",
						"description": "Restrict to tasks that belong to a process definition with one of the given keys. The \nkeys need to be in a comma-separated list."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionName",
						"description": "Restrict to tasks that belong to a process definition with the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionNameLike",
						"description": "Restrict to tasks that have a process definition name that has the parameter value as \na substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Restrict to tasks that belong to an execution with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Restrict to tasks that belong to case instances with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceBusinessKey",
						"description": "Restrict to tasks that belong to case instances with the given business key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceBusinessKeyLike",
						"description": "Restrict to tasks that have a case instance business key that has the parameter value \nas a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionId",
						"description": "Restrict to tasks that belong to a case definition with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionKey",
						"description": "Restrict to tasks that belong to a case definition with the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionName",
						"description": "Restrict to tasks that belong to a case definition with the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionNameLike",
						"description": "Restrict to tasks that have a case definition name that has the parameter value as a \nsubstring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseExecutionId",
						"description": "Restrict to tasks that belong to a case execution with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceIdIn",
						"description": "Only include tasks which belong to one of the passed and comma-separated activity \ninstance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include tasks which belong to one of the passed and comma-separated \ntenant ids."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include tasks which belong to no tenant. Value may only be `true`, \nas `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assignee",
						"description": "Restrict to tasks that the given user is assigned to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assigneeExpression",
						"description": "Restrict to tasks that the user described by the given expression is assigned to. \nSee the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assigneeLike",
						"description": "Restrict to tasks that have an assignee that has the parameter \nvalue as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assigneeLikeExpression",
						"description": "Restrict to tasks that have an assignee that has the parameter value described by the \ngiven expression as a substring. See the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assigneeIn",
						"description": "Only include tasks which are assigned to one of the passed and \ncomma-separated user ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assigneeNotIn",
						"description": "Only include tasks which are not assigned to one of the passed and\ncomma-separated user ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "owner",
						"description": "Restrict to tasks that the given user owns."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "ownerExpression",
						"description": "Restrict to tasks that the user described by the given expression owns. See the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateGroup",
						"description": "Only include tasks that are offered to the given group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateGroupExpression",
						"description": "Only include tasks that are offered to the group described by the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateUser",
						"description": "Only include tasks that are offered to the given user or to one of his groups."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateUserExpression",
						"description": "Only include tasks that are offered to the user described by the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "includeAssignedTasks",
						"description": "Also include tasks that are assigned to users in candidate queries. Default is to only \ninclude tasks that are not assigned to any user if you query by candidate user or\ngroup(s)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "involvedUser",
						"description": "Only include tasks that the given user is involved in. A user is involved in a task if \nan identity link exists between task and user (e.g., the user is the assignee)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "involvedUserExpression",
						"description": "Only include tasks that the user described by the given expression is involved in.\nA user is involved in a task if an identity link exists between task and user\n(e.g., the user is the assignee). See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "assigned",
						"description": "If set to `true`, restricts the query to all tasks that are assigned."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "unassigned",
						"description": "If set to `true`, restricts the query to all tasks that are unassigned."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDefinitionKey",
						"description": "Restrict to tasks that have the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDefinitionKeyIn",
						"description": "Restrict to tasks that have one of the given keys. The keys need to be in a\ncomma-separated list."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDefinitionKeyLike",
						"description": "Restrict to tasks that have a key that has the parameter value as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "name",
						"description": "Restrict to tasks that have the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "nameNotEqual",
						"description": "Restrict to tasks that do not have the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "nameLike",
						"description": "Restrict to tasks that have a name with the given parameter value as substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "nameNotLike",
						"description": "Restrict to tasks that do not have a name with the given parameter\nvalue as substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "description",
						"description": "Restrict to tasks that have the given description."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "descriptionLike",
						"description": "Restrict to tasks that have a description that has the parameter\nvalue as a substring."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "priority",
						"description": "Restrict to tasks that have the given priority."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxPriority",
						"description": "Restrict to tasks that have a lower or equal priority."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "minPriority",
						"description": "Restrict to tasks that have a higher or equal priority."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueDate",
						"description": "Restrict to tasks that are due on the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.546+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueDateExpression",
						"description": "Restrict to tasks that are due on the date described by the given expression. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueAfter",
						"description": "Restrict to tasks that are due after the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.435+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueAfterExpression",
						"description": "Restrict to tasks that are due after the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueBefore",
						"description": "Restrict to tasks that are due before the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.243+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueBeforeExpression",
						"description": "Restrict to tasks that are due before the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withoutDueDate",
						"description": "Only include tasks which have no due date. Value may only be `true`, \nas `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpDate",
						"description": "Restrict to tasks that have a followUp date on the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date\nmust have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.342+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpDateExpression",
						"description": "Restrict to tasks that have a followUp date on the date described by the given\nexpression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpAfter",
						"description": "Restrict to tasks that have a followUp date after the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the\ndate must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.542+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpAfterExpression",
						"description": "Restrict to tasks that have a followUp date after the date described by the given\nexpression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpBefore",
						"description": "Restrict to tasks that have a followUp date before the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the\ndate must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.234+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpBeforeExpression",
						"description": "Restrict to tasks that have a followUp date before the date described by the given\nexpression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpBeforeOrNotExistent",
						"description": "Restrict to tasks that have no followUp date or a followUp date before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The\ntypical use case is to query all `active` tasks for a user for a given date."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpBeforeOrNotExistentExpression",
						"description": "Restrict to tasks that have no followUp date or a followUp date before the date\ndescribed by the given expression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdOn",
						"description": "Restrict to tasks that were created on the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdOnExpression",
						"description": "Restrict to tasks that were created on the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdAfter",
						"description": "Restrict to tasks that were created after the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdAfterExpression",
						"description": "Restrict to tasks that were created after the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdBefore",
						"description": "Restrict to tasks that were created before the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdBeforeExpression",
						"description": "Restrict to tasks that were created before the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "updatedAfter",
						"description": "Restrict to tasks that were updated after the given date. Every action that fires \na [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must\nhave the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "updatedAfterExpression",
						"description": "Restrict to tasks that were updated after the date described by the given expression. Every action that fires \na [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"PENDING",
								"RESOLVED"
							]
						},
						"in": "query",
						"name": "delegationState",
						"description": "Restrict to tasks that are in the given delegation state. Valid values are\n`PENDING` and `RESOLVED`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateGroups",
						"description": "Restrict to tasks that are offered to any of the given candidate groups. Takes a\ncomma-separated list of group names, so for example `developers,support,sales`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateGroupsExpression",
						"description": "Restrict to tasks that are offered to any of the candidate groups described by the\ngiven expression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to\n`java.util.List` of Strings."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withCandidateGroups",
						"description": "Only include tasks which have a candidate group. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withoutCandidateGroups",
						"description": "Only include tasks which have no candidate group. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withCandidateUsers",
						"description": "Only include tasks which have a candidate user. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withoutCandidateUsers",
						"description": "Only include tasks which have no candidate users. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "active",
						"description": "Only include active tasks. Value may only be `true`, as `false`\nis the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended tasks. Value may only be `true`, as\n`false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskVariables",
						"description": "Only include tasks that have variables with certain values. Variable filtering\nexpressions are comma-separated and are structured as follows:\n\nA valid parameter value has the form `key_operator_value`. `key` is the variable name,\n`operator` is the comparison operator to be used and `value` the variable value.\n\n**Note**: Values are always treated as String objects on server side.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processVariables",
						"description": "Only include tasks that belong to process instances that have variables with certain \nvalues. Variable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`. `key` is the variable name,\n`operator` is the comparison operator to be used and `value` the variable value.\n\n**Note**: Values are always treated as String objects on server side.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`;\n`notLike`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceVariables",
						"description": "Only include tasks that belong to case instances that have variables with certain\nvalues. Variable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`. `key` is the variable name,\n`operator` is the comparison operator to be used and `value` the variable value.\n\n**Note**: Values are always treated as String objects on server side.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match all variable names in this query case-insensitively. If set\n`variableName` and `variablename` are treated as equal."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match all variable values in this query case-insensitively. If set\n`variableValue` and `variablevalue` are treated as equal."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "parentTaskId",
						"description": "Restrict query to all tasks that are sub tasks of the given task. Takes a task id."
					}
				],
				"tags": ["Task"]
			}
		},
		"/process-instance/variables-async": {"post": {
			"summary": "Set Variables Async (POST)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SetVariablesAsyncDto"},
				"examples": {"example-1": {
					"summary": "POST /process-instance/variables-async",
					"description": "Set variables to process instances in a batch",
					"value": {
						"variables": {"myVariableName": {"value": "myStringValue"}},
						"processInstanceQuery": {"processDefinitionKey": "my-process-definition-key"},
						"processInstanceIds": ["b4d2ad98-7240-11e9-98b7-be5e0f7575b7"]
					}
				}}
			}}},
			"operationId": "setVariablesAsyncOperation",
			"description": "Update or create runtime process variables in the root scope of process instances.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"value": {
								"monitorJobDefinitionId": "120b568f-724a-11e9-98b7-be5e0f7575b7",
								"createUserId": null,
								"invocationsPerBatchJob": 1,
								"totalJobs": 12,
								"tenantId": "accounting",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "120b5690-724a-11e9-98b7-be5e0f7575b7",
								"id": "120b568d-724a-11e9-98b7-be5e0f7575b7",
								"type": "set-variables",
								"batchJobDefinitionId": "120b568e-724a-11e9-98b7-be5e0f7575b7",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "Bad Request\n* The variable value or type is invalid, for example if the value could not be parsed to an Integer value or\nthe passed variable type is not supported\n* If none of `processInstanceIds`, `processInstanceQuery` and `historicProcessInstanceQuery` is given\n* If no or an empty array of `variables` is given\n* If no process instance ids where found\n* If a transient variable is set\n* If the engine config flag `javaSerializationFormatEnabled` is `false` and a Java serialized variable is given",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "Returned if the user is not allowed to create the batch.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the\nerror response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				}
			},
			"tags": ["Process Instance"]
		}},
		"/user/create": {"post": {
			"summary": "Create",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/UserDto"},
				"examples": {"example-1": {
					"summary": "POST /user/create",
					"value": {
						"credentials": {"password": "s3cret"},
						"profile": {
							"firstName": "John",
							"lastName": "Doe",
							"id": "jonny1",
							"email": "anEmailAddress"
						}
					}
				}}
			}}},
			"operationId": "createUser",
			"description": "Create a new user.",
			"responses": {"204": {"description": "Request successful."}},
			"tags": ["User"]
		}},
		"/history/detail/count": {"get": {
			"summary": "Get Historic Detail Count",
			"operationId": "getHistoricDetailsCount",
			"description": "Queries for the number of historic details that fulfill the given parameters.\nTakes the same parameters as the [Get Historic\nDetails](https://docs.camunda.org/manual/7.19/reference/rest/history/detail/get-detail-query/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/history/detail/count?variableName=my_variable`",
							"description": "GET `/history/detail/count?variableName=my_variable`",
							"value": {"count": 3}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Filter by process instance id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceIdIn",
					"description": "Only include historic details which belong to one of the passed comma-separated process instance ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "executionId",
					"description": "Filter by execution id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "taskId",
					"description": "Filter by task id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityInstanceId",
					"description": "Filter by activity instance id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseInstanceId",
					"description": "Filter by case instance id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseExecutionId",
					"description": "Filter by case execution id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "variableInstanceId",
					"description": "Filter by variable instance id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "variableTypeIn",
					"description": "Only include historic details where the variable updates belong to one of the passed comma-separated\nlist of variable types. A list of all supported variable types can be found\n[here](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#supported-variable-values).\n**Note:** All non-primitive variables are associated with the type `serializable`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include historic details that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "userOperationId",
					"description": "Filter by a user operation id."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "formFields",
					"description": "Only include `HistoricFormFields`. Value may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "variableUpdates",
					"description": "Only include `HistoricVariableUpdates`. Value may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "excludeTaskDetails",
					"description": "Excludes all task-related `HistoricDetails`, so only items which have no task id set will be selected.\nWhen this parameter is used together with `taskId`, this call is ignored and task details are not excluded.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "initial",
					"description": "Restrict to historic variable updates that contain only initial variable values.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "occurredBefore",
					"description": "Restrict to historic details that occured before the given date (including the date).\nDefault [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "occurredAfter",
					"description": "Restrict to historic details that occured after the given date (including the date).\nDefault [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200."
				}
			],
			"tags": ["Historic Detail"]
		}},
		"/process-definition/{id}/static-called-process-definitions": {"get": {
			"summary": "Get Static Called Process Definitions",
			"operationId": "getStaticCalledProcessDefinitions",
			"description": "For the given process, returns a list of called process definitions corresponding\nto\nthe `CalledProcessDefinition` interface in the engine. The list\ncontains all process definitions\nthat are referenced statically by call activities in the given\nprocess. This endpoint does not\nresolve process definitions that are referenced with expressions. Each\ncalled process definition\ncontains a list of call activity ids, which specifies the call\nactivities that are calling that\nprocess. This endpoint does not resolve references to case\ndefinitions.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/CalledProcessDefinitionDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/process-definition/aProcessDefinitionId/static-called-process-definitions`",
							"description": "GET `/process-definition/aProcessDefinitionId/static-called-process-definitions`",
							"value": [
								{
									"resource": "called-process.bpmn",
									"startableInTasklist": true,
									"description": null,
									"historyTimeToLive": null,
									"versionTag": null,
									"version": 1,
									"suspended": false,
									"diagram": null,
									"callingProcessDefinitionId": "aProcessDefinitionId",
									"calledFromActivityIds": ["aCallActivityId"],
									"deploymentId": "1baa3baf-f8f1-11eb-9344-0e0bbdd53e42",
									"name": "ACalledProcess",
									"tenantId": null,
									"id": "ACalledProcess:1:1bbd4e83-f8f1-11eb-9344",
									"category": "http://www.omg.org/spec/BPMN/20100524/MODEL",
									"key": "ACalledProcess"
								},
								{
									"resource": "another-called-process.bpmn",
									"startableInTasklist": true,
									"description": null,
									"historyTimeToLive": null,
									"versionTag": null,
									"version": 2,
									"suspended": false,
									"diagram": null,
									"callingProcessDefinitionId": "aProcessDefinitionId",
									"calledFromActivityIds": [
										"aSecondCallActivityId",
										"aThirdCallActivityId"
									],
									"deploymentId": "1baa3baf-f8f1-11eb-9344-0e0bbdd53e42",
									"name": "AnotherCalledProcess",
									"tenantId": null,
									"id": "AnotherCalledProcess:2:1bc2f3d5-f8f1-11eb-9344",
									"category": "http://www.omg.org/spec/BPMN/20100524/MODEL",
									"key": "AnotherCalledProcess"
								}
							]
						}}
					}}
				},
				"404": {
					"description": "Process definition with given key does not exist.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/task/{id}/comment": {"get": {
			"summary": "Get List",
			"operationId": "getComments",
			"description": "Gets the comments for a task by id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/CommentDto"}
						},
						"examples": {"example-1": {
							"summary": "GET /task/aTaskId/comment",
							"value": [
								{
									"processInstanceId": "96dc383f-23eb-11e6-8e4a-f6aefe19b687",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "commentId",
									"time": "2013-01-02T21:37:03.764+0200",
									"message": "message",
									"userId": "userId",
									"taskId": "aTaskId",
									"removalTime": "2018-02-10T14:33:19.000+0200"
								},
								{
									"processInstanceId": "96dc383f-23eb-11e6-8e4a-f6aefe19b687",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "anotherCommentId",
									"time": "2013-02-23T20:37:43.975+0200",
									"message": "anotherMessage",
									"userId": "anotherUserId",
									"taskId": "aTaskId",
									"removalTime": "2018-02-10T14:33:19.000+0200"
								},
								{
									"processInstanceId": "96dc383f-23eb-11e6-8e4a-f6aefe19b687",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "yetAnotherCommentId",
									"time": "2013-04-21T10:15:23.764+0200",
									"message": "yetAnotherMessage",
									"userId": "yetAnotherUserId",
									"taskId": "aTaskId",
									"removalTime": "2018-02-10T14:33:19.000+0200"
								}
							]
						}}
					}}
				},
				"404": {
					"description": "No task exists for the given task id. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to retrieve the comments for.",
				"required": true
			}],
			"tags": ["Task Comment"]
		}},
		"/deployment/count": {"get": {
			"summary": "Get List Count",
			"operationId": "getDeploymentsCount",
			"description": "Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the\n[Get Deployments](https://docs.camunda.org/manual/7.19/reference/rest/deployment/get-query/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/deployment/count?name=deploymentName`",
							"value": {"count": 1}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example, if an invalid operator for variable\ncomparison is used. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "id",
					"description": "Filter by deployment id"
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "name",
					"description": "Filter by the deployment name. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "nameLike",
					"description": "Filter by the deployment name that the parameter is a substring of. The parameter can include the\nwildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains\n(`%`name`%`)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "source",
					"description": "Filter by the deployment source."
				},
				{
					"schema": {
						"default": false,
						"type": "boolean"
					},
					"in": "query",
					"name": "withoutSource",
					"description": "Filter by the deployment source whereby source is equal to `null`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids."
				},
				{
					"schema": {
						"default": false,
						"type": "boolean"
					},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include deployments which belong to no tenant. Value may only be `true`, as `false` is the default\nbehavior."
				},
				{
					"schema": {
						"default": false,
						"type": "boolean"
					},
					"in": "query",
					"name": "includeDeploymentsWithoutTenantId",
					"description": "Include deployments which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may\nonly be `true`, as `false` is the default behavior."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "after",
					"description": "Restricts to all deployments after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "before",
					"description": "Restricts to all deployments before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				}
			],
			"tags": ["Deployment"]
		}},
		"/history/cleanup/configuration": {"get": {
			"summary": "Get History Cleanup Configuration",
			"operationId": "getHistoryCleanupConfiguration",
			"description": "Retrieves history cleanup batch window configuration (See\n[History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)).",
			"responses": {"200": {
				"description": "Request successful.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoryCleanupConfigurationDto"},
					"examples": {"example-1": {
						"summary": "GET `/history/cleanup/configuration`",
						"description": "GET `/history/cleanup/configuration`",
						"value": {
							"batchWindowEndTime": "2017-09-12T02:00:00.000+0200",
							"batchWindowStartTime": "2017-09-11T23:59:00.000+0200",
							"enabled": "true"
						}
					}}
				}}
			}},
			"tags": ["History Cleanup"]
		}},
		"/filter": {
			"get": {
				"summary": "Get Filters",
				"operationId": "getFilterList",
				"description": "Queries for a list of filters using a list of parameters. The size of the result\nset can be retrieved\nby using the [Get Filter Count](https://docs.camunda.org/manual/7.19/reference/rest/filter/get-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/FilterDto"}
							},
							"examples": {
								"example-1": {
									"summary": "request",
									"description": "GET `/filter?resourceType=Task`",
									"value": [
										{
											"owner": "jonny1",
											"query": {"assignee": "jonny1"},
											"name": "My Filter",
											"id": "aFilter",
											"properties": {
												"color": "#58FA58",
												"description": "Filters assigned to me"
											},
											"resourceType": "Task"
										},
										{
											"owner": "demo",
											"query": {"candidateGroup": "accountant"},
											"name": "Accountants Filter",
											"id": "anotherFilter",
											"properties": {
												"description": "Filters assigned to me",
												"priority": 10
											},
											"resourceType": "Task"
										}
									]
								},
								"example-2": {
									"summary": "request with itemCount",
									"description": "GET `/filter?resourceType=Task&itemCount=true`",
									"value": [
										{
											"owner": "jonny1",
											"query": {"assignee": "jonny1"},
											"name": "My Filter",
											"id": "aFilter",
											"properties": {
												"color": "#58FA58",
												"description": "Filters assigned to me"
											},
											"resourceType": "Task",
											"itemCount": 13
										},
										{
											"owner": "demo",
											"query": {"candidateGroup": "accountant"},
											"name": "Accountants Filter",
											"id": "anotherFilter",
											"properties": {
												"description": "Filters assigned to me",
												"priority": 10
											},
											"resourceType": "Task",
											"itemCount": 42
										}
									]
								}
							}
						}}
					},
					"400": {
						"description": "\nReturned if some of the query parameters are invalid, for example if\na `sortOrder`\nparameter is supplied, but no `sortBy` is specified. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "filterId",
						"description": "Filter by the id of the filter."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "resourceType",
						"description": "Filter by the resource type of the filter, e.g., `Task`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "name",
						"description": "Filter by the name of the filter."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "nameLike",
						"description": "Filter by the name that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "owner",
						"description": "Filter by the user id of the owner of the filter."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "itemCount",
						"description": "If set to `true`, each filter result will contain an `itemCount` property\nwith the number of items matched by the filter itself."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"filterId",
								"resourceType",
								"name",
								"owner"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Filter"]
			},
			"options": {
				"summary": "Filter Resource Options",
				"operationId": "filterResourceOptions",
				"description": "The OPTIONS request allows you to check for the set of available operations \nthat the currently authenticated user can perform on the `/filter` resource.\nWhether the user can perform an operation or not may depend on various\nfactors, including the users authorizations to interact with this\nresource and the internal configuration of the process engine.",
				"responses": {"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
						"examples": {"example-1": {
							"summary": "request",
							"description": "OPTIONS `/filter`",
							"value": {"links": [
								{
									"method": "GET",
									"rel": "list",
									"href": "http://localhost:8080/engine-rest/filter"
								},
								{
									"method": "GET",
									"rel": "count",
									"href": "http://localhost:8080/engine-rest/filter/count"
								},
								{
									"method": "POST",
									"rel": "create",
									"href": "http://localhost:8080/engine-rest/filter/create"
								}
							]}
						}}
					}}
				}},
				"tags": ["Filter"]
			}
		},
		"/tenant/count": {"get": {
			"summary": "Get Tenant Count",
			"operationId": "getTenantCount",
			"description": "Query for tenants using a list of parameters and retrieves the count.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "GET `/tenant/count?name=tenantOne`",
							"value": {"count": 1}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "id",
					"description": "Filter by the id of the tenant."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "name",
					"description": "Filter by the name of the tenant."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "nameLike",
					"description": "Filter by the name that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "userMember",
					"description": "Select only tenants where the given user is a member of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "groupMember",
					"description": "Select only tenants where the given group is a member of."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includingGroupsOfUser",
					"description": "Select only tenants where the user or one of his groups is a member of.\nCan only be used in combination with the `userMember` parameter. Value may only be `true`,\nas `false` is the default behavior."
				}
			],
			"tags": ["Tenant"]
		}},
		"/deployment/registered": {"get": {
			"summary": "Get Registered Deployments",
			"operationId": "getRegisteredDeployments",
			"description": "Queries the registered deployment IDs for the current application.",
			"responses": {"200": {
				"description": "Request successful.",
				"content": {"application/json": {
					"schema": {
						"type": "array",
						"items": {"type": "string"}
					},
					"examples": {"example-1": {
						"summary": "Status 200 Response",
						"description": "The Response content of a status 200",
						"value": [
							"deploymentId1",
							"deploymentId2",
							"deploymentId3"
						]
					}}
				}}
			}},
			"tags": ["Deployment"]
		}},
		"/metrics/{metrics-name}/sum": {"get": {
			"summary": "Get Sum",
			"operationId": "getMetrics",
			"description": "Retrieves the `sum` (count) for a given metric.",
			"responses": {"200": {
				"description": "Request successful.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/MetricsResultDto"},
					"examples": {"example-1": {
						"summary": "GET /metrics/activity-instance-end/sum?startDate=2015-01-01T00:00:00.000%2b0200",
						"value": {"result": 4342343241}
					}}
				}}
			}},
			"parameters": [
				{
					"schema": {
						"type": "string",
						"enum": [
							"activity-instance-start",
							"activity-instance-end",
							"decision-instances",
							"flow-node-instances",
							"job-acquisition-attempt",
							"job-acquired-success",
							"job-acquired-failure",
							"job-execution-rejected",
							"job-successful",
							"job-failed",
							"job-locked-exclusive",
							"executed-decision-elements",
							"history-cleanup-removed-process-instances",
							"history-cleanup-removed-case-instances",
							"history-cleanup-removed-decision-instances",
							"history-cleanup-removed-batch-operations",
							"history-cleanup-removed-task-metrics",
							"unique-task-workers",
							"process-instances",
							"task-users"
						]
					},
					"in": "path",
					"name": "metrics-name",
					"description": "The name of the metric.",
					"required": true
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startDate",
					"description": "The start date (inclusive)."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "endDate",
					"description": "The end date (exclusive)."
				}
			],
			"tags": ["Metrics"]
		}},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/diagram": {"get": {
			"summary": "Get Diagram",
			"operationId": "getProcessDefinitionDiagramByKeyAndTenantId",
			"description": "Retrieves the diagram for the latest version of the process definition for tenant.\n\nIf the process definition's deployment contains an image resource with the same file name\nas the process definition, the deployed image will be returned by the Get Diagram endpoint.\nExample: `someProcess.bpmn` and `someProcess.png`.\nSupported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.",
			"responses": {
				"200": {
					"description": "Request successful. The image diagram of this process.",
					"content": {
						"application/octet-stream": {"schema": {
							"format": "binary",
							"description": "defaults to `application/octet-stream` if the file suffix is unknown",
							"type": "string"
						}},
						"*/*": {"schema": {
							"format": "binary",
							"description": "Files with MIME type information image/png, image/gif, ... ",
							"type": "string"
						}}
					}
				},
				"204": {"description": "The process definition doesn't have an associated diagram."},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definition belongs to.",
					"required": true
				}
			],
			"tags": ["Process Definition"]
		}},
		"/incident/count": {"get": {
			"summary": "Get List Count",
			"operationId": "getIncidentsCount",
			"description": "Queries for the number of incidents that fulfill given parameters. Takes the same parameters as the\n[Get Incidents](https://docs.camunda.org/manual/7.19/reference/rest/incident/get-query/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/incident/count?processInstanceId=aProcInstId`",
							"value": {"count": 2}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error\nresponse format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentId",
					"description": "Restricts to incidents that have the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentType",
					"description": "Restricts to incidents that belong to the given incident type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types) for a list of incident\ntypes."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessage",
					"description": "Restricts to incidents that have the given incident message."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessageLike",
					"description": "Restricts to incidents that incidents message is a substring of the given value. The string can include\nthe wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or\ncontains (`%string%`)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Restricts to incidents that belong to a process definition with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKeyIn",
					"description": "Restricts to incidents that belong to a process definition with the given keys. Must be a\ncomma-separated list."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Restricts to incidents that belong to a process instance with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "executionId",
					"description": "Restricts to incidents that belong to an execution with the given id."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "incidentTimestampBefore",
					"description": "Restricts to incidents that have an incidentTimestamp date before the given date. \nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date\nmust have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "incidentTimestampAfter",
					"description": "Restricts to incidents that have an incidentTimestamp date after the given date. \nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date\nmust have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityId",
					"description": "Restricts to incidents that belong to an activity with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "failedActivityId",
					"description": "Restricts to incidents that were created due to the failure of an activity with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "causeIncidentId",
					"description": "Restricts to incidents that have the given incident id as cause incident."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "rootCauseIncidentId",
					"description": "Restricts to incidents that have the given incident id as root cause incident."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "configuration",
					"description": "Restricts to incidents that have the given parameter set as configuration."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Restricts to incidents that have one of the given comma-separated tenant ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "jobDefinitionIdIn",
					"description": "Restricts to incidents that have one of the given comma-separated job definition ids."
				}
			],
			"tags": ["Incident"]
		}},
		"/external-task/{id}/complete": {"post": {
			"summary": "Complete",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/CompleteExternalTaskDto"},
				"examples": {"example-1": {
					"summary": "POST /external-task/anId/complete",
					"value": {
						"workerId": "aWorker",
						"variables": {
							"aVariable": {"value": "aStringValue"},
							"anotherVariable": {"value": 42},
							"aThirdVariable": {"value": true}
						},
						"localVariables": {"aLocalVariable": {"value": "aStringValue"}}
					}
				}}
			}}},
			"operationId": "completeExternalTaskResource",
			"description": "Completes an external task by id and updates process variables.",
			"responses": {
				"400": {
					"description": "Returned if the task's most recent lock was not acquired by the provided worker. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "Returned if the corresponding process instance could not be resumed successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,\ne.g., due to a caught BPMN boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to complete.",
				"required": true
			}],
			"tags": ["External Task"]
		}},
		"/history/external-task-log/count": {
			"post": {
				"summary": "Get External Task Log Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricExternalTaskLogQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/external-task-log/count`",
						"value": {"externalTaskId": "anExternalTaskId"}
					}}
				}}},
				"operationId": "queryHistoricExternalTaskLogsCount",
				"description": "Queries for the number of historic external task logs that fulfill the given\nparameters.\nThis method takes the same message body as the\n[Get External Task Logs (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/external-task-log/post-external-task-log-query/)\nmethod and therefore it is slightly more powerful than the\n[Get External Task Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/external-task-log/get-external-task-log-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "POST `/history/external-task-log/count`",
								"description": "POST `/history/external-task-log/count`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Historic External Task Log"]
			},
			"get": {
				"summary": "Get External Task Log Count",
				"operationId": "getHistoricExternalTaskLogsCount",
				"description": "Queries for the number of historic external task logs that fulfill the given\nparameters.\nTakes the same parameters as the\n[Get External Task Logs](https://docs.camunda.org/manual/7.19/reference/rest/history/external-task-log/get-external-task-log-query/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "GET `/history/external-task-log/count?externalTaskId=anExternalTaskId`",
								"description": "GET `/history/external-task-log/count?externalTaskId=anExternalTaskId`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "logId",
						"description": "Filter by historic external task log id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "externalTaskId",
						"description": "Filter by external task id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "topicName",
						"description": "Filter by an external task topic."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "workerId",
						"description": "Filter by the id of the worker that the task was most recently locked by."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "errorMessage",
						"description": "Filter by external task exception message."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityIdIn",
						"description": "Only include historic external task logs which belong to one of the passed activity ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceIdIn",
						"description": "Only include historic external task logs which belong to one of the passed activity\ninstance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionIdIn",
						"description": "Only include historic external task logs which belong to one of the passed execution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by process definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by process definition key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include historic external task log entries which belong to one of the passed and\ncomma-separated tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic external task log entries that belong to no tenant. Value may only\nbe `true`, as `false` is the default behavior."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityLowerThanOrEquals",
						"description": "Only include logs for which the associated external task had a priority lower than or\nequal to the given value. Value must be a valid `long` value."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityHigherThanOrEquals",
						"description": "Only include logs for which the associated external task had a priority higher than or\nequal to the given value. Value must be a valid `long` value."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "creationLog",
						"description": "Only include creation logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "failureLog",
						"description": "Only include failure logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "successLog",
						"description": "Only include success logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deletionLog",
						"description": "Only include deletion logs. Value may only be `true`, as `false` is the default behavior."
					}
				],
				"tags": ["Historic External Task Log"]
			}
		},
		"/external-task/{id}/errorDetails": {"get": {
			"summary": "Get Error Details",
			"operationId": "getExternalTaskErrorDetails",
			"description": "Retrieves the error details in the context of a running external task by id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"text/plain": {
						"schema": {
							"description": "The error details for the external task.",
							"type": "string"
						},
						"examples": {"example-1": {"value": "org.apache.ibatis.jdbc.RuntimeSqlException: org.apache.ibatis.jdbc.RuntimeSqlException: test cause\n                  at org.camunda.bpm.engine.test.api.externaltask.ExternalTaskServiceTest.testHandleFailureWithErrorDetails(ExternalTaskServiceTest.java:1424)\n                  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n                  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n                  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n                "}}
					}}
				},
				"500": {
					"description": "An external task with the given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. In case the external task has no error details."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the external task for which the error details should be retrieved.",
				"required": true
			}],
			"tags": ["External Task"]
		}},
		"/process-instance/message-async": {"post": {
			"summary": "Correlate Message Async (POST)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/CorrelationMessageAsyncDto"},
				"examples": {"example-1": {
					"summary": "POST /process-instance/message-async",
					"description": "Correlate a message to process instances in a batch",
					"value": {
						"messageName": "a-message-name",
						"variables": {"myVariableName": {"value": "myStringValue"}},
						"processInstanceQuery": {"processDefinitionKey": "my-process-definition-key"},
						"processInstanceIds": ["b4d2ad98-7240-11e9-98b7-be5e0f7575b7"]
					}
				}}
			}}},
			"operationId": "correlateMessageAsyncOperation",
			"description": "Correlates a message asynchronously to executions that are waiting for this message. \nMessages will not be correlated to process definition-level start message events to start process instances.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"value": {
								"monitorJobDefinitionId": "120b568f-724a-11e9-98b7-be5e0f7575b7",
								"createUserId": null,
								"invocationsPerBatchJob": 1,
								"totalJobs": 12,
								"tenantId": "accounting",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "120b5690-724a-11e9-98b7-be5e0f7575b7",
								"id": "120b568d-724a-11e9-98b7-be5e0f7575b7",
								"type": "correlate-message",
								"batchJobDefinitionId": "120b568e-724a-11e9-98b7-be5e0f7575b7",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "Bad Request\n* If none of `processInstanceIds`, `processInstanceQuery`, and `historicProcessInstanceQuery` is given\n* If no process instance ids where found",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "Returned if the user is not allowed to create the batch.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the\nerror response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				}
			},
			"tags": ["Process Instance"]
		}},
		"/process-instance/{id}/variables/{varName}": {
			"get": {
				"summary": "Get Process Variable",
				"operationId": "getProcessInstanceVariable",
				"description": "Retrieves a variable of a given process instance by id.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/VariableValueDto"},
							"examples": {
								"example-1": {
									"summary": "GET `/process-instance/aProcessInstanceId/variables/myObject123`",
									"value": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": {
											"prop2": "b",
											"prop1": "a"
										}
									}
								},
								"example-2": {
									"summary": "GET `/process-instance/aProcessInstanceId/variables/myObject123?deserializeValue=false`",
									"value": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": "ab"
									}
								}
							}
						}}
					},
					"400": {
						"description": "Bad Request\nVariable with given id does not exist.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the process instance to retrieve the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to retrieve.",
						"required": true
					},
					{
						"schema": {
							"default": true,
							"type": "boolean"
						},
						"in": "query",
						"name": "deserializeValue",
						"description": "Determines whether serializable variable values (typically variables that store custom Java objects)\nshould be deserialized on server side (default true).\n\nIf set to true, a serializable variable will be deserialized on server side and transformed to JSON\nusing [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.\nNote that this requires the Java classes of the variable value to be on the REST API's classpath.\n\nIf set to false, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string containing XML.\n\nNote: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false\nwhen developing web applications that are independent of the Java process applications deployed to the engine."
					}
				],
				"tags": ["Process Instance"]
			},
			"delete": {
				"summary": "Delete Process Variable",
				"operationId": "deleteProcessInstanceVariable",
				"description": "Deletes a variable of a process instance by id.",
				"responses": {"204": {"description": "Request successful."}},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the process instance to delete the variable from.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to delete.",
						"required": true
					}
				],
				"tags": ["Process Instance"]
			},
			"put": {
				"summary": "Update Process Variable",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/VariableValueDto"},
					"examples": {
						"example-1": {
							"summary": "PUT /process-instance/aProcessInstanceId/variables/aVarName",
							"description": "Status 204. No content.",
							"value": {
								"type": "String",
								"value": "someValue"
							}
						},
						"example-2": {
							"summary": "PUT /process-instance/aProcessInstanceId/variables/aVarName",
							"description": "Status 204. No content.",
							"value": {
								"valueInfo": {
									"objectTypeName": "com.example.MyObject",
									"serializationDataFormat": "application/xml"
								},
								"type": "Object",
								"value": "ab"
							}
						}
					}
				}}},
				"operationId": "setProcessInstanceVariable",
				"description": "Sets a variable of a given process instance by id.",
				"responses": {
					"400": {
						"description": "Bad Request\nThe variable value or type is invalid, for example if the value could not be parsed to an Integer value or\nthe passed variable type is not supported.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the process instance to set the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to set.",
						"required": true
					}
				],
				"tags": ["Process Instance"]
			}
		},
		"/history/user-operation/{operationId}/clear-annotation": {"put": {
			"summary": "Clear Annotation of an User Operation Log (Historic)",
			"operationId": "clearAnnotationUserOperationLog",
			"description": "Clear the annotation which was previously set for auditing reasons.",
			"responses": {
				"400": {
					"description": "Returned if some of the request parameters are invalid, for example if the\n`operationId` path parameter value does not exists. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "operationId",
				"description": "The operation id of the operation log to be updated.",
				"required": true
			}],
			"tags": ["Historic User Operation Log"]
		}},
		"/process-definition/count": {"get": {
			"summary": "Get List Count",
			"operationId": "getProcessDefinitionsCount",
			"description": "Requests the number of process definitions that fulfill the query criteria.\nTakes the same filtering parameters as the [Get Definitions](https://docs.camunda.org/manual/7.19/reference/rest/process-definition/get-query/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response of GET `/process-definition/count?keyLike=Key&version=47`",
							"value": {"count": 1}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Filter by process definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionIdIn",
					"description": "Filter by a comma-separated list of process definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "name",
					"description": "Filter by process definition name."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "nameLike",
					"description": "Filter by process definition names that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "deploymentId",
					"description": "Filter by the deployment the id belongs to."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "deployedAfter",
					"description": "Filter by the deploy time of the deployment the process definition belongs to.\nOnly selects process definitions that have been deployed after (exclusive) a specific time.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.546+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "deployedAt",
					"description": "Filter by the deploy time of the deployment the process definition belongs to.\nOnly selects process definitions that have been deployed at a specific time (exact match).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.546+0200`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "key",
					"description": "Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "keysIn",
					"description": "Filter by a comma-separated list of process definition keys."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "keyLike",
					"description": "Filter by process definition keys that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "category",
					"description": "Filter by process definition category. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "categoryLike",
					"description": "Filter by process definition categories that the parameter is a substring of."
				},
				{
					"schema": {
						"format": "int32",
						"type": "integer"
					},
					"in": "query",
					"name": "version",
					"description": "Filter by process definition version."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "latestVersion",
					"description": "Only include those process definitions that are latest versions.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceName",
					"description": "Filter by the name of the process definition resource. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceNameLike",
					"description": "Filter by names of those process definition resources that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "startableBy",
					"description": "Filter by a user name who is allowed to start the process."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "active",
					"description": "Only include active process definitions.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "suspended",
					"description": "Only include suspended process definitions.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentId",
					"description": "Filter by the incident id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentType",
					"description": "Filter by the incident type.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types)\nfor a list of incident types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessage",
					"description": "Filter by the incident message. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessageLike",
					"description": "Filter by the incident message that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids.\nA process definition must have one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include process definitions which belong to no tenant.\nValue may only be true, as false is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeProcessDefinitionsWithoutTenantId",
					"description": "Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "versionTag",
					"description": "Filter by the version tag."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "versionTagLike",
					"description": "Filter by the version tag that the parameter is a substring of."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutVersionTag",
					"description": "Only include process definitions without a `versionTag`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "startableInTasklist",
					"description": "Filter by process definitions which are startable in Tasklist.."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "notStartableInTasklist",
					"description": "Filter by process definitions which are not startable in Tasklist."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "startablePermissionCheck",
					"description": "Filter by process definitions which the user is allowed to start in Tasklist.\nIf the user doesn't have these permissions the result will be empty list.\nThe permissions are:\n* `CREATE` permission for all Process instances\n* `CREATE_INSTANCE` and `READ` permission on Process definition level"
				}
			],
			"tags": ["Process Definition"]
		}},
		"/process-definition/key/{key}/form-variables": {"get": {
			"summary": "Get Start Form Variables",
			"operationId": "getStartFormVariablesByKey",
			"description": "Retrieves the start form variables for the latest process definition which belongs to no tenant\n(only if they are defined via the \n[Generated Task Form](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms) approach).\nThe start form variables take form data specified on the start event into account.\nIf form fields are defined, the variable types and default values\nof the form fields are taken into account.",
			"responses": {
				"200": {
					"description": "Request successful. A JSON object containing a property for each variable returned.",
					"content": {"application/json": {
						"schema": {
							"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
							"type": "object"
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "GET `/process-definition/anId/form-variables`",
							"value": {
								"firstName": {
									"valueInfo": {},
									"type": "String",
									"value": "Jonny"
								},
								"amount": {
									"valueInfo": {},
									"type": "integer",
									"value": 5
								}
							}
						}}
					}}
				},
				"404": {
					"description": "The key is null or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "variableNames",
					"description": "A comma-separated list of variable names. Allows restricting the list of requested\nvariables to the variable names in the list. It is best practice to restrict the\nlist of variables to the variables actually required by the form in order to\nminimize fetching of data. If the query parameter is ommitted all variables are\nfetched. If the query parameter contains non-existent variable names, the variable\nnames are ignored."
				},
				{
					"schema": {
						"default": true,
						"type": "boolean"
					},
					"in": "query",
					"name": "deserializeValues",
					"description": "Determines whether serializable variable values (typically variables that store\ncustom Java objects) should be deserialized on server side (default true).\n\nIf set to true, a serializable variable will be deserialized on server side and\ntransformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean\nproperty introspection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to false, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string\ncontaining XML.\n\n**Note**: While true is the default value for reasons of backward compatibility, we\nrecommend setting this parameter to false when developing web applications that are\nindependent of the Java process applications deployed to the engine."
				}
			],
			"tags": ["Process Definition"]
		}},
		"/process-definition/{id}/restart": {"post": {
			"summary": "Restart Process Instance",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/RestartProcessInstanceDto"},
				"examples": {
					"example-1": {
						"summary": "Restarting one or more Process Instances with known processInstanceIds",
						"value": {
							"instructions": [{
								"activityId": "aUserTask",
								"type": "startAfterActivity"
							}],
							"withoutBusinessKey": true,
							"initialVariables": true,
							"processInstanceIds": [
								"aProcessInstance",
								"anotherProcessInstance"
							],
							"skipCustomListeners": true
						}
					},
					"example-2": {
						"summary": "Restarting one or more Process Instances using a historicProcessInstanceQuery",
						"value": {
							"instructions": [{
								"activityId": "aUserTask",
								"type": "startAfterActivity"
							}],
							"withoutBusinessKey": true,
							"initialVariables": true,
							"historicProcessInstanceQuery": {
								"processDefinitionId": "aProcessDefinitionId",
								"processInstanceBusinessKey": "businessKey"
							},
							"skipCustomListeners": true
						}
					}
				}
			}}},
			"operationId": "restartProcessInstance",
			"description": "Restarts process instances that were canceled or terminated synchronously.\nCan also restart completed process instances.\nIt will create a new instance using the original instance information.\nTo execute the restart asynchronously, use the\n[Restart Process Instance Async](https://docs.camunda.org/manual/7.19/reference/rest/process-definition/post-restart-process-instance-async/) method.\n\nFor more information about the difference between synchronous and asynchronous execution,\nplease refer to the related section of the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-instance-restart/#execution).",
			"responses": {
				"400": {
					"description": "In case following parameters are missing: `instructions`, `activityId` or `transitionId`,\n`processInstanceIds` or `historicProcessInstanceQuery`, an exception of type `InvalidRequestException` is returned. \nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition of the process instances to restart.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/variable-instance/count": {
			"post": {
				"summary": "Get Variable Instance Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/VariableInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/variable-instance/count`",
						"value": {
							"variableValues": [
								{
									"name": "amount",
									"value": "5",
									"operator": "gteq"
								},
								{
									"name": "amount",
									"value": 200,
									"operator": "lteq"
								}
							],
							"processInstanceIdIn": [
								"aProcessInstanceId",
								"anotherProcessInstanceId"
							]
						}
					}}
				}}},
				"operationId": "queryVariableInstancesCount",
				"description": "Query for the number of variable instances that fulfill given parameters. This\nmethod takes the same message body as the\n[Get Variable Instances POST](https://docs.camunda.org/manual/7.19/reference/rest/variable-\ninstance/post-query/) method and therefore it is slightly more\npowerful than the [Get Variable Instance\nCount](https://docs.camunda.org/manual/7.19/reference/rest/variable-instance/get-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"description": "POST `/variable-instance/count`",
								"value": {"count": 3}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if an invalid operator for variable\ncomparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Variable Instance"]
			},
			"get": {
				"summary": "Get Variable Instance Count",
				"operationId": "getVariableInstancesCount",
				"description": "Query for the number of variable instances that fulfill given parameters. Takes the\nsame parameters as the [Get Variable\nInstances](https://docs.camunda.org/manual/7.19/reference/rest/variable-instance/get-query/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"description": "GET `/variable-instance/count?processInstanceIdIn=aProcessInstanceId,anotherProcessInstanceId&variableValues=amount_gteq_5,amount_lteq_200`",
								"value": {"count": 3}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if an invalid operator for variable\ncomparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableName",
						"description": "Filter by variable instance name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableNameLike",
						"description": "Filter by the variable instance name. The parameter can include the wildcard `%` to\nexpress like-strategy such as: starts with (`%`name), ends with (name`%`) or\ncontains (`%`name`%`)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated\nprocess instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated\nexecution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated case instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseExecutionIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated case execution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated task\nids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "batchIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated\nbatch ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated\nactivity instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated\ntenant ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableValues",
						"description": "Only include variable instances that have the certain values.\nValue filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n\n**Note:** Values are always treated as `String` objects on server side.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to; `gt` -\ngreater than;\n`gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or\nequal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match all variable names provided in `variableValues` case-insensitively. If set to `true`\n**variableName** and **variablename** are treated as equal."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match all variable values provided in `variableValues` case-insensitively. If set to\n`true` **variableValue** and **variablevalue** are treated as equal."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableScopeIdIn",
						"description": "Only include variable instances which belong to one of passed scope ids."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"variableName",
								"variableType",
								"activityInstanceId",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					}
				],
				"tags": ["Variable Instance"]
			}
		},
		"/user/{id}/credentials": {"put": {
			"summary": "Update Credentials",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/UserCredentialsDto"},
				"examples": {"example-1": {
					"summary": "PUT /user/jonny1/credentials",
					"value": {
						"password": "s3cr3t",
						"authenticatedUserPassword": "demo"
					}
				}}
			}}},
			"operationId": "updateCredentials",
			"description": "Updates a user's credentials (password)",
			"responses": {
				"400": {
					"description": "The authenticated user password does not match",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The user could not be updated due to an internal server error. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."},
				"403": {
					"description": "Identity service is read-only (Cannot modify users / groups / memberships).",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "If the corresponding user cannot be found",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the user to be updated.",
				"required": true
			}],
			"tags": ["User"]
		}},
		"/task/{id}/deployed-form": {"get": {
			"summary": "Get Deployed Form",
			"operationId": "getDeployedForm",
			"description": "Retrieves the deployed form that is referenced from a given task. For further\ninformation please refer to the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#embedded-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {
						"application/json": {"schema": {
							"format": "binary",
							"description": "For `application/json` Responses, a byte stream is returned.",
							"type": "string"
						}},
						"application/xhtml+xml": {
							"schema": {
								"format": "binary",
								"description": "For `application/xhtml+xml` Responses, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "Status 200 Response",
								"description": "Resonse for GET `/task/taskId/deployed-form`",
								"value": "<form role=\"form\" name=\"invoiceForm\"\n                                            class=\"form-horizontal\">\n                                        <div class=\"form-group\">\n                                          <label class=\"control-label col-md-4\"\n                                                 for=\"creditor\">Creditor<\/label>\n                                          <div class=\"col-md-8\">\n                                            <input cam-variable-name=\"creditor\"\n                                                   cam-variable-type=\"String\"\n                                                   id=\"creditor\"\n                                                   class=\"form-control\"\n                                                   type=\"text\"\n                                                   required />\n                                            <div class=\"help\">\n                                            (e.g. &quot;Great Pizza for Everyone Inc.&quot;)\n                                            <\/div>\n                                          <\/div>\n                                        <\/div>\n                                      <\/form>"
							}}
						}
					}
				},
				"400": {
					"description": "The form key has wrong format. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "The deployed form cannot be retrieved due to missing permissions on task resource.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				},
				"404": {
					"description": "No deployed form for a given task exists. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to get the deployed form for.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/decision-definition/key/{key}/evaluate": {"post": {
			"summary": "Evaluate By Key",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/EvaluateDecisionDto"},
				"examples": {"example-1": {
					"summary": "POST /decision-definition/key/aKey/evaluate",
					"value": {"variables": {
						"amount": {
							"type": "Double",
							"value": 600
						},
						"invoiceCategory": {
							"type": "String",
							"value": "Misc"
						}
					}}
				}}
			}}},
			"operationId": "evaluateDecisionByKey",
			"description": "Evaluates the latest version of the decision definition which belongs to no tenant.\nThe input values of the decision have to be supplied in the request body.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"}}
						},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for POST `/decision-definition/key/aKey/evaluate`",
							"value": [{"result": {
								"valueInfo": null,
								"type": "String",
								"value": "management"
							}}]
						}}
					}}
				},
				"404": {
					"description": "Decision definition with given key does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the decision definition (the latest version thereof) to be evaluated.",
				"required": true
			}],
			"tags": ["Decision Definition"]
		}},
		"/filter/{id}/singleResult": {
			"post": {
				"summary": "Execute Filter Single Result (POST)",
				"requestBody": {
					"description": "A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource.",
					"content": {"application/json": {
						"schema": {"type": "object"},
						"examples": {"example-1": {
							"summary": "request",
							"description": "POST `filter/aTaskFilterId/singleResult`. **Note**: The examples show a task filter. So the request body corresponds to a task query. For other resource types the request body will differ.",
							"value": {
								"taskDefinitionKey": "aTaskKey",
								"assignee": "jonny1"
							}
						}}
					}}
				},
				"operationId": "postExecuteFilterSingleResult",
				"description": "Executes the saved query of the filter by id and returns the single result. This method is slightly more\npowerful then the [Get Execute Filter Single Result](https://docs.camunda.org/manual/7.19/reference/rest/filter/get-execute-single-result/)\nmethod because it allows to extend the saved query of the filter.",
				"responses": {
					"200": {
						"description": "Request successful. A JSON object corresponding to the corresponding entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine.",
						"content": {"application/json": {
							"schema": {"type": "object"},
							"examples": {"example-1": {
								"summary": "request",
								"description": "POST `filter/aTaskFilterId/singleResult`. **Note**: The examples show the result of a task filter. So the response corresponds to a task, but for other filters the response format will differ.",
								"value": {
									"owner": null,
									"processDefinitionId": "aProcessId",
									"processInstanceId": "aProcessInstanceId",
									"caseExecutionId": null,
									"caseDefinitionId": null,
									"formKey": null,
									"created": "2014-09-15T15:45:48.000+0200",
									"parentTaskId": null,
									"caseInstanceId": null,
									"description": null,
									"priority": 50,
									"suspended": false,
									"delegationState": null,
									"executionId": "aExecutionId",
									"followUp": null,
									"lastUpdated": "2014-09-15T15:45:48.000+0200",
									"taskDefinitionKey": "aTaskKey",
									"due": null,
									"name": "Task 2",
									"assignee": "jonny1",
									"id": "aTaskId"
								}
							}}
						}}
					},
					"400": {
						"description": "\nThe executed filter returned more than one single result or the\nextending query was invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful, but the result was empty. This method returns no content."},
					"403": {
						"description": "\nThe authenticated user is unauthorized to read this filter. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "\nFilter with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the filter to execute.",
					"required": true
				}],
				"tags": ["Filter"]
			},
			"get": {
				"summary": "Execute Filter Single Result",
				"operationId": "executeFilterSingleResult",
				"description": "Executes the saved query of the filter by id and returns the single result.",
				"responses": {
					"200": {
						"description": "Request successful. A JSON object corresponding to the matching entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible to specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine.",
						"content": {"application/json": {
							"schema": {"type": "object"},
							"examples": {"example-1": {
								"summary": "request",
								"description": "GET `/filter/aTaskFilterId/singleResult`. **Note**: The examples show the result of a task filter. So the response corresponds to a task, but for other filters the response format will differ.",
								"value": {
									"owner": null,
									"processDefinitionId": "aProcessId",
									"processInstanceId": "aProcessInstanceId",
									"caseExecutionId": null,
									"caseDefinitionId": null,
									"formKey": null,
									"created": "2014-09-15T15:45:48.000+0200",
									"parentTaskId": null,
									"caseInstanceId": null,
									"description": null,
									"priority": 50,
									"suspended": false,
									"delegationState": null,
									"executionId": "aExecutionId",
									"followUp": null,
									"lastUpdated": "2014-09-15T15:45:48.000+0200",
									"taskDefinitionKey": "aTaskKey",
									"due": null,
									"name": "Task 2",
									"assignee": "jonny1",
									"id": "aTaskId"
								}
							}}
						}}
					},
					"400": {
						"description": "\nThe executed filter returned more than one single result. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful, but the result was empty. This method returns no content."},
					"403": {
						"description": "\nThe authenticated user is unauthorized to read this filter.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "\nFilter with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the filter to execute.",
					"required": true
				}],
				"tags": ["Filter"]
			}
		},
		"/process-instance/{id}/comment": {"get": {
			"summary": "Get Process Instance Comments",
			"operationId": "getProcessInstanceComments",
			"description": "Gets the comments for a process instance by id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/CommentDto"}
						},
						"examples": {"example-1": {
							"summary": "GET /process-instance/aProcessInstanceId/comment",
							"value": [
								{
									"processInstanceId": "aProcessInstanceId",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "commentId",
									"time": "2013-01-02T21:37:03.764+0200",
									"message": "message",
									"userId": "userId",
									"taskId": "aTaskId",
									"removalTime": "2018-02-10T14:33:19.000+0200"
								},
								{
									"processInstanceId": "aProcessInstanceId",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "anotherCommentId",
									"time": "2013-02-23T20:37:43.975+0200",
									"message": "anotherMessage",
									"userId": "anotherUserId",
									"taskId": "aTaskId",
									"removalTime": "2018-02-10T14:33:19.000+0200"
								},
								{
									"processInstanceId": "aProcessInstanceId",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "yetAnotherCommentId",
									"time": "2013-04-21T10:15:23.764+0200",
									"message": "yetAnotherMessage",
									"userId": "yetAnotherUserId",
									"taskId": "aTaskId",
									"removalTime": "2018-02-10T14:33:19.000+0200"
								}
							]
						}}
					}}
				},
				"404": {
					"description": "No process instance exists for the given process instance id. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process instance to retrieve the comments for.",
				"required": true
			}],
			"tags": ["Process Instance"]
		}},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/deployed-start-form": {"get": {
			"summary": "Get Deployed Start Form",
			"operationId": "getDeployedStartFormByKeyAndTenantId",
			"description": "Retrieves the deployed form that can be referenced from a start event.\nFor further information please refer to [User Guide](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#embedded-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/xhtml+xml": {
						"schema": {
							"format": "binary",
							"description": "For `application/xhtml+xml` Responses, a byte stream is returned.",
							"type": "string"
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "Resonse for GET\n                                       `/process-definition/key/processDefinitionKey/tenant-id/tenantId/deployed-start-form`",
							"value": "<form role=\"form\" name=\"invoiceForm\"\n                                      class=\"form-horizontal\">\n\n                                  <div class=\"form-group\">\n                                    <label class=\"control-label col-md-4\"\n                                           for=\"creditor\">Creditor<\/label>\n                                    <div class=\"col-md-8\">\n                                      <input cam-variable-name=\"creditor\"\n                                             cam-variable-type=\"String\"\n                                             id=\"creditor\"\n                                             class=\"form-control\"\n                                             type=\"text\"\n                                             required />\n                                      <div class=\"help\">\n                                        (e.g. &quot;Great Pizza for Everyone Inc.&quot;)\n                                      <\/div>\n                                    <\/div>\n                                  <\/div>\n\n                                <\/form>"
						}}
					}}
				},
				"400": {
					"description": "The form key has wrong format.  See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "The deployed start form cannot be retrieved due to missing permissions on process definition resource.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				},
				"404": {
					"description": "No deployed start form for a given process definition exists. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definitions belong to.",
					"required": true
				}
			],
			"tags": ["Process Definition"]
		}},
		"/history/decision-definition/cleanable-decision-instance-report": {"get": {
			"summary": "Get Cleanable Decision Instance Report",
			"operationId": "getCleanableHistoricDecisionInstanceReport",
			"description": "Retrieves a report about a decision definition and finished decision instances\nrelevant to history cleanup (see\n[History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)), \nso that you can tune the history time to live.\nThese reports include the count of the finished historic decision\ninstances, cleanable decision instances and basic decision definition\ndata - id, key, name and version.\nThe size of the result set can be retrieved by using the \n[Get Cleanable Decision Instance Report Count](https://docs.camunda.org/manual/7.19/reference/rest/history/decision-definition/get-cleanable-decision-instance-report-count/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/CleanableHistoricDecisionInstanceReportResultDto"}
						},
						"examples": {"example-1": {
							"summary": "request",
							"description": "GET `/history/decision-definition/cleanable-decision-instance-report`",
							"value": [
								{
									"finishedDecisionInstanceCount": 100,
									"decisionDefinitionId": "invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e",
									"decisionDefinitionName": "Invoice Receipt",
									"decisionDefinitionVersion": 1,
									"cleanableDecisionInstanceCount": 53,
									"tenantId": "aTenantId",
									"historyTimeToLive": 5,
									"decisionDefinitionKey": "invoice"
								},
								{
									"finishedDecisionInstanceCount": 1000,
									"decisionDefinitionId": "invoice:2:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e",
									"decisionDefinitionName": "Invoice Receipt v2.0",
									"decisionDefinitionVersion": 2,
									"cleanableDecisionInstanceCount": 13,
									"tenantId": "aTenantId",
									"historyTimeToLive": 5,
									"decisionDefinitionKey": "invoice"
								}
							]
						}}
					}}
				},
				"500": {
					"description": "See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the\nerror response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionIdIn",
					"description": "Filter by decision definition ids. Must be a comma-separated list of decision definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionKeyIn",
					"description": "Filter by decision definition keys. Must be a comma-separated list of decision definition keys."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant \nids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include decision definitions which belong to no tenant. Value may only be `true`, as `false` \nis the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "compact",
					"description": "Only include decision instances which have more than zero finished instances. Value may only be `true`, \nas `false` is the default behavior."
				},
				{
					"schema": {
						"type": "string",
						"enum": ["finished"]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Historic Decision Definition"]
		}},
		"/task/{id}/attachment/{attachmentId}/data": {"get": {
			"summary": "Get (Binary)",
			"operationId": "getAttachmentData",
			"description": "Retrieves the binary content of a task attachment by task id and attachment id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {
						"application/octet-stream": {"schema": {
							"format": "binary",
							"description": "For files without any MIME type information, a byte stream is returned.",
							"type": "string"
						}},
						"text/plain": {"schema": {
							"format": "binary",
							"description": "Files with MIME type information are returned as the saved type. Additionally, for file\n                            responses, the Content-Disposition header will be set.",
							"type": "string"
						}}
					}
				},
				"404": {
					"description": "The attachment content for the given task id and attachment id does not exist, or the history of the\nengine is disabled.\n\nSee the [Introduction](/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the task.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "attachmentId",
					"description": "The id of the attachment to be retrieved.",
					"required": true
				}
			],
			"tags": ["Task Attachment"]
		}},
		"/process-definition/{id}/suspended": {"put": {
			"summary": "Activate/Suspend By Id",
			"requestBody": {
				"description": "**Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ProcessDefinitionSuspensionStateDto"},
					"examples": {"example-1": {
						"summary": "PUT `/process-definition/aProcessDefinitionId/suspended`",
						"value": {
							"executionDate": "2013-11-21T10:49:45T14:42:45",
							"includeProcessInstances": true,
							"suspended": true
						}
					}}
				}}
			},
			"operationId": "updateProcessDefinitionSuspensionStateById",
			"description": "Activates or suspends a given process definition by id.",
			"responses": {
				"400": {
					"description": "Returned if some of the query parameters are invalid,\nfor example if the provided `executionDate` parameter doesn't have the expected format or\nif the `processDefinitionKey` parameter is `null`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Process definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition to activate or suspend.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/process-definition": {"get": {
			"summary": "Get List",
			"operationId": "getProcessDefinitions",
			"description": "Queries for process definitions that fulfill given parameters. Parameters may be the properties of \nprocess definitions, such as the name, key or version. The size of the result set can be retrieved\nby using the [Get Definition Count](https://docs.camunda.org/manual/7.19/reference/rest/process-definition/get-query-count/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/ProcessDefinitionDto"}
						},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response of GET `/process-definition?keyLike=invoice&sortBy=version&sortOrder=asc`",
							"value": [
								{
									"resource": "invoice.v1.bpmn",
									"startableInTasklist": true,
									"description": null,
									"historyTimeToLive": 5,
									"versionTag": null,
									"version": 1,
									"suspended": false,
									"diagram": null,
									"deploymentId": "c398cd26-2046-11e7-8f94-34f39ab71d4e",
									"name": "Invoice Receipt",
									"tenantId": null,
									"id": "invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e",
									"category": "http://www.omg.org/spec/BPMN/20100524/MODEL",
									"key": "invoice"
								},
								{
									"resource": "invoice.v2.bpmn",
									"startableInTasklist": true,
									"description": null,
									"historyTimeToLive": null,
									"versionTag": null,
									"version": 2,
									"suspended": false,
									"diagram": null,
									"deploymentId": "c3d82020-2046-11e7-8f94-34f39ab71d4e",
									"name": "Invoice Receipt",
									"tenantId": null,
									"id": "invoice:2:c3e1bd16-2046-11e7-8f94-34f39ab71d4e",
									"category": "http://www.omg.org/spec/BPMN/20100524/MODEL",
									"key": "invoice"
								}
							]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,\nbut no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Filter by process definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionIdIn",
					"description": "Filter by a comma-separated list of process definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "name",
					"description": "Filter by process definition name."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "nameLike",
					"description": "Filter by process definition names that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "deploymentId",
					"description": "Filter by the deployment the id belongs to."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "deployedAfter",
					"description": "Filter by the deploy time of the deployment the process definition belongs to.\nOnly selects process definitions that have been deployed after (exclusive) a specific time.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.546+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "deployedAt",
					"description": "Filter by the deploy time of the deployment the process definition belongs to.\nOnly selects process definitions that have been deployed at a specific time (exact match).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.546+0200`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "key",
					"description": "Filter by process definition key, i.e., the id in the BPMN 2.0 XML. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "keysIn",
					"description": "Filter by a comma-separated list of process definition keys."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "keyLike",
					"description": "Filter by process definition keys that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "category",
					"description": "Filter by process definition category. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "categoryLike",
					"description": "Filter by process definition categories that the parameter is a substring of."
				},
				{
					"schema": {
						"format": "int32",
						"type": "integer"
					},
					"in": "query",
					"name": "version",
					"description": "Filter by process definition version."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "latestVersion",
					"description": "Only include those process definitions that are latest versions.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceName",
					"description": "Filter by the name of the process definition resource. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceNameLike",
					"description": "Filter by names of those process definition resources that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "startableBy",
					"description": "Filter by a user name who is allowed to start the process."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "active",
					"description": "Only include active process definitions.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "suspended",
					"description": "Only include suspended process definitions.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentId",
					"description": "Filter by the incident id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentType",
					"description": "Filter by the incident type.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types)\nfor a list of incident types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessage",
					"description": "Filter by the incident message. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessageLike",
					"description": "Filter by the incident message that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids.\nA process definition must have one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include process definitions which belong to no tenant.\nValue may only be true, as false is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeProcessDefinitionsWithoutTenantId",
					"description": "Include process definitions which belong to no tenant. Can be used in combination with `tenantIdIn`.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "versionTag",
					"description": "Filter by the version tag."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "versionTagLike",
					"description": "Filter by the version tag that the parameter is a substring of."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutVersionTag",
					"description": "Only include process definitions without a `versionTag`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "startableInTasklist",
					"description": "Filter by process definitions which are startable in Tasklist.."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "notStartableInTasklist",
					"description": "Filter by process definitions which are not startable in Tasklist."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "startablePermissionCheck",
					"description": "Filter by process definitions which the user is allowed to start in Tasklist.\nIf the user doesn't have these permissions the result will be empty list.\nThe permissions are:\n* `CREATE` permission for all Process instances\n* `CREATE_INSTANCE` and `READ` permission on Process definition level"
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"category",
							"key",
							"id",
							"name",
							"version",
							"deploymentId",
							"deployTime",
							"tenantId ",
							"versionTag"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Process Definition"]
		}},
		"/job/{id}/retries": {"put": {
			"summary": "Set Job Retries",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/JobRetriesDto"},
				"examples": {"example-1": {
					"summary": "PUT `/job/aJobId/retries`",
					"value": {
						"retries": 3,
						"dueDate": "2017-04-06T13:57:45.000+0200"
					}
				}}
			}}},
			"operationId": "setJobRetries",
			"description": "Sets the retries of the job to the given number of retries by id.",
			"responses": {
				"500": {
					"description": "The retries could not be set successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."},
				"404": {
					"description": "Job with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the job to be updated.",
				"required": true
			}],
			"tags": ["Job"]
		}},
		"/tenant": {
			"get": {
				"summary": "Get Tenants",
				"operationId": "queryTenants",
				"description": "Query for a list of tenants using a list of parameters. The size of the result set\ncan be retrieved by using the [Get Tenant\nCount](https://docs.camunda.org/manual/7.19/reference/rest/tenant/get-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/TenantDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "GET `/tenant?name=tenantOne`",
								"value": [{
									"name": "Tenant One",
									"id": "tenantOne"
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy` is specified. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {
							"type": "string",
							"enum": [
								"id",
								"name"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "id",
						"description": "Filter by the id of the tenant."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "name",
						"description": "Filter by the name of the tenant."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "nameLike",
						"description": "Filter by the name that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "userMember",
						"description": "Select only tenants where the given user is a member of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "groupMember",
						"description": "Select only tenants where the given group is a member of."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "includingGroupsOfUser",
						"description": "Select only tenants where the user or one of his groups is a member of.\nCan only be used in combination with the `userMember` parameter. Value may only be `true`,\nas `false` is the default behavior."
					}
				],
				"tags": ["Tenant"]
			},
			"options": {
				"summary": "Tenant Resource Options",
				"operationId": "availableTenantResourceOperations",
				"description": "The `/tenant` resource supports two custom OPTIONS requests, this one for the resource\nas such and one for individual tenant instances. The OPTIONS request\nallows checking for the set of available operations that the currently\nauthenticated user can perform on the `/tenant` resource. If the user\ncan perform an operation or not may depend on various things,\nincluding the users authorizations to interact with this resource and\nthe internal configuration of the process engine.",
				"responses": {"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "OPTIONS `/tenant`",
							"value": {"links": [
								{
									"method": "GET",
									"rel": "list",
									"href": "http://localhost:8080/engine-rest/tenant"
								},
								{
									"method": "GET",
									"rel": "count",
									"href": "http://localhost:8080/engine-rest/tenant/count"
								},
								{
									"method": "POST",
									"rel": "create",
									"href": "http://localhost:8080/engine-rest/tenant/create"
								}
							]}
						}}
					}}
				}},
				"tags": ["Tenant"]
			}
		},
		"/history/batch/cleanable-batch-report": {"get": {
			"summary": "Get Cleanable Batch Report",
			"operationId": "getCleanableHistoricBatchesReport",
			"description": "Retrieves a report about a historic batch operations relevant to history cleanup\n(see\n[History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)\n) so that you can tune the history time to live.\nThese reports include the count of the finished batches, cleanable\nbatches and type of the batch.\nThe size of the result set can be retrieved by using the\n[Get Cleanable Batch Report Count](https://docs.camunda.org/manual/7.19/reference/rest/history/batch/get-cleanable-batch-report-count/)\nmethod.\n\n**Please note:**\nThe history time to live for batch operations does not support [Multi-Tenancy](https://docs.camunda.org/manual/7.19/user-guide/process-engine/multi-tenancy.md).\nThe report will return an information for all batch operations (for all tenants) if you have permissions\nto see the history.\n",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/CleanableHistoricBatchReportResultDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/history/batch/cleanable-batch-report`",
							"description": "GET `/history/batch/cleanable-batch-report`\n\n                                      An array containing finished batches information relevant to history cleanup.",
							"value": [
								{
									"cleanableBatchCount": 53,
									"historyTimeToLive": 5,
									"batchType": "instance-modification",
									"finishedBatchCount": 100
								},
								{
									"cleanableBatchCount": 13,
									"historyTimeToLive": 5,
									"batchType": "instance-deletion",
									"finishedBatchCount": 1000
								}
							]
						}}
					}}
				},
				"500": {
					"description": "See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {
						"type": "string",
						"enum": ["finished"]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Historic Batch"]
		}},
		"/decision-definition/key/{key}": {"get": {
			"summary": "Get Decision Definition By Key",
			"operationId": "getDecisionDefinitionByKey",
			"description": "Retrieves the latest version of the decision definition which belongs to no tenant.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionDefinitionDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for GET `/decision-definition/key/dish-decision`",
							"value": {
								"resource": "drd-dish-decision.dmn",
								"decisionRequirementsDefinitionId": "dish:1:c633c195-41b7-11e6-b0ef-00aa004d0001",
								"deploymentId": "c627175e-41b7-11e6-b0ef-00aa004d0001",
								"name": "Dish Decision",
								"tenantId": null,
								"historyTimeToLive": 5,
								"versionTag": null,
								"id": "aDecisionDefinitionId",
								"category": "http://camunda.org/schema/1.0/dmn",
								"version": 1,
								"key": "dish-decision",
								"decisionRequirementsDefinitionKey": "dish"
							}
						}}
					}}
				},
				"404": {
					"description": "Decision definition with given key does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the decision definition (the latest version thereof) to be retrieved.",
				"required": true
			}],
			"tags": ["Decision Definition"]
		}},
		"/decision-definition/key/{key}/tenant-id/{tenant-id}/evaluate": {"post": {
			"summary": "Evaluate By Key And Tenant",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/EvaluateDecisionDto"},
				"examples": {"example-1": {
					"summary": "POST /decision-definition/key/aKey/tenand-id/aTenantId/evaluate",
					"value": {"variables": {
						"amount": {
							"type": "Double",
							"value": 600
						},
						"invoiceCategory": {
							"type": "String",
							"value": "Misc"
						}
					}}
				}}
			}}},
			"operationId": "evaluateDecisionByKeyAndTenant",
			"description": "Evaluates the latest version of the decision definition for tenant.\nThe input values of the decision have to be supplied in the request body.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"}}
						},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for POST `/decision-definition/akey/aKey/tenand-id/aTenantId/evaluate`",
							"value": [{"result": {
								"valueInfo": null,
								"type": "String",
								"value": "management"
							}}]
						}}
					}}
				},
				"404": {
					"description": "Decision definition with given key does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the decision definition (the latest version thereof) to be evaluated.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the decision definition belongs to.",
					"required": true
				}
			],
			"tags": ["Decision Definition"]
		}},
		"/schema/log": {
			"post": {
				"summary": "Get List (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/SchemaLogQueryDto"},
					"examples": {"example-1": {
						"summary": "POST /schema/log",
						"description": "The content of the Request Body",
						"value": {
							"sortOrder": "asc",
							"sortBy": "timestamp",
							"version": "7.11.0"
						}
					}}
				}}},
				"operationId": "querySchemaLog",
				"description": "Queries for schema log entries that fulfill given parameters.",
				"responses": {"200": {
					"description": "Request successful.\n**Note**: In order to get any results a user of group camunda-admin must be\nauthenticated.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/SchemaLogEntryDto"}
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "The Response content of a status 200",
							"value": [{
								"id": "0",
								"version": "7.11.0",
								"timestamp": "2019-05-13T09:07:11.751+0200"
							}]
						}}
					}}
				}},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Schema Log"]
			},
			"get": {
				"summary": "Get List",
				"operationId": "getSchemaLog",
				"description": "Queries for schema log entries that fulfill given parameters.",
				"responses": {"200": {
					"description": "Request successful.\n**Note**: In order to get any results a user of group `camunda-admin` must\nbe authenticated.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/SchemaLogEntryDto"}
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "The Response content of a status 200",
							"value": [
								{
									"id": "0",
									"version": "7.11.0",
									"timestamp": "2019-05-13T09:07:11.751+0200"
								},
								{
									"id": "1",
									"version": "7.11.1",
									"timestamp": "2019-06-1T17:22:05.123+0200"
								}
							]
						}}
					}}
				}},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "version",
						"description": "Only return schema log entries with a specific version."
					},
					{
						"schema": {
							"type": "string",
							"enum": ["timestamp"]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Schema Log"]
			}
		},
		"/group/{id}/members/{userId}": {
			"delete": {
				"summary": "Delete a Group Member",
				"operationId": "deleteGroupMember",
				"description": "Removes a member from a group.",
				"responses": {
					"500": {
						"description": "In case an error occurs. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "Identity service is read-only (Cannot modify users / groups / memberships).",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the group.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "userId",
						"description": "The id of user to remove from the group.",
						"required": true
					}
				],
				"tags": ["Group"]
			},
			"put": {
				"summary": "Create Group Member",
				"operationId": "createGroupMember",
				"description": "Adds a member to a group.",
				"responses": {
					"500": {
						"description": "In case an internal error occurs. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "Identity service is read-only (Cannot modify users / groups / memberships).",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the group.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "userId",
						"description": "The id of user to add to the group.",
						"required": true
					}
				],
				"tags": ["Group"]
			}
		},
		"/identity/password-policy": {
			"post": {
				"summary": "Validate Password",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/PasswordPolicyRequestDto"},
					"examples": {"example-1": {
						"summary": "POST `/identity/password-policy`",
						"value": {
							"password": "myPassword",
							"profile": {
								"firstName": "John",
								"lastName": "Doe",
								"id": "jonny1",
								"email": "jonny@camunda.org"
							}
						}
					}}
				}}},
				"operationId": "checkPassword",
				"description": "A password policy consists of a list of rules that new passwords must follow to be\npolicy compliant. A password can be checked for compliancy via this\nend point. More information on password policies in Camunda can be found in the password policy\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/password-policy/) and in\nthe [security instructions](https://docs.camunda.org/manual/7.19/user-guide/security/).",
				"responses": {
					"200": {
						"description": "Request successful. This example uses the built-in password policy that enforces a minimum password length, and\nsome complexity rules. The checked password is myPassword which is not complex enough to match all of\nthe policy rules.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CheckPasswordPolicyResultDto"},
							"examples": {"example-1": {
								"description": "POST `/identity/password-policy`",
								"value": {
									"valid": false,
									"rules": [
										{
											"valid": true,
											"parameter": null,
											"placeholder": "PASSWORD_POLICY_USER_DATA"
										},
										{
											"valid": true,
											"parameter": {"minLowerCase": "1"},
											"placeholder": "PASSWORD_POLICY_LOWERCASE"
										},
										{
											"valid": false,
											"parameter": {"minLength": "10"},
											"placeholder": "PASSWORD_POLICY_LENGTH"
										},
										{
											"valid": false,
											"parameter": {"minUpperCase": "1"},
											"placeholder": "PASSWORD_POLICY_UPPERCASE\""
										},
										{
											"valid": false,
											"parameter": {"minDigit": "1"},
											"placeholder": "PASSWORD_POLICY_DIGIT"
										},
										{
											"valid": false,
											"parameter": {"minSpecial": "1"},
											"placeholder": "PASSWORD_POLICY_SPECIAL"
										}
									]
								}
							}}
						}}
					},
					"404": {
						"description": "No password policy was found to check the password against.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Identity"]
			},
			"get": {
				"summary": "Get Password Policy",
				"operationId": "getPasswordPolicy",
				"description": "A password policy consists of a list of rules that new passwords must follow to be\npolicy compliant. This end point returns a JSON representation of the\nlist of policy rules. More information on password policies in Camunda can be found in the password policy\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/password-policy/) and in\nthe [security instructions](https://docs.camunda.org/manual/7.19/user-guide/security/).",
				"responses": {
					"200": {
						"description": "Request successful. This example uses the built-in password policy that enforces a minimum password length,\nand some complexity rules.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/PasswordPolicyDto"},
							"examples": {"example-1": {
								"description": "GET `/identity/password-policy`",
								"value": {"rules": [
									{
										"parameter": null,
										"placeholder": "PASSWORD_POLICY_USER_DATA"
									},
									{
										"parameter": {"minLength": "10"},
										"placeholder": "PASSWORD_POLICY_LENGTH"
									},
									{
										"parameter": {"minLowerCase": "1"},
										"placeholder": "PASSWORD_POLICY_LOWERCASE"
									},
									{
										"parameter": {"minUpperCase": "1"},
										"placeholder": "PASSWORD_POLICY_UPPERCASE"
									},
									{
										"parameter": {"minDigit": "1"},
										"placeholder": "PASSWORD_POLICY_DIGIT"
									},
									{
										"parameter": {"minSpecial": "1"},
										"placeholder": "PASSWORD_POLICY_SPECIAL"
									}
								]}
							}}
						}}
					},
					"404": {
						"description": "No password policy was found.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Identity"]
			}
		},
		"/history/detail/{id}/data": {"get": {
			"summary": "Get Historic Detail (Binary)",
			"operationId": "historicDetailBinary",
			"description": "Retrieves the content of a historic variable update by id. Applicable for byte\narray and file variables.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {
						"application/octet-stream": {
							"schema": {
								"format": "binary",
								"description": "For binary variables or files without any MIME type information, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "GET `/history/detail/someId/data`",
								"value": "binary variable: Status 200. Content-Type: application/octet-stream"
							}}
						},
						"*/*": {
							"schema": {
								"format": "binary",
								"description": "File variables with MIME type information are returned as the saved type. Additionally,\n                            for file variables the Content-Disposition header will be set.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "GET `/history/detail/someId/data`",
								"value": "file variable: Status 200. Content-Type: text/plain; charset=UTF-8.\n                        Content-Disposition: attachment; filename='someFile.txt'"
							}}
						}
					}
				},
				"400": {
					"description": "Detail with given id exists but is not a binary variable. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Detail with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the historic variable update.",
				"required": true
			}],
			"tags": ["Historic Detail"]
		}},
		"/modification/executeAsync": {"post": {
			"summary": "Execute Modification Async (Batch)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ModificationDto"},
				"examples": {"example-1": {
					"summary": "POST `/modification/executeAsync`",
					"value": {
						"annotation": "Modified to resolve an error.",
						"processDefinitionId": "aProcessDefinitionId",
						"instructions": [
							{
								"activityId": "aUserTask",
								"type": "startAfterActivity"
							},
							{
								"activityId": "anotherTask",
								"type": "cancel",
								"cancelCurrentActiveActivityInstances": true
							}
						],
						"processInstanceQuery": {"processDefinitionId": "aProcessDefinitionId"},
						"processInstanceIds": [
							"aProcessInstance",
							"anotherProcessInstance"
						],
						"skipCustomListeners": true
					}
				}}
			}}},
			"operationId": "executeModificationAsync",
			"description": "Executes a modification asynchronously for multiple process instances. To execute a\nmodification synchronously, use the\n[Execute Modification](https://docs.camunda.org/manual/7.19/reference/rest/modification/post-modification-sync/) method.\n\nFor more information about the difference between synchronous and\nasynchronous execution of a modification, please refer to the related\nsection of the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-instance-migration.md#executing-a-migration-plan).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "POST `/modification/executeAsync`",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId"
							}
						}}
					}}
				},
				"400": {
					"description": "\nIn case following parameters are missing: instructions,\nprocessDefinitionId, activityId or transitionId, processInstanceIds\nor processInstanceQuery, an exception of type\n`InvalidRequestException` is returned. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Modification"]
		}},
		"/process-instance/job-retries": {"post": {
			"summary": "Set Job Retries Async (POST)",
			"requestBody": {
				"description": "Please note that if both processInstances and processInstanceQuery are provided,\nthen the resulting execution will be performed on the union of these sets.\n**Unallowed property**: `historicProcessInstanceQuery`",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/SetJobRetriesByProcessDto"},
					"examples": {"example-1": {
						"summary": "POST `/process-instance/job-retries` Request Body 1",
						"value": {
							"retries": 5,
							"processInstances": [
								"aProcess",
								"secondProcess"
							],
							"processInstanceQuery": {"processDefinitionId": "aProcessDefinitionId"},
							"dueDate": "2017-04-06T13:57:45.000+0200"
						}
					}}
				}}
			},
			"operationId": "setRetriesByProcess",
			"description": "Create a batch to set retries of jobs associated with given processes asynchronously.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {"value": {
							"monitorJobDefinitionId": "aMonitorJobDefinitionId",
							"createUserId": "demo",
							"invocationsPerBatchJob": 1,
							"totalJobs": 10,
							"jobsCreated": 10,
							"tenantId": "aTenantId",
							"batchJobsPerSeed": 100,
							"seedJobDefinitionId": "aSeedJobDefinitionId",
							"id": "aBatchId",
							"type": "aBatchType",
							"batchJobDefinitionId": "aBatchJobDefinitionId",
							"suspended": false
						}}}
					}}
				},
				"400": {
					"description": "Bad Request\nReturned if some of the query parameters are invalid, for example if neither processInstanceIds, nor processInstanceQuery is present.\nOr if the retry count is not specified.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Process Instance"]
		}},
		"/filter/{id}/list": {
			"post": {
				"summary": "Execute Filter List (POST)",
				"requestBody": {
					"description": "A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource.",
					"content": {"application/json": {
						"schema": {"type": "object"},
						"examples": {"example-1": {
							"summary": "request",
							"description": "POST `/filter/aTaskFilterId/list/?firstResult=0&maxResults=2`. **Note**: The examples show a task filter. So the request body corresponds to a task query. For other resource types the request body will differ.",
							"value": {
								"taskDefinitionKey": "aTaskKey",
								"assignee": "jonny1"
							}
						}}
					}}
				},
				"operationId": "postExecuteFilterList",
				"description": "Executes the saved query of the filter by id and returns the result list. This\nmethod is slightly more powerful then the \n[Get Execute FilterList](https://docs.camunda.org/manual/7.19/reference/rest/filter/get-execute-list/) method\nbecause it allows to extend the saved query of the filter.",
				"responses": {
					"200": {
						"description": "Request successful. A JSON array containing JSON objects corresponding to the matching entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible to specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"type": "object"}
							},
							"examples": {"example-1": {
								"summary": "request",
								"description": "POST `/filter/aTaskFilterId/list/?firstResult=0&maxResults=2`. **Note**: The examples show the result of a task filter. So the response corresponds to a task, but for other filters the response format will differ.",
								"value": [{
									"owner": null,
									"processDefinitionId": "aProcessId",
									"processInstanceId": "aProcessInstanceId",
									"caseExecutionId": null,
									"caseDefinitionId": null,
									"formKey": null,
									"created": "2014-09-15T15:45:48.000+0200",
									"parentTaskId": null,
									"caseInstanceId": null,
									"description": null,
									"priority": 50,
									"suspended": false,
									"delegationState": null,
									"executionId": "aExecutionId",
									"followUp": null,
									"lastUpdated": "2014-09-15T15:45:48.000+0200",
									"taskDefinitionKey": "aTaskKey",
									"due": null,
									"name": "Task 2",
									"assignee": "jonny1",
									"id": "aTaskId"
								}]
							}}
						}}
					},
					"400": {
						"description": "\nThe extending query was invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"403": {
						"description": "\nThe authenticated user is unauthorized to read this filter.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "\nFilter with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the filter to execute.",
						"required": true
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Filter"]
			},
			"get": {
				"summary": "Execute Filter List",
				"operationId": "executeFilterList",
				"description": "Executes the saved query of the filter by id and returns the result list.",
				"responses": {
					"200": {
						"description": "Request successful. A JSON array containing JSON objects corresponding to the matching entity interface in the engine. This depends on the saved query in the filter. Therefore it is not possible to specify a generic result format, i.e., if the resource type of the filter is Task the result will correspond to the Task interface in the engine.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"type": "object"}
							},
							"examples": {"example-1": {
								"summary": "request",
								"description": "GET `/filter/aTaskFilterId/list/?firstResult=0&maxResults=2`. **Note**: The examples show the result of a task filter. So the response corresponds to a task, but for other filters the response format will differ.",
								"value": [
									{
										"owner": null,
										"processDefinitionId": "aProcessId",
										"processInstanceId": "aProcessInstanceId",
										"caseExecutionId": null,
										"caseDefinitionId": null,
										"formKey": null,
										"created": "2014-09-15T15:45:48.000+0200",
										"parentTaskId": null,
										"caseInstanceId": null,
										"description": null,
										"priority": 50,
										"suspended": false,
										"delegationState": null,
										"executionId": "aExecutionId",
										"followUp": null,
										"lastUpdated": "2014-09-15T15:45:48.000+0200",
										"taskDefinitionKey": "aTaskKey",
										"due": null,
										"name": "Task 2",
										"assignee": "jonny1",
										"id": "aTaskId"
									},
									{
										"owner": null,
										"processDefinitionId": "anotherProcessId",
										"processInstanceId": "anotherProcessInstanceId",
										"caseExecutionId": null,
										"caseDefinitionId": null,
										"formKey": null,
										"created": "2014-09-15T10:42:18.000+0200",
										"parentTaskId": null,
										"caseInstanceId": null,
										"description": null,
										"priority": 50,
										"suspended": false,
										"delegationState": null,
										"executionId": "anotherExecutionId",
										"followUp": null,
										"lastUpdated": "2014-09-15T15:45:48.000+0200",
										"taskDefinitionKey": "anotherTaskKey",
										"due": null,
										"name": "Task 2",
										"assignee": "demo",
										"id": "anotherTaskId"
									}
								]
							}}
						}}
					},
					"403": {
						"description": "\nThe authenticated user is unauthorized to read this filter.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "\nFilter with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the filter to execute.",
						"required": true
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Filter"]
			}
		},
		"/decision-definition/key/{key}/tenant-id/{tenant-id}/diagram": {"get": {
			"summary": "Get Diagram By Key And Tenant",
			"operationId": "getDecisionDefinitionDiagramByKeyAndTenant",
			"description": "Returns the XML of the latest version of the decision definition for tenant.",
			"responses": {
				"200": {
					"description": "Request successful. The image diagram of this process.",
					"content": {
						"application/octet-stream": {"schema": {
							"format": "binary",
							"description": "defaults to `application/octet-stream` if the file suffix is unknown",
							"type": "string"
						}},
						"*/*": {"schema": {
							"format": "binary",
							"description": "Files with MIME type information image/png, image/gif, ... ",
							"type": "string"
						}}
					}
				},
				"204": {"description": "The decision definition doesn't have an associated diagram."},
				"404": {
					"description": "Decision definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the decision definition (the latest version thereof) to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the decision definition belongs to.",
					"required": true
				}
			],
			"tags": ["Decision Definition"]
		}},
		"/history/cleanup/job": {"get": {
			"summary": "Find clean up history job (GET)",
			"deprecated": true,
			"operationId": "findCleanupJob",
			"description": "**Deprecated!** Use `GET /history/cleanup/jobs` instead.\n\nFinds history cleanup job (See\n[History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/JobDto"},
						"examples": {"example-1": {
							"summary": "GET `/history/cleanup/job`",
							"description": "GET `/history/cleanup/job`",
							"value": {
								"processInstanceId": null,
								"processDefinitionId": null,
								"jobDefinitionId": null,
								"dueDate": "2017-04-06T13:57:45.000+0200",
								"priority": 0,
								"suspended": false,
								"processDefinitionKey": null,
								"executionId": null,
								"retries": 3,
								"createTime": "2017-05-05T17:00:00+0200",
								"tenantId": null,
								"id": "074bd92a-1a95-11e7-8ceb-34f39ab71d4e",
								"exceptionMessage": null
							}
						}}
					}}
				},
				"404": {
					"description": "History clean up job does not exist.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["History Cleanup"]
		}},
		"/history/process-instance/report": {"get": {
			"summary": "Get Duration Report",
			"operationId": "getHistoricProcessInstanceDurationReport",
			"description": "Retrieves a report about the duration of completed process instances, grouped by a period.\nThese reports include the maximum, minimum and average duration of all completed process instances which were started in a given period.\n\n**Note:** This only includes historic data.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {
						"application/csv": {"schema": {}},
						"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/DurationReportResultDto"}
							},
							"examples": {"example-1": {
								"summary": "GET `/history/process-instance/report?reportType=duration&periodUnit=quarter&processDefinitionKeyIn=invoice`",
								"value": [
									{
										"average": 375000,
										"period": 1,
										"maximum": 500000,
										"periodUnit": "QUARTER",
										"minimum": 250000
									},
									{
										"average": 450000,
										"period": 2,
										"maximum": 600000,
										"periodUnit": "QUARTER",
										"minimum": 300000
									},
									{
										"average": 750000,
										"period": 3,
										"maximum": 1000000,
										"periodUnit": "QUARTER",
										"minimum": 500000
									},
									{
										"average": 150000,
										"period": 4,
										"maximum": 200000,
										"periodUnit": "QUARTER",
										"minimum": 100000
									}
								]
							}}
						},
						"text/csv": {"schema": {}}
					}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid or mandatory parameters are not supplied.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "If the authenticated user is unauthorized to read the history.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "reportType",
					"description": "**Mandatory.** Specifies the type of the report to retrieve.\nTo retrieve a report about the duration of process instances, the value must be set to `duration`.",
					"required": true
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"month",
							"quarter"
						]
					},
					"in": "query",
					"name": "periodUnit",
					"description": "**Mandatory.** Specifies the granularity of the report. Valid values are `month` and `quarter`.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionIdIn",
					"description": "Filter by process definition ids. Must be a comma-separated list of process definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKeyIn",
					"description": "Filter by process definition keys. Must be a comma-separated list of process definition keys."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedBefore",
					"description": "Restrict to instances that were started before the given date.\nBy [default](), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedAfter",
					"description": "Restrict to instances that were started after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2016-01-23T14:42:45.000+0200`."
				}
			],
			"tags": ["Historic Process Instance"]
		}},
		"/decision-definition/{id}/evaluate": {"post": {
			"summary": "Evaluate By Id",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/EvaluateDecisionDto"},
				"examples": {"example-1": {
					"summary": "POST /decision-definition/aDecisionDefinitionId/evaluate",
					"value": {"variables": {
						"amount": {
							"type": "Double",
							"value": 600
						},
						"invoiceCategory": {
							"type": "String",
							"value": "Misc"
						}
					}}
				}}
			}}},
			"operationId": "evaluateDecisionById",
			"description": "Evaluates a given decision and returns the result.\nThe input values of the decision have to be supplied in the request body.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"}}
						},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for POST `/decision-definition/aDecisionDefinitionId/evaluate`",
							"value": [{"result": {
								"valueInfo": null,
								"type": "String",
								"value": "management"
							}}]
						}}
					}}
				},
				"404": {
					"description": "Decision definition with given id does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the decision definition to be evaluated.",
				"required": true
			}],
			"tags": ["Decision Definition"]
		}},
		"/history/process-instance/{id}": {
			"get": {
				"summary": "Get",
				"operationId": "getHistoricProcessInstance",
				"description": "Retrieves a historic process instance by id, according to the `HistoricProcessInstance` interface in the engine.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/HistoricProcessInstanceDto"},
							"examples": {"example-1": {
								"summary": "GET `/history/process-instance/7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e`",
								"value": {
									"processDefinitionId": "invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e",
									"durationInMillis": null,
									"caseInstanceId": null,
									"processDefinitionName": "Invoice Receipt",
									"superCaseInstanceId": null,
									"deleteReason": null,
									"processDefinitionKey": "invoice",
									"removalTime": null,
									"startUserId": null,
									"startActivityId": "StartEvent_1",
									"businessKey": null,
									"tenantId": null,
									"startTime": "2017-02-10T14:33:19.000+0200",
									"rootProcessInstanceId": "f8259e5d-ab9d-11e8-8449-e4a7a094a9d6",
									"id": "7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e",
									"endTime": null,
									"state": "ACTIVE",
									"processDefinitionVersion": 1,
									"superProcessInstanceId": null
								}
							}}
						}}
					},
					"404": {
						"description": "Not Found\nHistoric process instance with given id does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the historic process instance to be retrieved.",
					"required": true
				}],
				"tags": ["Historic Process Instance"]
			},
			"delete": {
				"summary": "Delete",
				"operationId": "deleteHistoricProcessInstance",
				"description": "Deletes a process instance from the history by id.",
				"responses": {
					"204": {"description": "Request successful."},
					"404": {
						"description": "Not found\nHistoric process instance with given id does not exist.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the historic process instance to be deleted.",
						"required": true
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "failIfNotExists",
						"description": "If set to `false`, the request will still be successful if the process id is not found."
					}
				],
				"tags": ["Historic Process Instance"]
			}
		},
		"/process-definition/{id}/statistics": {"get": {
			"summary": "Get Activity Instance Statistics",
			"operationId": "getActivityStatistics",
			"description": "Retrieves runtime statistics of a given process definition, grouped by activities.\nThese statistics include the number of running activity instances, optionally the number of failed jobs\nand also optionally the number of incidents either grouped by incident types or for a specific incident type.\n**Note**: This does not include historic data.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/ActivityStatisticsResultDto"}
						},
						"examples": {
							"example-3": {
								"summary": "GET /process-definition/aProcessDefinitionId/statistics?incidentsForType=anIncident",
								"description": "Request with Query Parameter `incidentsForType=anIncident`",
								"value": [{
									"@class": "org.camunda.bpm.engine.rest.dto.repository.ActivityStatisticsResultDto",
									"instances": 123,
									"failedJobs": 0,
									"incidents": [{
										"incidentCount": 20,
										"incidentType": "anIncident"
									}],
									"id": "anActivity"
								}]
							},
							"example-1": {
								"summary": "GET /process-definition/aProcessDefinitionId/statistics?failedJobs=true",
								"description": "Request with Query Parameter `failedJobs=true`",
								"value": [
									{
										"@class": "org.camunda.bpm.engine.rest.dto.repository.ActivityStatisticsResultDto",
										"instances": 123,
										"failedJobs": 42,
										"incidents": [],
										"id": "anActivity"
									},
									{
										"@class": "org.camunda.bpm.engine.rest.dto.repository.ActivityStatisticsResultDto",
										"instances": 124,
										"failedJobs": 43,
										"incidents": [],
										"id": "anotherActivity"
									}
								]
							},
							"example-2": {
								"summary": "GET /process-definition/aProcessDefinitionId/statistics?incidents=true",
								"description": "Request with Query Parameter `incidents=true`",
								"value": [
									{
										"@class": "org.camunda.bpm.engine.rest.dto.repository.ActivityStatisticsResultDto",
										"instances": 123,
										"failedJobs": 0,
										"incidents": [
											{
												"incidentCount": 42,
												"incidentType": "failedJob"
											},
											{
												"incidentCount": 20,
												"incidentType": "anIncident"
											}
										],
										"id": "anActivity"
									},
									{
										"@class": "org.camunda.bpm.engine.rest.dto.repository.ActivityStatisticsResultDto",
										"instances": 124,
										"failedJobs": 0,
										"incidents": [
											{
												"incidentCount": 43,
												"incidentType": "failedJob"
											},
											{
												"incidentCount": 22,
												"incidentType": "anIncident"
											},
											{
												"incidentCount": 15,
												"incidentType": "anotherIncident"
											}
										],
										"id": "anotherActivity"
									}
								]
							}
						}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given key does not exist.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the process definition.",
					"required": true
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "failedJobs",
					"description": "Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "incidents",
					"description": "Valid values for this property are `true` or `false`.\nIf this property has been set to `true` the result will include the corresponding number of incidents\nfor each occurred incident type.\nIf it is set to `false`, the incidents will not be included in the result.\nCannot be used in combination with `incidentsForType`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentsForType",
					"description": "If this property has been set with any incident type (i.e., a string value) the result\nwill only include the number of incidents for the assigned incident type.\nCannot be used in combination with `incidents`.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types)\nfor a list of incident types."
				}
			],
			"tags": ["Process Definition"]
		}},
		"/history/decision-requirements-definition/{id}/statistics": {"get": {
			"summary": "Get DRD Statistics",
			"operationId": "getDecisionStatistics",
			"description": "Retrieves evaluation statistics of a given decision requirements definition.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/HistoricDecisionInstanceStatisticsDto"}
						},
						"examples": {
							"example-1": {
								"summary": "request",
								"description": "GET `/history/decision-requirements-definition/invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c/statistics`",
								"value": [{
									"evaluations": 1,
									"decisionDefinitionKey": "dish-decision"
								}]
							},
							"example-2": {
								"summary": "request with decisionInstanceId",
								"description": "GET `/history/decision-requirements-definition/invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c/statistics?decisionInstanceId=17`",
								"value": [{
									"evaluations": 1,
									"decisionDefinitionKey": "dish-decision"
								}]
							}
						}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the decision requirements definition.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionInstanceId",
					"description": "Restrict query results to be based only on specific evaluation\ninstance of a given decision requirements definition."
				}
			],
			"tags": ["Historic Decision Requirements Definition"]
		}},
		"/task/{id}/attachment": {"get": {
			"summary": "Get List",
			"operationId": "getAttachments",
			"description": "Gets the attachments for a task.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/AttachmentDto"}
						},
						"examples": {"example-1": {
							"summary": "GET /task/aTaskId/attachment",
							"value": [
								{
									"createTime": "2017-02-10T14:33:19.000+0200",
									"name": "attachmentName",
									"description": "attachmentDescription",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "attachmentId",
									"type": "attachmentType",
									"taskId": "aTaskId",
									"url": "http://my-attachment-content-url.de",
									"removalTime": "2018-02-10T14:33:19.000+0200"
								},
								{
									"createTime": "2017-02-10T14:33:19.000+0200",
									"name": "anotherAttachmentName",
									"description": "anotherAttachmentDescription",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "anotherAttachmentId",
									"type": "anotherAttachmentType",
									"taskId": "aTaskId",
									"url": "http://my-another-attachment-content-url.de",
									"removalTime": "2018-02-10T14:33:19.000+0200"
								},
								{
									"createTime": "2017-02-10T14:33:19.000+0200",
									"name": "yetAnotherAttachmentName",
									"description": "yetAnotherAttachmentDescription",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "yetAnotherAttachmentId",
									"type": "yetAnotherAttachmentType",
									"taskId": "aTaskId",
									"url": "http://yet-another-attachment-content-url.de",
									"removalTime": "2018-02-10T14:33:19.000+0200"
								}
							]
						}}
					}}
				},
				"404": {
					"description": "No task exists for the given task id. See the [Introduction](/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to retrieve the attachments for.",
				"required": true
			}],
			"tags": ["Task Attachment"]
		}},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/statistics": {"get": {
			"summary": "Get Activity Instance Statistics",
			"operationId": "getActivityStatisticsByProcessDefinitionKeyAndTenantId",
			"description": "Retrieves runtime statistics of the latest version of the given process definition for a tenant,\ngrouped by activities.\nThese statistics include the number of running activity instances, optionally the number of failed jobs\nand also optionally the number of incidents either grouped by incident types or\nfor a specific incident type.\n**Note**: This does not include historic data.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/ActivityStatisticsResultDto"}
						},
						"examples": {
							"example-3": {
								"summary": "GET /process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/statistics?incidentsForType=anIncident",
								"description": "Request with Query Parameter `incidentsForType=anIncident`",
								"value": [{
									"instances": 123,
									"failedJobs": 0,
									"incidents": [{
										"incidentCount": 20,
										"incidentType": "anIncident"
									}],
									"id": "anActivity"
								}]
							},
							"example-1": {
								"summary": "GET /process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/statistics?failedJobs=true",
								"description": "Request with Query Parameter `failedJobs=true`",
								"value": [
									{
										"instances": 123,
										"failedJobs": 42,
										"incidents": [],
										"id": "anActivity"
									},
									{
										"instances": 124,
										"failedJobs": 43,
										"incidents": [],
										"id": "anotherActivity"
									}
								]
							},
							"example-2": {
								"summary": "GET /process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/statistics?incidents=true",
								"description": "Request with Query Parameter `incidents=true`",
								"value": [
									{
										"instances": 123,
										"failedJobs": 0,
										"incidents": [
											{
												"incidentCount": 42,
												"incidentType": "failedJob"
											},
											{
												"incidentCount": 20,
												"incidentType": "anIncident"
											}
										],
										"id": "anActivity"
									},
									{
										"instances": 124,
										"failedJobs": 0,
										"incidents": [
											{
												"incidentCount": 43,
												"incidentType": "failedJob"
											},
											{
												"incidentCount": 22,
												"incidentType": "anIncident"
											},
											{
												"incidentCount": 15,
												"incidentType": "anotherIncident"
											}
										],
										"id": "anotherActivity"
									}
								]
							}
						}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given key does not exist.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definition belongs to.",
					"required": true
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "failedJobs",
					"description": "Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "incidents",
					"description": "Valid values for this property are `true` or `false`.\nIf this property has been set to `true` the result will include the corresponding number of incidents\nfor each occurred incident type.\nIf it is set to `false`, the incidents will not be included in the result.\nCannot be used in combination with `incidentsForType`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentsForType",
					"description": "If this property has been set with any incident type (i.e., a string value) the result\nwill only include the number of incidents for the assigned incident type.\nCannot be used in combination with `incidents`.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types)\nfor a list of incident types."
				}
			],
			"tags": ["Process Definition"]
		}},
		"/process-instance/suspended": {"put": {
			"summary": "Activate/Suspend In Group",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ProcessInstanceSuspensionStateDto"},
				"examples": {
					"example-3": {
						"summary": "PUT `/process-instance/suspended`",
						"description": "Suspend Process Instance In Group",
						"value": {
							"processInstanceIds": [
								"processInstanceId1",
								"processInstanceIdN"
							],
							"suspended": true
						}
					},
					"example-1": {
						"summary": "PUT `/process-instance/suspended`",
						"description": "Suspend Process Instance By Process Definition Id",
						"value": {
							"processDefinitionId": "aProcDefId",
							"suspended": true
						}
					},
					"example-2": {
						"summary": "PUT `/process-instance/suspended`",
						"description": "Suspend Process Instance By Process Definition Key",
						"value": {
							"suspended": true,
							"processDefinitionKey": "aProcDefKey"
						}
					}
				}
			}}},
			"operationId": "updateSuspensionState",
			"description": "Activates or suspends process instances by providing certain criteria:\n\n# Activate/Suspend Process Instance By Process Definition Id\n* `suspend`\n* `processDefinitionId`\n\n# Activate/Suspend Process Instance By Process Definition Key\n\n* `suspend`\n* `processDefinitionKey`\n* `processDefinitionTenantId`\n* `processDefinitionWithoutTenantId`\n\n# Activate/Suspend Process Instance In Group\n* `suspend`\n* `processInstanceIds`\n* `processInstanceQuery`\n* `historicProcessInstanceQuery`",
			"responses": {
				"400": {
					"description": "Bad Request\nReturned if some of the request parameters are invalid,\nfor example if the provided processDefinitionId or processDefinitionKey parameter is null.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."}
			},
			"tags": ["Process Instance"]
		}},
		"/authorization/check": {"get": {
			"summary": "Perform an Authorization Check",
			"operationId": "isUserAuthorized",
			"description": "Performs an authorization check for the currently authenticated user.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/AuthorizationCheckResultDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "GET `/authorization/check?permissionName=READ,resourceName=USER,resourceType=1,resourceId=jonny`",
							"value": {
								"resourceId": "jonny",
								"authorized": true,
								"resourceName": "USER",
								"permissionName": "READ"
							}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a permission\nparameterName is not valid for the provided resourceType. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"401": {
					"description": "The user is not authenticated. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "When a `userId` is passed and the user does not possess a READ permission for the\nAuthorization resource. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Authorization with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "permissionName",
					"description": "String value representing the permission name to check for.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceName",
					"description": "String value for the name of the resource to check permissions for.",
					"required": true
				},
				{
					"schema": {
						"format": "int32",
						"type": "integer"
					},
					"in": "query",
					"name": "resourceType",
					"description": "An integer representing the resource type to check permissions for.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#resources)\nfor a list of integer representations of resource types.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceId",
					"description": "The id of the resource to check permissions for. If left blank,\na check for global permissions on the resource is performed."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "userId",
					"description": "The id of the user to check permissions for. The currently authenticated\nuser must have a READ permission for the Authorization resource. If `userId` is\nblank, a check for the currently authenticated user is performed."
				}
			],
			"tags": ["Authorization"]
		}},
		"/decision-definition/{id}/history-time-to-live": {"put": {
			"summary": "Update History Time to Live",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/HistoryTimeToLiveDto"},
				"examples": {"example-1": {
					"summary": "PUT `/decision-definition/aDecisionDefinitionId/history-time-to-live`",
					"value": {"historyTimeToLive": 5}
				}}
			}}},
			"operationId": "updateHistoryTimeToLiveByDecisionDefinitionId",
			"description": "Updates history time to live for decision definition.\nThe field is used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).",
			"responses": {
				"400": {
					"description": "Returned if some of the request parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Decision definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the decision definition to change history time to live.",
				"required": true
			}],
			"tags": ["Decision Definition"]
		}},
		"/history/job-log/{id}/stacktrace": {"get": {
			"summary": "Get Job Log Exception Stacktrace",
			"operationId": "getStacktraceHistoricJobLog",
			"description": "Retrieves the corresponding exception stacktrace to the passed historic job log by\nid.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"text/plain": {
						"schema": {},
						"examples": {"example-1": {
							"summary": "response",
							"description": "GET `history/job-log/someId/stacktrace`\n\n                                       The result is the corresponding stacktrace as plain text.",
							"value": "java.lang.RuntimeException: A exception message!\n                                  at org.camunda.bpm.pa.service.FailingDelegate.execute(FailingDelegate.java:10)\n                                  at org.camunda.bpm.engine.impl.delegate.JavaDelegateInvocation.invoke(JavaDelegateInvocation.java:34)\n                                  at org.camunda.bpm.engine.impl.delegate.DelegateInvocation.proceed(DelegateInvocation.java:37)\n                                  ..."
						}}
					}}
				},
				"404": {
					"description": "Historic job log with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the historic job log to get the exception stacktrace for.",
				"required": true
			}],
			"tags": ["Historic Job Log"]
		}},
		"/execution/{id}/localVariables/{varName}": {
			"get": {
				"summary": "Get Local Execution Variable",
				"operationId": "getLocalExecutionVariable",
				"description": "Retrieves a variable from the context of a given execution by id. Does not traverse\nthe parent execution hierarchy.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/VariableValueDto"},
							"examples": {
								"example-1": {
									"summary": "GET `/execution/anExecutionId/localVariables/aVarName`",
									"description": "GET `/execution/anExecutionId/localVariables/aVarName`",
									"value": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": {
											"prop2": "b",
											"prop1": "a"
										}
									}
								},
								"example-2": {
									"summary": "GET `/execution/anExecutionId/localVariables/aVarName?deserializeValue=false`",
									"description": "GET `/execution/anExecutionId/localVariables/aVarName?deserializeValue=false`",
									"value": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": "<myobj><prop1>a<\/prop1><prop2>b<\/prop2><\/myobj>"
									}
								}
							}
						}}
					},
					"404": {
						"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the execution to retrieve the variable from.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to get.",
						"required": true
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deserializeValue",
						"description": "Determines whether serializable variable values (typically\nvariables that store custom Java objects) should be deserialized\non server side (default `true`).\n\nIf set to `true`, a serializable variable will be deserialized on\nserver side and transformed to JSON using\n[Jackson's](https://github.com/FasterXML/jackson) POJO/bean\nproperty introspection feature. Note that this requires the Java\nclasses of the variable value to be on the REST API's classpath.\nIf set to `false`, a serializable variable will be returned in its\nserialized format. For example, a variable that is serialized as\nXML will be returned as a JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of\nbackward compatibility, we recommend setting this parameter to\n`false` when developing web applications that are independent of\nthe Java process applications deployed to the engine."
					}
				],
				"tags": ["Execution"]
			},
			"delete": {
				"summary": "Delete Local Execution Variable",
				"operationId": "deleteLocalExecutionVariable",
				"description": "Deletes a variable in the context of a given execution by id. Deletion does not\npropagate upwards in the execution hierarchy.",
				"responses": {"204": {"description": "Request successful. This method returns no content."}},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the execution to delete the variable from.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to delete.",
						"required": true
					}
				],
				"tags": ["Execution"]
			},
			"put": {
				"summary": "Put Local Execution Variable",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/VariableValueDto"},
					"examples": {
						"example-1": {
							"summary": "PUT `/execution/anExecutionId/localVariables/aVarName`",
							"value": {
								"type": "String",
								"value": "someValue"
							}
						},
						"example-2": {
							"summary": "PUT `/execution/anExecutionId/localVariables/aVarName`",
							"value": {
								"valueInfo": {
									"objectTypeName": "com.example.MyObject",
									"serializationDataFormat": "application/xml"
								},
								"type": "Object",
								"value": "<myobj><prop1>a<\/prop1><prop2>b<\/prop2><\/myobj>"
							}
						}
					}
				}}},
				"operationId": "putLocalExecutionVariable",
				"description": "Sets a variable in the context of a given execution by id. Update does not\npropagate upwards in the execution hierarchy.",
				"responses": {
					"400": {
						"description": "The variable value or type is invalid, for example if the value could not be parsed\nto an Integer value or the passed variable type is not supported.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the execution to set the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to set.",
						"required": true
					}
				],
				"tags": ["Execution"]
			}
		},
		"/version": {"get": {
			"summary": "Get Rest API version",
			"operationId": "getRestAPIVersion",
			"description": "Retrieves the version of the Rest API.",
			"responses": {"200": {
				"description": "Request successful.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/VersionDto"},
					"examples": {"example-1": {
						"summary": "Status 200 Response",
						"description": "The Response content of a status 200",
						"value": {"version": "7.13.0"}
					}}
				}}
			}},
			"tags": ["Version"]
		}},
		"/external-task/topic-names": {"get": {
			"summary": "Get External Task Topic Names",
			"operationId": "getTopicNames",
			"description": "Queries for distinct topic names of external tasks that fulfill given parameters.\nQuery can be restricted to only tasks with retries left, tasks that are locked, or tasks\nthat are unlocked. The parameters withLockedTasks and withUnlockedTasks are\nexclusive. Setting them both to true will return an empty list.\nProviding no parameters will return a list of all distinct topic names with external tasks.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"type": "string"}
						},
						"examples": {"example-1": {
							"summary": "GET /external-task/topic-names?withLockedTasks",
							"value": [
								"topic-a",
								"topic-b",
								"topic-c"
							]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.",
					"content": {"application/json": {"schema": {}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withLockedTasks",
					"description": "Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).\nValue may only be `true`, as `false` matches any external task."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withUnlockedTasks",
					"description": "Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).\nValue may only be `true`, as `false` matches any external task."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withRetriesLeft",
					"description": "Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be\n`true`, as `false` matches any external task."
				}
			],
			"tags": ["External Task"]
		}},
		"/external-task/retries-async": {"post": {
			"summary": "Set Retries Async",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SetRetriesForExternalTasksDto"},
				"examples": {"example-1": {
					"summary": "POST /external-task/retries-async",
					"value": {
						"retries": 123,
						"externalTaskIds": [
							"anExternalTask",
							"anotherExternalTask"
						]
					}
				}}
			}}},
			"operationId": "setExternalTaskRetriesAsyncOperation",
			"description": "Sets the number of retries left to execute external tasks by id asynchronously. If retries are set to 0,\nan incident is created.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"createUserId": "demo",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"jobsCreated": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "If neither externalTaskIds nor externalTaskQuery are present or externalTaskIds contains null value or \nthe number of retries is negative or null, an exception of type `InvalidRequestException` is returned.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, \ne.g., due to a caught BPMN boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["External Task"]
		}},
		"/task/{id}/delegate": {"post": {
			"summary": "Delegate",
			"requestBody": {
				"description": "Provide the id of the user that the task should be delegated to.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/UserIdDto"},
					"examples": {"example-1": {
						"summary": "Request Body",
						"description": "POST `/task/anId/delegate`",
						"value": {"userId": "aUserId"}
					}}
				}}
			},
			"operationId": "delegateTask",
			"description": "Delegates a task to another user.",
			"responses": {
				"500": {
					"description": "If the task does not exist or delegation was not successful. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to delegate.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/authorization/count": {"get": {
			"summary": "Get Authorization Count",
			"operationId": "getAuthorizationCount",
			"description": "Queries for authorizations using a list of parameters and retrieves the count.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "GET `/authorization/count?userIdIn=jonny1,jonny2`",
							"value": {"count": 2}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy` is specified. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "id",
					"description": "Filter by the id of the authorization."
				},
				{
					"schema": {
						"format": "int32",
						"type": "integer"
					},
					"in": "query",
					"name": "type",
					"description": "Filter by authorization type. (0=global, 1=grant, 2=revoke).\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#authorization-type)\nfor more information about authorization types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "userIdIn",
					"description": "Filter by a comma-separated list of userIds."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "groupIdIn",
					"description": "Filter by a comma-separated list of groupIds."
				},
				{
					"schema": {
						"format": "int32",
						"type": "integer"
					},
					"in": "query",
					"name": "resourceType",
					"description": "Filter by an integer representation of the resource type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#resources)\nfor a list of integer representations of resource types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceId",
					"description": "Filter by resource id."
				}
			],
			"tags": ["Authorization"]
		}},
		"/decision-requirements-definition/{id}/diagram": {"get": {
			"summary": "Get Decision Requirements Diagram by ID",
			"operationId": "getDecisionRequirementsDefinitionDiagramById",
			"description": "Retrieves the diagram of a decision requirements definition.",
			"responses": {
				"200": {
					"description": "The image diagram of the decision requirements definition.",
					"content": {
						"image/*": {
							"schema": {
								"format": "binary",
								"description": "For `image/*` Responses, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "GET `/decision-requirements-definition/invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c/diagram`",
								"description": "GET `/decision-requirements-definition/invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c/diagram`",
								"value": ""
							}}
						},
						"application/octet-stream": {
							"schema": {
								"format": "binary",
								"description": "For `application/octet-stream` Responses, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "GET `/decision-requirements-definition/invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c/diagram`",
								"description": "GET `/decision-requirements-definition/invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c/diagram`",
								"value": ""
							}}
						}
					}
				},
				"204": {"description": "The decision requirements definition doesn't have an associated diagram. This\nmethod returns no content."},
				"404": {
					"description": "Decision requirements definition with given id or key does not\nexist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the decision requirements definition.",
				"required": true
			}],
			"tags": ["Decision Requirements Definition"]
		}},
		"/decision-definition": {"get": {
			"summary": "Get List",
			"operationId": "getDecisionDefinitions",
			"description": "Queries for decision definitions that fulfill given parameters.\nParameters may be the properties of decision definitions, such as the name, key or version.\nThe size of the result set can be retrieved by using\nthe [Get Decision Definition Count](https://docs.camunda.org/manual/7.19/reference/rest/decision-definition/get-query-count/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/DecisionDefinitionDto"}
						},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for GET `/decision-definition?key=dish-decision&sortBy=category&sortOrder=asc`",
							"value": [{
								"resource": "drd-dish-decision.dmn",
								"decisionRequirementsDefinitionId": "dish:1:c633c195-41b7-11e6-b0ef-00aa004d0001",
								"deploymentId": "c627175e-41b7-11e6-b0ef-00aa004d0001",
								"name": "Dish Decision",
								"tenantId": null,
								"historyTimeToLive": 5,
								"versionTag": null,
								"id": "dish-decision:1:c633e8a8-41b7-11e6-b0ef-00aa004d0001",
								"category": "http://camunda.org/schema/1.0/dmn",
								"version": 1,
								"key": "dish-decision",
								"decisionRequirementsDefinitionKey": "dish"
							}]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid,\nfor example if a `sortOrder` parameter is supplied, but no `sortBy`.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {
						"type": "string",
						"enum": [
							"category",
							"decisionRequirementsDefinitionKey",
							"key",
							"id",
							"name",
							"version",
							"deploymentId",
							"deployTime",
							"versionTag",
							"tenantId"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionId",
					"description": "Filter by decision definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionIdIn",
					"description": "Filter by decision definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "name",
					"description": "Filter by decision definition name."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "nameLike",
					"description": "Filter by decision definition names that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "deploymentId",
					"description": "Filter by the deployment the id belongs to."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "deployedAfter",
					"description": "Filter by the deploy time of the deployment the decision definition belongs to.\nOnly selects decision definitions that have been deployed after (exclusive) a specific time."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "deployedAt",
					"description": "Filter by the deploy time of the deployment the decision definition belongs to.\nOnly selects decision definitions that have been deployed at a specific time (exact match)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "key",
					"description": "Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "keyLike",
					"description": "Filter by decision definition keys that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "category",
					"description": "Filter by decision definition category. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "categoryLike",
					"description": "Filter by decision definition categories that the parameter is a substring of."
				},
				{
					"schema": {
						"format": "int32",
						"type": "integer"
					},
					"in": "query",
					"name": "version",
					"description": "Filter by decision definition version."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "latestVersion",
					"description": "Only include those decision definitions that are latest versions.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceName",
					"description": "Filter by the name of the decision definition resource. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceNameLike",
					"description": "Filter by names of those decision definition resources that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionId",
					"description": "Filter by the id of the decision requirements definition this decision definition belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionKey",
					"description": "Filter by the key of the decision requirements definition this decision definition belongs to."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutDecisionRequirementsDefinition",
					"description": "Only include decision definitions which does not belongs to any decision requirements definition.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of `Strings`. A decision definition must have one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include decision definitions which belong to no tenant.\nValue can effectively only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeDecisionDefinitionsWithoutTenantId",
					"description": "Include decision definitions which belong to no tenant.\nCan be used in combination with `tenantIdIn`.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "versionTag",
					"description": "Filter by the version tag."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "versionTagLike",
					"description": "Filter by the version tags of those decision definition resources that the parameter is a substring of."
				}
			],
			"tags": ["Decision Definition"]
		}},
		"/job-definition/{id}": {"get": {
			"summary": "Get Job Definition",
			"operationId": "getJobDefinition",
			"description": "Retrieves a job definition by id, according to the `JobDefinition` interface in the engine.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/JobDefinitionDto"},
						"examples": {"example-1": {
							"summary": "GET `/job-definition/aJobDefinitionId`",
							"description": "GET `/job-definition/aJobDefinitionId`",
							"value": {
								"processDefinitionId": "aProcDefId",
								"activityId": "ServiceTask1",
								"overridingJobPriority": 15,
								"deploymentId": "aDeploymentId",
								"tenantId": null,
								"id": "aJobDefId",
								"jobConfiguration": "",
								"jobType": "asynchronous-continuation",
								"suspended": false,
								"processDefinitionKey": "aProcDefKey"
							}
						}}
					}}
				},
				"404": {
					"description": "Job definition with given id does not exist.  See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the job definition to be retrieved.",
				"required": true
			}],
			"tags": ["Job Definition"]
		}},
		"/telemetry/data": {"get": {
			"summary": "Fetch Telemetry Data",
			"operationId": "getTelemetryData",
			"description": "Fetches Telemetry Data.",
			"responses": {"200": {
				"description": "Request successful.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/TelemetryDataDto"},
					"examples": {"example-1": {
						"summary": "Status 200 Response",
						"description": "The Response content of a status 200",
						"value": {
							"product": {
								"name": "Camunda BPM Runtime",
								"edition": "enterprise",
								"version": "7.14.0",
								"internals": {
									"jdk": {
										"vendor": "Oracle Corporation",
										"version": "14.0.2"
									},
									"database": {
										"vendor": "h2",
										"version": "1.4.190 (2015-10-11)"
									},
									"camunda-integration": [
										"spring-boot-starter",
										"camunda-bpm-run"
									],
									"application-server": {
										"vendor": "Wildfly",
										"version": "WildFly Full 19.0.0.Final (WildFly Core 11.0.0.Final) - 2.0.30.Final"
									},
									"data-collection-start-date": "2022-11-320T15:53:20.386+0100",
									"webapps": [
										"cockpit",
										"admin"
									],
									"metrics": {
										"executed-decision-elements": {"count": 732},
										"flow-node-instances": {"count": 6125},
										"decision-instances": {"count": 140},
										"process-instances": {"count": 936}
									},
									"license-key": {
										"features": {"camundaBPM": "true"},
										"unlimited": false,
										"raw": "customer=customer name;expiryDate=2022-09-30;camundaBPM=true;optimize=false;cawemo=false",
										"valid-until": "2022-09-30",
										"type": "UNIFIED",
										"customer": "customer name"
									},
									"commands": {
										"FetchExternalTasksCmd": {"count": 100},
										"StartProcessInstanceCmd": {"count": 40}
									}
								}
							},
							"installation": "8343cc7a-8ad1-42d4-97d2-43452c0bdfa3"
						}
					}}
				}}
			}},
			"parameters": [],
			"tags": ["Telemetry"]
		}},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/startForm": {"get": {
			"summary": "Get Start Form Key",
			"operationId": "getStartFormByKeyAndTenantId",
			"description": "Retrieves the key of the start form for the latest version of the process definition for a tenant.\nThe form key corresponds to the `FormData#formKey` property in the engine.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/FormDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "GET `process-definition/key/aKey/tenant-id/aTenantId/startForm`",
							"value": {
								"contextPath": "http://localhost:8080/my-process-application/",
								"key": "aFormKey"
							}
						}}
					}}
				},
				"400": {
					"description": "Process definition has no start form defined. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) for which the form key is to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definition belongs to.",
					"required": true
				}
			],
			"tags": ["Process Definition"]
		}},
		"/process-definition/{id}/startForm": {"get": {
			"summary": "Get Start Form Key",
			"operationId": "getStartForm",
			"description": "Retrieves the key of the start form for a process definition.\nThe form key corresponds to the `FormData#formKey` property in the engine.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/FormDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "GET `process-definition/anId/startForm`",
							"value": {
								"contextPath": "http://localhost:8080/my-process-application/",
								"key": "aFormKey"
							}
						}}
					}}
				},
				"400": {
					"description": "Process definition has no start form defined. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given id does not exist.  See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition to get the start form key for.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/external-task/{id}/retries": {"put": {
			"summary": "Set Retries",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/RetriesDto"},
				"examples": {"example-1": {
					"summary": "PUT /external-task/anId/retries",
					"value": {"retries": 123}
				}}
			}}},
			"operationId": "setExternalTaskResourceRetries",
			"description": "Sets the number of retries left to execute an external task by id. If retries are set to 0, an \nincident is created.",
			"responses": {
				"400": {
					"description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,\ne.g., due to a caught BPMN boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "In case the number of retries is negative or null, an exception of type `InvalidRequestException`\nis returned. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the external task to set the number of retries for.",
				"required": true
			}],
			"tags": ["External Task"]
		}},
		"/job/count": {
			"post": {
				"summary": "Get Job Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/JobQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/job/count`",
						"value": {
							"dueDates": [
								{
									"value": "2012-07-17T17:00:00.000+0200",
									"operator": "gt"
								},
								{
									"value": "2012-07-17T18:00:00.000+0200",
									"operator": "lt"
								}
							],
							"createTimes": [
								{
									"value": "2012-05-05T10:00:00.000+0200",
									"operator": "gt"
								},
								{
									"value": "2012-07-16T15:00:00.000+0200",
									"operator": "lt"
								}
							]
						}
					}}
				}}},
				"operationId": "queryJobsCount",
				"description": "Queries for jobs that fulfill given parameters. This method takes the same message\nbody as the [Get Jobs POST](https://docs.camunda.org/manual/7.19/reference/rest/job/post-\nquery/) method and therefore it is slightly more powerful than the\n[Get Job Count](https://docs.camunda.org/manual/7.19/reference/rest/job/get-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"description": "POST `/job/count`",
								"value": {"count": 2}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example, if an invalid operator\nfor due date comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Job"]
			},
			"get": {
				"summary": "Get Job Count",
				"operationId": "getJobsCount",
				"description": "Queries for the number of jobs that fulfill given parameters.\nTakes the same parameters as the [Get\nJobs](https://docs.camunda.org/manual/7.19/reference/rest/job/get-query/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"description": "GET `/job/count?dueDates=gt_2012-07-17T17:00:00.000+0200,lt_2012-07-17T18:00:00.000+0200&createTimes=gt_2012-05-05T10:00:00.000+0200,lt_2012-07-16T15:00:00.000+0200`",
								"value": {"count": 2}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example, if an invalid operator\nfor due date comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobId",
						"description": "Filter by job id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobIds",
						"description": "Filter by a comma-separated list of job ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobDefinitionId",
						"description": "Only select jobs which exist for the given job definition."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Only select jobs which exist for the given process instance."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIds",
						"description": "Only select jobs which exist for the given comma-separated list of process instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Only select jobs which exist for the given execution."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the id of the process definition the jobs run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by the key of the process definition the jobs run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityId",
						"description": "Only select jobs which exist for an activity with the given id."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withRetriesLeft",
						"description": "Only select jobs which have retries left. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "executable",
						"description": "Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due\ndate is in the past. Value may only be `true`, as `false` is the default\nbehavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "timers",
						"description": "Only select jobs that are timers. Cannot be used together with `messages`. Value may only\nbe `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "messages",
						"description": "Only select jobs that are messages. Cannot be used together with `timers`. Value may only\nbe `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueDates",
						"description": "Only select jobs where the due date is lower or higher than the given date.\nDue date expressions are comma-separated and are structured as follows:\n\nA valid condition value has the form `operator_value`.\n`operator` is the comparison operator to be used and `value` the date value\nas string.\n\nValid operator values are: `gt` - greater than; `lt` - lower than.\n`value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createTimes",
						"description": "Only select jobs created before or after the given date.\n\nCreate time expressions are comma-separated and are structured as\nfollows:\n\nA valid condition value has the form `operator_value`.\n`operator` is the comparison operator to be used and `value` the date value\nas string.\n\nValid operator values are: `gt` - greater than; `lt` - lower than.\n`value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withException",
						"description": "Only select jobs that failed due to an exception. Value may only be `true`, as `false` is\nthe default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "exceptionMessage",
						"description": "Only select jobs that failed due to an exception with the given message."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "failedActivityId",
						"description": "Only select jobs that failed due to an exception at an activity with the given id."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "noRetriesLeft",
						"description": "Only select jobs which have no retries left. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "active",
						"description": "Only include active jobs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended jobs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityLowerThanOrEquals",
						"description": "Only include jobs with a priority lower than or equal to the given value. Value must be a\nvalid `long` value."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityHigherThanOrEquals",
						"description": "Only include jobs with a priority higher than or equal to the given value. Value must be a\nvalid `long` value."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include jobs which belong to one of the passed comma-separated tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "includeJobsWithoutTenantId",
						"description": "Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`.\nValue may only be `true`, as `false` is the default behavior."
					}
				],
				"tags": ["Job"]
			}
		},
		"/history/decision-instance/{id}": {"get": {
			"summary": "Get Historic Decision Instance",
			"operationId": "getHistoricDecisionInstance",
			"description": "Retrieves a historic decision instance by id, according to the \n`HistoricDecisionInstance` interface in the engine.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/HistoricDecisionInstanceDto"},
						"examples": {"example-1": {
							"summary": "request including inputs and outputs",
							"description": "GET `/history/decision-instance/aDecisionInstId?includeInput=true&includeOutputs=true`",
							"value": {
								"outputs": [{
									"variableName": "result",
									"decisionInstanceId": "67ea2c3f-579d-11e5-9848-f0def1e59da8",
									"errorMessage": null,
									"valueInfo": {},
									"clauseId": "clause3",
									"type": "String",
									"removalTime": null,
									"createTime": "2015-09-10T11:22:06.000+0200",
									"clauseName": "Approver Group",
									"ruleOrder": 1,
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "67ea2c42-579d-11e5-9848-f0def1e59da8",
									"ruleId": "DecisionRule_1of5a87",
									"value": "accounting"
								}],
								"processDefinitionId": "invoice:1:4c6e3197-579d-11e5-9848-f0def1e59da8",
								"processInstanceId": "67e98fec-579d-11e5-9848-f0def1e59da8",
								"rootDecisionInstanceId": null,
								"caseDefinitionId": null,
								"inputs": [
									{
										"decisionInstanceId": "67ea2c3f-579d-11e5-9848-f0def1e59da8",
										"createTime": "2015-09-10T11:22:06.000+0200",
										"clauseName": "Invoice Amount",
										"errorMessage": null,
										"valueInfo": {},
										"rootProcessInstanceId": "aRootProcessInstanceId",
										"clauseId": "clause1",
										"id": "67ea2c41-579d-11e5-9848-f0def1e59da8",
										"type": "Double",
										"value": 123,
										"removalTime": null
									},
									{
										"decisionInstanceId": "67ea2c3f-579d-11e5-9848-f0def1e59da8",
										"createTime": "2015-09-10T11:22:06.000+0200",
										"clauseName": "Invoice Category",
										"errorMessage": null,
										"valueInfo": {},
										"rootProcessInstanceId": "aRootProcessInstanceId",
										"clauseId": "clause2",
										"id": "67ea2c40-579d-11e5-9848-f0def1e59da8",
										"type": "String",
										"value": "Misc",
										"removalTime": null
									}
								],
								"caseDefinitionKey": null,
								"caseInstanceId": null,
								"decisionDefinitionKey": "invoice-assign-approver",
								"activityInstanceId": "assignApprover:67e9de1e-579d-11e5-9848-f0def1e59da8",
								"evaluationTime": "2015-09-10T11:22:06.000+0200",
								"userId": null,
								"removalTime": null,
								"processDefinitionKey": "invoice",
								"activityId": "assignApprover",
								"decisionDefinitionId": "invoice-assign-approver:1:4c864d79-579d-11e5-9848-f0def1e59da8",
								"decisionRequirementsDefinitionId": null,
								"decisionDefinitionName": "Assign Approver",
								"tenantId": null,
								"rootProcessInstanceId": "f8259e5d-ab9d-11e8-8449-e4a7a094a9d6",
								"id": "67ea2c3f-579d-11e5-9848-f0def1e59da8",
								"collectResultValue": null,
								"decisionRequirementsDefinitionKey": null
							}
						}}
					}}
				},
				"404": {
					"description": "Historic decision instance with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the historic decision instance to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeInputs",
					"description": "Include input values in the result.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeOutputs",
					"description": "Include output values in the result.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "disableBinaryFetching",
					"description": "Disables fetching of byte array input and output values.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "disableCustomObjectDeserialization",
					"description": "Disables deserialization of input and output values that are custom objects.\nValue may only be `true`, as `false` is the default behavior."
				}
			],
			"tags": ["Historic Decision Instance"]
		}},
		"/task/{id}/variables": {
			"post": {
				"summary": "Update/Delete Task Variables",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/PatchVariablesDto"},
					"examples": {"example-1": {
						"summary": "POST `/task/aTaskId/variables`",
						"description": "Status 204 Response: No content.",
						"value": {
							"deletions": [
								"aThirdVariable",
								"FourthVariable"
							],
							"modifications": {
								"aVariable": {
									"type": "String",
									"value": "aValue"
								},
								"anotherVariable": {
									"type": "Integer",
									"value": 42
								}
							}
						}
					}}
				}}},
				"operationId": "modifyTaskVariables",
				"description": "Updates or deletes the variables visible from the task. Updates precede deletions. So, if a variable is\nupdated AND deleted, the deletion overrides the update. A variable is visible from the task if it is a\nlocal task variable or declared in a parent scope of the task. See documentation on\n[visiblity of variables](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/).",
				"responses": {
					"400": {
						"description": "The variable value or type is invalid. For example the value could not be parsed to an `Integer` value\nor the passed variable type is not supported. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"500": {
						"description": "Update or delete could not be executed because the task is `null` or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the task to set variables for.",
					"required": true
				}],
				"tags": ["Task Variable"]
			},
			"get": {
				"summary": "Get Task Variables",
				"operationId": "getTaskVariables",
				"description": "Retrieves all variables visible from the task. A variable is visible from the task if it is a local task\nvariable or declared in a parent scope of the task. See documentation on\n[visiblity of variables](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/).",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
								"type": "object"
							},
							"examples": {
								"example-1": {
									"summary": "GET `/task/aTaskId/variables`",
									"value": {"aVariableKey": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": {
											"prop2": "b",
											"prop1": "a"
										}
									}}
								},
								"example-2": {
									"summary": "GET `/task/aTaskId/variables?deserializeValue=false`",
									"value": {"aVariableKey": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": "ab"
									}}
								}
							}
						}}
					},
					"500": {
						"description": "Task id is `null` or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to retrieve the variables from.",
						"required": true
					},
					{
						"schema": {
							"default": true,
							"type": "boolean"
						},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically variables that store custom Java objects)\nshould be deserialized on the server side (default `true`).\nIf set to `true`, a serializable variable will be deserialized on server side and transformed to JSON\nusing [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.\nNote that this requires the Java classes of the variable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string containing XML.\n\nNote: While `true` is the default value for reasons of backward compatibility, we recommend setting this\nparameter to `false` when developing web applications that are independent of the Java process\napplications deployed to the engine."
					}
				],
				"tags": ["Task Variable"]
			}
		},
		"/task/{id}/claim": {"post": {
			"summary": "Claim",
			"requestBody": {
				"description": "Provide the id of the user that claims the task.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/UserIdDto"},
					"examples": {"example-1": {
						"summary": "Request Body",
						"description": "POST `/task/anId/claim`",
						"value": {"userId": "aUserId"}
					}}
				}}
			},
			"operationId": "claim",
			"description": "Claims a task for a specific user.\n\n**Note:** The difference with the\n[Set Assignee](https://docs.camunda.org/manual/7.19/reference/rest/task/post-assignee/)\nmethod is that here a check is performed to see if the task already has a user\nassigned to it.",
			"responses": {
				"500": {
					"description": "Task with given id does not exist or claiming was not successful. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to claim.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/group/{id}": {
			"get": {
				"summary": "Get Group",
				"operationId": "getGroup",
				"description": "Retrieves a group by id.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/GroupDto"},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "GET `/group/sales`",
								"value": {
									"name": "Sales",
									"id": "sales",
									"type": "Organizational Unit"
								}
							}}
						}}
					},
					"404": {
						"description": "Group with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the group to be retrieved.",
					"required": true
				}],
				"tags": ["Group"]
			},
			"options": {
				"summary": "Group Resource Instance Options",
				"operationId": "availableGroupInstanceOperations",
				"description": "The `/group` resource supports two custom OPTIONS requests, one for the resource as such and this one for individual group instances.\nThe OPTIONS request allows checking for the set of available operations that the currently authenticated user can perform on the\n`/group/{id}` resource instance. If the user can perform an operation or not may depend on various things, including the users authorizations\nto interact with this resource and the internal configuration of the process engine.",
				"responses": {"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "OPTIONS `/group/aGroupId`",
							"value": {"links": [
								{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:8080/engine-rest/group/aGroupId"
								},
								{
									"method": "DELETE",
									"rel": "delete",
									"href": "http://localhost:8080/engine-rest/group/aGroupId"
								},
								{
									"method": "PUT",
									"rel": "update",
									"href": "http://localhost:8080/engine-rest/group/aGroupId"
								}
							]}
						}}
					}}
				}},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the group.",
					"required": true
				}],
				"tags": ["Group"]
			},
			"delete": {
				"summary": "Delete Group",
				"operationId": "deleteGroup",
				"description": "Deletes a group by id.",
				"responses": {
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "Identity service is read-only (Cannot modify users / groups / memberships).",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "Group cannot be found. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for\nthe error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the group to be deleted.",
					"required": true
				}],
				"tags": ["Group"]
			},
			"put": {
				"summary": "Update Group",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/GroupDto"},
					"examples": {"example-1": {
						"summary": "PUT `/group/sales`",
						"value": {
							"name": "Sales",
							"id": "sales",
							"type": "Organizational Unit"
						}
					}}
				}}},
				"operationId": "updateGroup",
				"description": "Updates a given group by id.",
				"responses": {
					"500": {
						"description": "The group could not be updated due to an internal server error.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error\nresponse format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. No content."},
					"403": {
						"description": "Identity service is read-only (Cannot modify users / groups / memberships).",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "If the group with the requested Id cannot be found.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the group.",
					"required": true
				}],
				"tags": ["Group"]
			}
		},
		"/tenant/{id}/group-members": {"options": {
			"summary": "Tenant Group Membership Resource Options",
			"operationId": "availableTenantGroupMembersOperations",
			"description": "The OPTIONS request allows checking for the set of available operations that the\ncurrently authenticated user can perform on the resource. If the user\ncan perform an operation or not may depend on various things,\nincluding the users authorizations to interact with this resource and\nthe internal configuration of the process engine.",
			"responses": {"200": {
				"description": "Request successful.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
					"examples": {"example-1": {
						"summary": "Status 200.",
						"description": "OPTIONS `/tenant/tenantOne/group-members`",
						"value": {"links": [
							{
								"method": "DELETE",
								"rel": "delete",
								"href": "http://localhost:8080/engine-rest/tenant/tenantOne/group-members"
							},
							{
								"method": "PUT",
								"rel": "create",
								"href": "http://localhost:8080/engine-rest/tenant/tenantOne/group-members"
							}
						]}
					}}
				}}
			}},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the tenant",
				"required": true
			}],
			"tags": ["Tenant"]
		}},
		"/external-task/count": {
			"post": {
				"summary": "Get List Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ExternalTaskQueryDto"},
					"examples": {"example-1": {
						"summary": "POST /external-task/count",
						"value": {
							"withRetriesLeft": true,
							"topicName": "aTopicName"
						}
					}}
				}}},
				"operationId": "queryExternalTasksCount",
				"description": "Queries for the number of external tasks that fulfill given parameters. This method takes the same message\nbody as the [Get External Tasks (POST)](https://docs.camunda.org/manual/7.19/reference/rest/external-task/post-query/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200 Response",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["External Task"]
			},
			"get": {
				"summary": "Get List Count",
				"operationId": "getExternalTasksCount",
				"description": "Queries for the number of external tasks that fulfill given parameters. Takes the same parameters as the\n[Get External Tasks](https://docs.camunda.org/manual/7.19/reference/rest/external-task/get-query/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "GET /external-task/count?topicName=aTopic",
								"value": {"count": 42}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "externalTaskId",
						"description": "Filter by an external task's id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "externalTaskIdIn",
						"description": "Filter by the comma-separated list of external task ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "topicName",
						"description": "Filter by an external task topic."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "workerId",
						"description": "Filter by the id of the worker that the task was most recently locked by."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "locked",
						"description": "Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).\nValue may only be `true`, as `false` matches any external task."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "notLocked",
						"description": "Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).\nValue may only be `true`, as `false` matches any external task."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withRetriesLeft",
						"description": "Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be\n`true`, as `false` matches any external task."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "noRetriesLeft",
						"description": "Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any\nexternal task."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "lockExpirationAfter",
						"description": "Restrict to external tasks that have a lock that expires after a given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "lockExpirationBefore",
						"description": "Restrict to external tasks that have a lock that expires before a given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityId",
						"description": "Filter by the id of the activity that an external task is created for."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityIdIn",
						"description": "Filter by the comma-separated list of ids of the activities that an external task is created for."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Filter by the id of the execution that an external task belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by the id of the process instance that an external task belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIdIn",
						"description": "Filter by a comma-separated list of process instance ids that an external task may belong to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the id of the process definition that an external task belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of tenant ids.\nAn external task must have one of the given tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "active",
						"description": "Only include active tasks. Value may only be `true`, as `false` matches any external task."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended tasks. Value may only be `true`, as `false` matches any external task."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityHigherThanOrEquals",
						"description": "Only include jobs with a priority higher than or equal to the given value.\nValue must be a valid `long` value."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityLowerThanOrEquals",
						"description": "Only include jobs with a priority lower than or equal to the given value.\nValue must be a valid `long` value."
					}
				],
				"tags": ["External Task"]
			}
		},
		"/job/{id}/stacktrace": {"get": {
			"summary": "Get Exception Stacktrace",
			"operationId": "getStacktrace",
			"description": "Retrieves the exception stacktrace corresponding to the passed job id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"text/plain": {
						"schema": {},
						"examples": {"example-1": {
							"description": "GET `/job/aJobId/stacktrace`",
							"value": "java.lang.RuntimeException: A exception message!\n                                 at org.camunda.bpm.pa.service.FailingDelegate.execute(FailingDelegate.java:10)\n                                 at org.camunda.bpm.engine.impl.delegate.JavaDelegateInvocation.invoke(JavaDelegateInvocation.java:34)\n                                 at org.camunda.bpm.engine.impl.delegate.DelegateInvocation.proceed(DelegateInvocation.java:37)\n                                 ..."
						}}
					}}
				},
				"404": {
					"description": "Job with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the job to get the exception stacktrace for.",
				"required": true
			}],
			"tags": ["Job"]
		}},
		"/deployment/{id}/resources/{resourceId}": {"get": {
			"summary": "Get Resource",
			"operationId": "getDeploymentResource",
			"description": "Retrieves a deployment resource by resource id for the given deployment.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DeploymentResourceDto"},
						"examples": {"example-1": {
							"summary": "GET `/deployments/someDeploymentId/resources/someResourceId`",
							"value": {
								"deploymentId": "someDeploymentId",
								"name": "someResourceName",
								"id": "someResourceId"
							}
						}}
					}}
				},
				"404": {
					"description": "Deployment Resource with given resource id or deployment id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the deployment",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "resourceId",
					"description": "The id of the deployment resource",
					"required": true
				}
			],
			"tags": ["Deployment"]
		}},
		"/decision-definition/count": {"get": {
			"summary": "Get List Count",
			"operationId": "getDecisionDefinitionsCount",
			"description": "Requests the number of decision definitions that fulfill the query criteria.\nTakes the same filtering parameters as the\n[Get Decision Definition](https://docs.camunda.org/manual/7.19/reference/rest/decision-definition/get-query/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for GET `/decision-definition/count?key=dish-decision&version=2`",
							"value": {"count": 1}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionId",
					"description": "Filter by decision definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionIdIn",
					"description": "Filter by decision definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "name",
					"description": "Filter by decision definition name."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "nameLike",
					"description": "Filter by decision definition names that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "deploymentId",
					"description": "Filter by the deployment the id belongs to."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "deployedAfter",
					"description": "Filter by the deploy time of the deployment the decision definition belongs to.\nOnly selects decision definitions that have been deployed after (exclusive) a specific time."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "deployedAt",
					"description": "Filter by the deploy time of the deployment the decision definition belongs to.\nOnly selects decision definitions that have been deployed at a specific time (exact match)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "key",
					"description": "Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "keyLike",
					"description": "Filter by decision definition keys that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "category",
					"description": "Filter by decision definition category. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "categoryLike",
					"description": "Filter by decision definition categories that the parameter is a substring of."
				},
				{
					"schema": {
						"format": "int32",
						"type": "integer"
					},
					"in": "query",
					"name": "version",
					"description": "Filter by decision definition version."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "latestVersion",
					"description": "Only include those decision definitions that are latest versions.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceName",
					"description": "Filter by the name of the decision definition resource. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceNameLike",
					"description": "Filter by names of those decision definition resources that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionId",
					"description": "Filter by the id of the decision requirements definition this decision definition belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionKey",
					"description": "Filter by the key of the decision requirements definition this decision definition belongs to."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutDecisionRequirementsDefinition",
					"description": "Only include decision definitions which does not belongs to any decision requirements definition.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of `Strings`. A decision definition must have one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include decision definitions which belong to no tenant.\nValue can effectively only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeDecisionDefinitionsWithoutTenantId",
					"description": "Include decision definitions which belong to no tenant.\nCan be used in combination with `tenantIdIn`.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "versionTag",
					"description": "Filter by the version tag."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "versionTagLike",
					"description": "Filter by the version tags of those decision definition resources that the parameter is a substring of."
				}
			],
			"tags": ["Decision Definition"]
		}},
		"/process-definition/key/{key}/rendered-form": {"get": {
			"summary": "Get Rendered Start Form",
			"operationId": "getRenderedStartFormByKey",
			"description": "Retrieves  the rendered form for the latest version of the process definition which belongs to no tenant.\nThis method can be used to get the HTML rendering of a\n[Generated Task Form](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/xhtml+xml": {
						"schema": {
							"format": "binary",
							"description": "For `application/xhtml+xml` Responses, a byte stream is returned.",
							"type": "string"
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "A `/process-definition/key/anKey/rendered-form` HTML\n                                       GET response body providing the rendered (generated) form content.",
							"value": "<form class=\"form-horizontal\">\n                                  <div class=\"control-group\">\n                                    <label class=\"control-label\">Customer ID<\/label>\n                                    <div class=\"controls\">\n                                      <input form-field type=\"string\" name=\"customerId\"><\/input>\n                                    <\/div>\n                                  <\/div>\n                                  <div class=\"control-group\">\n                                    <label class=\"control-label\">Amount<\/label>\n                                    <div class=\"controls\">\n                                      <input form-field type=\"number\" name=\"amount\"><\/input>\n                                    <\/div>\n                                  <\/div>\n                                <\/form>"
						}}
					}}
				},
				"400": {
					"description": "Process definition has no form field metadata defined. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given key does not exist.  See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the process definition (the latest version thereof) to be retrieved.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/process-definition/suspended": {"put": {
			"summary": "Activate/Suspend By Key",
			"requestBody": {
				"description": "**Note**: Unallowed property is `processDefinitionId`.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ProcessDefinitionSuspensionStateDto"},
					"examples": {"example-1": {
						"summary": "PUT `/process-definition/suspended`",
						"value": {
							"executionDate": "2013-11-21T10:49:45T14:42:45",
							"includeProcessInstances": true,
							"suspended": true,
							"processDefinitionKey": "aProcessDefinitionKey"
						}
					}}
				}}
			},
			"operationId": "updateProcessDefinitionSuspensionState",
			"description": "Activates or suspends process definitions with the given process definition key.",
			"responses": {
				"400": {
					"description": "Returned if some of the query parameters are invalid,\nfor example if the provided `executionDate` parameter doesn't have the expected format or\nif the `processDefinitionKey` parameter is `null`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Process definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Process Definition"]
		}},
		"/process-definition/{id}": {
			"get": {
				"summary": "Get",
				"operationId": "getProcessDefinition",
				"description": "Retrieves a process definition according to the `ProcessDefinition` interface in the engine.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/ProcessDefinitionDto"},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response of GET `/process-definition/invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e`",
								"value": {
									"resource": "invoice.v1.bpmn",
									"startableInTasklist": true,
									"description": null,
									"historyTimeToLive": 5,
									"versionTag": null,
									"version": 1,
									"suspended": false,
									"diagram": null,
									"deploymentId": "c398cd26-2046-11e7-8f94-34f39ab71d4e",
									"name": "Invoice Receipt",
									"tenantId": null,
									"id": "invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e",
									"category": "http://www.omg.org/spec/BPMN/20100524/MODEL",
									"key": "invoice"
								}
							}}
						}}
					},
					"400": {
						"description": "Process definition with given `id` does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the process definition to be retrieved.",
					"required": true
				}],
				"tags": ["Process Definition"]
			},
			"delete": {
				"summary": "Delete",
				"operationId": "deleteProcessDefinition",
				"description": "Deletes a running process instance by id.",
				"responses": {
					"204": {"description": "Request successful."},
					"404": {
						"description": "Not found\nProcess definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the process definition to be deleted.",
						"required": true
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "cascade",
						"description": "`true`, if all process instances, historic process instances and jobs\nfor this process definition should be deleted."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipCustomListeners",
						"description": "`true`, if only the built-in ExecutionListeners should be notified with the end event."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipIoMappings",
						"description": "A boolean value to control whether input/output mappings should be executed during deletion.\n`true`, if input/output mappings should not be invoked."
					}
				],
				"tags": ["Process Definition"]
			}
		},
		"/execution/count": {
			"post": {
				"summary": "Get Execution Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ExecutionQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/execution/count`",
						"value": {
							"processDefinitionId": "aProcessDefinitionId",
							"variables": [
								{
									"name": "myVariable",
									"value": "camunda",
									"operator": "eq"
								},
								{
									"name": "mySecondVariable",
									"value": 124,
									"operator": "neq"
								}
							]
						}
					}}
				}}},
				"operationId": "queryExecutionsCount",
				"description": "Queries for the number of executions that fulfill given parameters. This method\ntakes the same message body as the [Get Executions\nPOST](https://docs.camunda.org/manual/7.19/reference/rest/execution/post-query/) method and\ntherefore it is slightly more powerful than the [Get Execution\nCount](https://docs.camunda.org/manual/7.19/reference/rest/execution/get-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"description": "POST `/execution/count`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if an invalid operator\nfor variable comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Execution"]
			},
			"get": {
				"summary": "Get Execution Count",
				"operationId": "getExecutionsCount",
				"description": "Queries for the number of executions that fulfill given parameters.\nTakes the same parameters as the [Get\nExecutions](https://docs.camunda.org/manual/7.19/reference/rest/execution/get-query/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"description": "GET `/execution/count?variables=myVariable_eq_camunda`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if an invalid operator\nfor variable comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "businessKey",
						"description": "Filter by the business key of the process instances the executions belong to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the process definition the executions run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by the key of the process definition the executions run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by the id of the process instance the execution belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityId",
						"description": "Filter by the id of the activity the execution currently executes."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "signalEventSubscriptionName",
						"description": "Select only those executions that expect a signal of the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "messageEventSubscriptionName",
						"description": "Select only those executions that expect a message of the given name."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "active",
						"description": "Only include active executions. Value may only be `true`, as `false` is the default\nbehavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended executions. Value may only be `true`, as `false` is the default\nbehavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentId",
						"description": "Filter by the incident id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentType",
						"description": "Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessage",
						"description": "Filter by the incident message. Exact match."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessageLike",
						"description": "Filter by the incident message that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of tenant ids. An execution must have one of the given\ntenant ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variables",
						"description": "Only include executions that have variables with certain values.\nVariable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n**Note:** Values are always treated as `String` objects on server side.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to; `gt` -\ngreater than;\n`gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or\nequal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processVariables",
						"description": "Only include executions that belong to a process instance with variables with certain\nvalues.\nVariable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n**Note:** Values are always treated as `String` objects on server side.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match all variable names provided in `variables` and `processVariables` case-\ninsensitively. If set to `true` **variableName** and **variablename** are\ntreated as equal."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match all variable values provided in `variables` and `processVariables` case-\ninsensitively. If set to `true` **variableValue** and **variablevalue** are\ntreated as equal."
					}
				],
				"tags": ["Execution"]
			}
		},
		"/filter/{id}/count": {
			"post": {
				"summary": "Execute Filter Count (POST)",
				"requestBody": {
					"description": "A JSON object which corresponds to the type of the saved query of the filter, i.e., if the resource type of the filter is Task the body should form a valid task query corresponding to the Task resource.",
					"content": {"application/json": {
						"schema": {"type": "object"},
						"examples": {"example-1": {
							"summary": "request",
							"description": "POST `filter/aTaskFilterId/singleResult`. Note: The examples show a task filter. So the request body corresponds to a task query. For other resource types the request body will differ.",
							"value": {
								"taskDefinitionKey": "aTaskKey",
								"assignee": "jonny1"
							}
						}}
					}}
				},
				"operationId": "postExecuteFilterCount",
				"description": "Executes the saved query of the filter by id and returns the count. This method is\nslightly more powerful then the [Get Execute Filter Count](https://docs.camunda.org/manual/7.19/reference/rest/filter/get-execute-count/) \nmethod because it allows to extend the saved query of the filter.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "request",
								"description": "POST `filter/aTaskFilterId/singleResult`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "\nThe extending query was invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"403": {
						"description": "\nThe authenticated user is unauthorized to read this filter. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "\nFilter with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the filter to execute.",
					"required": true
				}],
				"tags": ["Filter"]
			},
			"get": {
				"summary": "Execute Filter Count",
				"operationId": "executeFilterCount",
				"description": "Executes the saved query of the filter by id and returns the count.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "request",
								"description": "GET `/filter/aTaskFilterId/count`",
								"value": {"count": 2}
							}}
						}}
					},
					"403": {
						"description": "\nThe authenticated user is unauthorized to read this filter. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "\nFilter with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the filter to execute.",
					"required": true
				}],
				"tags": ["Filter"]
			}
		},
		"/task/{id}/form-variables": {"get": {
			"summary": "Get Task Form Variables",
			"operationId": "getFormVariables",
			"description": "Retrieves the form variables for a task. The form variables take form data specified\non the task into account. If form fields are defined, the variable types and default\nvalues of the form fields are taken into account.",
			"responses": {
				"200": {
					"description": "Request successful. A JSON object containing a property for each variable returned.",
					"content": {"application/json": {
						"schema": {
							"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
							"type": "object"
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "GET `/task/anId/form-variables`",
							"value": {
								"firstName": {
									"valueInfo": {},
									"type": "String",
									"value": "Jonny"
								},
								"amount": {
									"valueInfo": {},
									"type": "integer",
									"value": 5
								}
							}
						}}
					}}
				},
				"404": {
					"description": " id is null or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the task to retrieve the variables for.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "variableNames",
					"description": "A comma-separated list of variable names. Allows restricting the list of requested\nvariables to the variable names in the list. It is best practice to restrict the\nlist of variables to the variables actually required by the form in order to\nminimize fetching of data. If the query parameter is ommitted all variables are\nfetched. If the query parameter contains non-existent variable names, the variable\nnames are ignored."
				},
				{
					"schema": {
						"default": true,
						"type": "boolean"
					},
					"in": "query",
					"name": "deserializeValues",
					"description": "Determines whether serializable variable values (typically variables that store\ncustom Java objects) should be deserialized on server side (default true).\n\nIf set to true, a serializable variable will be deserialized on server side and\ntransformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean\nproperty introspection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to false, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string\ncontaining XML.\n\nNote: While true is the default value for reasons of backward compatibility, we\nrecommend setting this parameter to false when developing web applications that are\nindependent of the Java process applications deployed to the engine."
				}
			],
			"tags": ["Task"]
		}},
		"/task/{id}/submit-form": {"post": {
			"summary": "Submit Form",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/CompleteTaskDto"},
				"examples": {
					"example-1": {
						"summary": "Request Body 1",
						"description": "POST `/task/anId/submit-form`",
						"value": {"variables": {
							"aVariable": {"value": "aStringValue"},
							"anotherVariable": {"value": 42},
							"aFileVariable": {
								"valueInfo": {"filename": "myFile.txt"},
								"type": "File",
								"value": "TG9yZW0gaXBzdW0="
							},
							"aThirdVariable": {"value": true}
						}}
					},
					"example-2": {
						"summary": "Request Body 2",
						"description": "POST `/task/anId/complete`",
						"value": {
							"variables": {
								"aVariable": {"value": "aStringValue"},
								"anotherVariable": {"value": 42},
								"aThirdVariable": {"value": true}
							},
							"withVariablesInReturn": true
						}
					}
				}
			}}},
			"operationId": "submit",
			"description": "Completes a task and updates process variables using a form submit. There are two\ndifference between this method and the `complete` method:\n\n* If the task is in state `PENDING` - i.e., has been delegated before, it is not\ncompleted but resolved. Otherwise it will be completed.\n* If the task has Form Field Metadata defined, the process engine will perform backend\nvalidation for any form fields which have validators defined.\nSee the\n[Generated Task Forms](https://docs.camunda.org/manual/7.19/user-guide/task-forms/_index/#generated-task-forms)\nsection of the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/) for more information.",
			"responses": {
				"200": {
					"description": "Request successful. The response contains the process variables.",
					"content": {"application/json": {
						"schema": {
							"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
							"type": "object"
						},
						"examples": {"example-1": {
							"summary": "Response Body",
							"description": "Response of a submitted task form with variables in return",
							"value": {
								"aVariable": {
									"valueInfo": {},
									"type": "String",
									"value": "aStringValue"
								},
								"anotherVariable": {
									"valueInfo": {},
									"type": "Integer",
									"value": 42
								},
								"aThirdVariable": {
									"valueInfo": {},
									"type": "Boolean",
									"value": true
								}
							}
						}}
					}}
				},
				"400": {
					"description": "The variable value or type is invalid, for example if the value could not be parsed to an Integer value\nor the passed variable type is not supported.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for\nthe error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "If the task does not exist or the corresponding process instance could not be resumed successfully.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for\nthe error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. The response contains no variables."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to submit the form for.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/user": {
			"get": {
				"summary": "Get List",
				"operationId": "getUsers",
				"description": "Query for a list of users using a list of parameters.\nThe size of the result set can be retrieved by using the Get User Count method.\n[Get User Count](https://docs.camunda.org/manual/7.19/reference/rest/user/get-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/UserProfileDto"}
							},
							"examples": {"example-1": {
								"summary": "GET `/user?firstName=John`",
								"value": [
									{
										"firstName": "John",
										"lastName": "Doe",
										"id": "jonny1",
										"email": "anEmailAddress"
									},
									{
										"firstName": "John",
										"lastName": "Smoe",
										"id": "jonny2",
										"email": "anotherEmailAddress"
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,\nbut no `sortBy`, or if an invalid operator for variable comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "id",
						"description": "Filter by user id"
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "idIn",
						"description": "Filter by a comma-separated list of user ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "firstName",
						"description": "Filter by the first name of the user. Exact match."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "firstNameLike",
						"description": "Filter by the first name that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "lastName",
						"description": "Filter by the last name of the user. Exact match."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "lastNameLike",
						"description": "Filter by the last name that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "email",
						"description": "Filter by the email of the user. Exact match."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "emailLike",
						"description": "Filter by the email that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "memberOfGroup",
						"description": "Filter for users which are members of the given group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "memberOfTenant",
						"description": "Filter for users which are members of the given tenant."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "potentialStarter",
						"description": "Only select Users that are potential starter for the given process definition."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"userId",
								"firstName",
								"lastName",
								"email"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["User"]
			},
			"options": {
				"summary": "Options",
				"operationId": "availableOperations",
				"description": "The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such\nand one for individual user instances. The `OPTIONS` request allows checking for the set of\navailable operations that the currently authenticated user can perform on the /user resource.\nIf the user can perform an operation or not may depend on various things, including the user's\nauthorizations to interact with this resource and the internal configuration of the process\nengine. `OPTIONS /user` returns available interactions on the resource.",
				"responses": {"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
						"examples": {"example-1": {
							"summary": "GET `/user`",
							"value": {"links": [
								{
									"method": "GET",
									"rel": "list",
									"href": "http://localhost:8080/engine-rest/user"
								},
								{
									"method": "GET",
									"rel": "count",
									"href": "http://localhost:8080/engine-rest/user/count"
								},
								{
									"method": "POST",
									"rel": "create",
									"href": "http://localhost:8080/engine-rest/user/create"
								}
							]}
						}}
					}}
				}},
				"tags": ["User"]
			}
		},
		"/decision-definition/{id}": {"get": {
			"summary": "Get Decision Definition By Id",
			"operationId": "getDecisionDefinitionById",
			"description": "Retrieves a decision definition by id, according to the `DecisionDefinition` interface in the engine.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionDefinitionDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for GET `/decision-definition/aDecisionDefinitionId`",
							"value": {
								"resource": "drd-dish-decision.dmn",
								"decisionRequirementsDefinitionId": "dish:1:c633c195-41b7-11e6-b0ef-00aa004d0001",
								"deploymentId": "c627175e-41b7-11e6-b0ef-00aa004d0001",
								"name": "Dish Decision",
								"tenantId": null,
								"historyTimeToLive": 5,
								"versionTag": null,
								"id": "aDecisionDefinitionId",
								"category": "http://camunda.org/schema/1.0/dmn",
								"version": 1,
								"key": "dish-decision",
								"decisionRequirementsDefinitionKey": "dish"
							}
						}}
					}}
				},
				"404": {
					"description": "Decision definition with given id does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the decision definition to be retrieved.",
				"required": true
			}],
			"tags": ["Decision Definition"]
		}},
		"/tenant/{id}": {
			"get": {
				"summary": "Get Tenant",
				"operationId": "getTenant",
				"description": "Retrieves a tenant.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/TenantDto"},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "GET `/tenant/tenantOne`",
								"value": {
									"name": "Tenant One",
									"id": "tenantOne"
								}
							}}
						}}
					},
					"404": {
						"description": "Tenant with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the tenant to be retrieved.",
					"required": true
				}],
				"tags": ["Tenant"]
			},
			"options": {
				"summary": "Tenant Resource Options",
				"operationId": "availableTenantInstanceOperations",
				"description": "The `/tenant` resource supports two custom OPTIONS requests, one for the resource as such and this one for\nindividual tenant instances. The OPTIONS request allows checking for the set of available operations that\nthe currently authenticated user can perform on the `/tenant/{id}` resource. If the user can perform an\noperation or not may depend on various things, including the users authorizations to interact with this\nresource and the internal configuration of the process engine.",
				"responses": {"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "OPTIONS `/tenant/tenantOne`",
							"value": {"links": [
								{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:8080/engine-rest/tenant/tenantOne"
								},
								{
									"method": "DELETE",
									"rel": "delete",
									"href": "http://localhost:8080/engine-rest/tenant/tenantOne"
								},
								{
									"method": "PUT",
									"rel": "update",
									"href": "http://localhost:8080/engine-rest/tenant/tenantOne"
								}
							]}
						}}
					}}
				}},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the tenant",
					"required": true
				}],
				"tags": ["Tenant"]
			},
			"delete": {
				"summary": "Delete Tenant",
				"operationId": "deleteTenant",
				"description": "Deletes a tenant by id.",
				"responses": {
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "Identity service is read-only.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "Tenant cannot be found. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the tenant to be deleted.",
					"required": true
				}],
				"tags": ["Tenant"]
			},
			"put": {
				"summary": "Update Tenant",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/TenantDto"},
					"examples": {"example-1": {
						"summary": "PUT `/tenant/tenantOne`",
						"value": {
							"name": "Tenant One",
							"id": "tenantOne"
						}
					}}
				}}},
				"operationId": "updateTenant",
				"description": "Updates a given tenant.",
				"responses": {
					"500": {
						"description": "The tenant could not be updated due to an internal server error. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."},
					"403": {
						"description": "Identity service is read-only.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "If the tenant with the requested Id cannot be found.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the tenant.",
					"required": true
				}],
				"tags": ["Tenant"]
			}
		},
		"/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml": {"get": {
			"summary": "Get DMN XML by Key and Tenant ID",
			"operationId": "getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId",
			"description": "Retrieves the DMN XML of a decision requirements definition.\nReturns the XML of the latest version of the decision requirements \ndefinition for a tenant.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionRequirementsDefinitionXmlDto"},
						"examples": {"example-1": {
							"summary": "GET `/decision-requirements-definition/key/invoiceKey/tenant-id/tenantA/xml`",
							"description": "GET `/decision-requirements-definition/key/invoiceKey/tenant-id/tenantA/xml`",
							"value": {
								"dmnXml": "<?xml version=\"1.1\" encoding=\"UTF-8\"?>...<definitions id=\"dish\" name=\"Dish\" namespace=\"test-drg\" ... />",
								"id": "invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c"
							}
						}}
					}}
				},
				"404": {
					"description": "\nDecision requirements definition with given id or key does not\nexist.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the decision requirements definition (the latest version thereof) to be\nretrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant to which the decision requirements definition belongs to.",
					"required": true
				}
			],
			"tags": ["Decision Requirements Definition"]
		}},
		"/task/{id}": {
			"get": {
				"summary": "Get",
				"operationId": "getTask",
				"description": "Retrieves a task by id.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/TaskDto"},
							"examples": {"example-1": {
								"summary": "GET /task/anId Response",
								"value": {
									"owner": "anOwner",
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"caseExecutionId": "aCaseExecution",
									"caseDefinitionId": "aCaseDefId",
									"formKey": "aFormKey",
									"created": "2013-01-23T13:42:42.000+0200",
									"parentTaskId": "aParentId",
									"caseInstanceId": "aCaseInstId",
									"description": "aDescription",
									"priority": 42,
									"camundaFormRef": {
										"binding": "version",
										"version": 2,
										"key": "aCamundaFormKey"
									},
									"suspended": false,
									"delegationState": "RESOLVED",
									"followUp": "2013-01-23T13:44:42.437+0200",
									"executionId": "anExecution",
									"taskDefinitionKey": "aTaskDefinitionKey",
									"due": "2013-01-23T13:49:42.576+0200",
									"name": "aName",
									"tenantId": "aTenantId",
									"id": "anId",
									"assignee": "anAssignee"
								}
							}}
						}}
					},
					"404": {
						"description": "Task with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the task to be retrieved.",
					"required": true
				}],
				"tags": ["Task"]
			},
			"delete": {
				"summary": "Delete",
				"operationId": "deleteTask",
				"description": "Removes a task by id.",
				"responses": {
					"400": {
						"description": "Bad Request. The Task with the given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"500": {
						"description": "The Task with the given id cannot be deleted because it is part of a running process or case instance.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for\nthe error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the task to be removed.",
					"required": true
				}],
				"tags": ["Task"]
			},
			"put": {
				"summary": "Update",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/TaskDto"},
					"examples": {"example-1": {
						"summary": "PUT /task/aTaskId/ Response",
						"value": {
							"owner": "mary",
							"delegationState": "PENDING",
							"followUp": "2014-08-25T10:00:00.000+0200",
							"due": "2014-08-30T10:00:00.000+0200",
							"parentTaskId": "aParentTaskId",
							"caseInstanceId": "aCaseInstanceId",
							"name": "My Task",
							"tenantId": "tenantId",
							"description": "This have to be done very urgent",
							"assignee": "peter",
							"priority": 30
						}
					}}
				}}},
				"operationId": "updateTask",
				"description": "Updates a task.",
				"responses": {
					"400": {
						"description": "Returned if a not valid `delegationState` is supplied. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."},
					"404": {
						"description": "If the corresponding task cannot be found.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the task to be updated.",
					"required": true
				}],
				"tags": ["Task"]
			}
		},
		"/external-task": {
			"post": {
				"summary": "Get List (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ExternalTaskQueryDto"},
					"examples": {"example-1": {
						"summary": "POST /external-task",
						"value": {
							"processDefinitionId": "aProcessDefinitionId",
							"sorting": [
								{
									"sortOrder": "asc",
									"sortBy": "processDefinitionKey"
								},
								{
									"sortOrder": "desc",
									"sortBy": "lockExpirationTime"
								}
							]
						}
					}}
				}}},
				"operationId": "queryExternalTasks",
				"description": "Queries for external tasks that fulfill given parameters in the form of a JSON object.\n\nThis method is slightly more powerful than the\n[Get External Tasks](https://docs.camunda.org/manual/7.19/reference/rest/external-task/get-query/) method because it allows to\nspecify a hierarchical result sorting.",
				"responses": {
					"200": {
						"description": "Request successful. The Response is a JSON array of external task objects.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/ExternalTaskDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200 Response",
								"value": [
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "aProcessInstanceId",
										"workerId": "aWorkerId",
										"lockExpirationTime": "2015-10-06T16:34:42.000+0200",
										"errorMessage": "anErrorMessage",
										"activityInstanceId": "anActivityInstanceId",
										"priority": 9,
										"suspended": false,
										"processDefinitionKey": "aProcessDefinitionKey",
										"activityId": "anActivityId",
										"executionId": "anExecutionId",
										"retries": 3,
										"tenantId": null,
										"businessKey": "aBusinessKey",
										"topicName": "aTopic",
										"id": "anExternalTaskId"
									},
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "anotherProcessInstanceId",
										"workerId": "aWorkerId",
										"lockExpirationTime": "2015-10-06T16:34:42.000+0200",
										"errorMessage": "anotherErrorMessage",
										"activityInstanceId": "anotherActivityInstanceId",
										"priority": 3,
										"suspended": false,
										"processDefinitionKey": "anotherProcessDefinitionKey",
										"activityId": "anotherActivityId",
										"executionId": "anotherExecutionId",
										"retries": 1,
										"tenantId": null,
										"businessKey": "aBusinessKey",
										"topicName": "aTopic",
										"id": "anotherExternalTaskId"
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,\nbut no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["External Task"]
			},
			"get": {
				"summary": "Get List",
				"operationId": "getExternalTasks",
				"description": "Queries for the external tasks that fulfill given parameters. Parameters may be static as well as dynamic\nruntime properties of executions. The size of the result set can be retrieved by using the\n[Get External Task Count](https://docs.camunda.org/manual/7.19/reference/rest/external-task/get-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/ExternalTaskDto"}
							},
							"examples": {"example-1": {
								"summary": "GET /external-task?topicName=aTopic",
								"value": [
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "aProcessInstanceId",
										"workerId": "aWorkerId",
										"lockExpirationTime": "2015-10-06T16:34:42.000+0200",
										"errorMessage": "anErrorMessage",
										"activityInstanceId": "anActivityInstanceId",
										"priority": 9,
										"suspended": false,
										"processDefinitionKey": "aProcessDefinitionKey",
										"activityId": "anActivityId",
										"executionId": "anExecutionId",
										"retries": 3,
										"tenantId": null,
										"businessKey": "aBusinessKey",
										"topicName": "aTopic",
										"id": "anExternalTaskId"
									},
									{
										"processDefinitionId": "anotherProcessDefinitionId",
										"processInstanceId": "anotherProcessInstanceId",
										"workerId": "aWorkerId",
										"lockExpirationTime": "2015-10-06T16:34:42.000+0200",
										"errorMessage": "anotherErrorMessage",
										"activityInstanceId": "anotherActivityInstanceId",
										"priority": 3,
										"suspended": false,
										"processDefinitionKey": "anotherProcessDefinitionKey",
										"activityId": "anotherActivityId",
										"executionId": "anotherExecutionId",
										"retries": 1,
										"tenantId": null,
										"businessKey": "aBusinessKey",
										"topicName": "aTopic",
										"id": "anotherExternalTaskId"
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,\nbut no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "externalTaskId",
						"description": "Filter by an external task's id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "externalTaskIdIn",
						"description": "Filter by the comma-separated list of external task ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "topicName",
						"description": "Filter by an external task topic."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "workerId",
						"description": "Filter by the id of the worker that the task was most recently locked by."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "locked",
						"description": "Only include external tasks that are currently locked (i.e., they have a lock time and it has not expired).\nValue may only be `true`, as `false` matches any external task."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "notLocked",
						"description": "Only include external tasks that are currently not locked (i.e., they have no lock or it has expired).\nValue may only be `true`, as `false` matches any external task."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withRetriesLeft",
						"description": "Only include external tasks that have a positive (&gt; 0) number of retries (or `null`). Value may only be\n`true`, as `false` matches any external task."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "noRetriesLeft",
						"description": "Only include external tasks that have 0 retries. Value may only be `true`, as `false` matches any\nexternal task."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "lockExpirationAfter",
						"description": "Restrict to external tasks that have a lock that expires after a given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "lockExpirationBefore",
						"description": "Restrict to external tasks that have a lock that expires before a given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityId",
						"description": "Filter by the id of the activity that an external task is created for."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityIdIn",
						"description": "Filter by the comma-separated list of ids of the activities that an external task is created for."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Filter by the id of the execution that an external task belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by the id of the process instance that an external task belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIdIn",
						"description": "Filter by a comma-separated list of process instance ids that an external task may belong to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the id of the process definition that an external task belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of tenant ids.\nAn external task must have one of the given tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "active",
						"description": "Only include active tasks. Value may only be `true`, as `false` matches any external task."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended tasks. Value may only be `true`, as `false` matches any external task."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityHigherThanOrEquals",
						"description": "Only include jobs with a priority higher than or equal to the given value.\nValue must be a valid `long` value."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityLowerThanOrEquals",
						"description": "Only include jobs with a priority lower than or equal to the given value.\nValue must be a valid `long` value."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"id",
								"lockExpirationTime",
								"processInstanceId",
								"processDefinitionId",
								"processDefinitionKey",
								"taskPriority",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["External Task"]
			}
		},
		"/process-definition/key/{key}/submit-form": {"post": {
			"summary": "Submit Start Form",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/StartProcessInstanceFormDto"},
				"examples": {"example-1": {
					"summary": "POST `/process-definition/key/aProcessDefinitionKey/submit-form`",
					"value": {
						"variables": {
							"aVariable": {
								"type": "String",
								"value": "aStringValue"
							},
							"anotherVariable": {
								"type": "Boolean",
								"value": true
							}
						},
						"businessKey": "myBusinessKey"
					}
				}}
			}}},
			"operationId": "submitFormByKey",
			"description": "Starts the latest version of the process definition which belongs to no tenant\nusing a set of process variables and the business key.\nIf the start event has Form Field Metadata defined, the process engine will perform backend validation\nfor any form fields which have validators defined.\nSee [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ProcessInstanceDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response 1",
							"description": "POST `/process-definition/key/aProcessDefinitionKey/submit-form`",
							"value": {
								"caseInstanceId": null,
								"businessKey": "myBusinessKey",
								"tenantId": null,
								"ended": false,
								"links": [{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:8080/rest-test/process-instance/anId"
								}],
								"id": "anId",
								"suspended": false,
								"definitionId": "aProcessDefinitionId"
							}
						}}
					}}
				},
				"400": {
					"description": "The instance could not be created due to an invalid variable value,\nfor example if the value could not be parsed to an `Integer` value or\nthe passed variable type is not supported.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The instance could not be created successfully.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given key does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the process definition to submit the form for.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/history/process-instance/count": {
			"post": {
				"summary": "Get List Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/process-instance/count`",
						"value": {
							"finishedAfter": "2013-01-01T00:00:00.000+0200",
							"variables": [
								{
									"name": "myVariable",
									"value": "camunda",
									"operator": "eq"
								},
								{
									"name": "mySecondVariable",
									"value": 124,
									"operator": "neq"
								}
							],
							"executedActivityAfter": "2013-03-23T13:42:44.000+0200",
							"finishedBefore": "2013-04-01T23:59:59.000+0200"
						}
					}}
				}}},
				"operationId": "queryHistoricProcessInstancesCount",
				"description": "Queries for the number of historic process instances that fulfill the given parameters.\nThis method takes the same message body as the [Get Process Instances (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/process-instance/get-process-instance-query/) method and\ntherefore it is slightly more powerful than the [Get Process Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/process-instance/post-process-instance-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200 Response 1",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Historic Process Instance"]
			},
			"get": {
				"summary": "Get List Count",
				"operationId": "getHistoricProcessInstancesCount",
				"description": "Queries for the number of historic process instances that fulfill the given parameters.\nTakes the same parameters as the [Get Process Instances](https://docs.camunda.org/manual/7.19/reference/rest/history/process-instance/get-process-instance-query/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response for GET `/history/process-instance/count?variables=myVariable_eq_camunda`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIds",
						"description": "Filter by process instance ids. Filter by a comma-separated list of `Strings`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the process definition the instances run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by the key of the process definition the instances run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKeyIn",
						"description": "Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of `Strings`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionName",
						"description": "Filter by the name of the process definition the instances run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionNameLike",
						"description": "Filter by process definition names that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKeyNotIn",
						"description": "Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of `Strings`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKey",
						"description": "Filter by process instance business key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyIn",
						"description": "Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of `Strings`"
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyLike",
						"description": "Filter by process instance business key that the parameter is a substring of."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "rootProcessInstances",
						"description": "Restrict the query to all process instances that are top level process instances."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "finished",
						"description": "Only include finished process instances. This flag includes all process instances\nthat are completed or terminated. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "unfinished",
						"description": "Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withIncidents",
						"description": "Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withRootIncidents",
						"description": "Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentType",
						"description": "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types) for a list of incident types."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"open",
								"resolved"
							]
						},
						"in": "query",
						"name": "incidentStatus",
						"description": "Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessage",
						"description": "Filter by the incident message. Exact match."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessageLike",
						"description": "Filter by the incident message that the parameter is a substring of."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedBefore",
						"description": "Restrict to instances that were started before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedAfter",
						"description": "Restrict to instances that were started after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedBefore",
						"description": "Restrict to instances that were finished before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedAfter",
						"description": "Restrict to instances that were finished after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "executedActivityAfter",
						"description": "Restrict to instances that executed an activity after the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "executedActivityBefore",
						"description": "Restrict to instances that executed an activity before the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "executedJobAfter",
						"description": "Restrict to instances that executed an job after the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "executedJobBefore",
						"description": "Restrict to instances that executed an job before the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "startedBy",
						"description": "Only include process instances that were started by the given user."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "superProcessInstanceId",
						"description": "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "subProcessInstanceId",
						"description": "Restrict query to one process instance that has a sub process instance with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "superCaseInstanceId",
						"description": "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "subCaseInstanceId",
						"description": "Restrict query to one process instance that has a sub case instance with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of `Strings`"
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executedActivityIdIn",
						"description": "Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of `Strings`"
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activeActivityIdIn",
						"description": "Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of `Strings`"
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "active",
						"description": "Restrict to instances that are active."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "suspended",
						"description": "Restrict to instances that are suspended."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "completed",
						"description": "Restrict to instances that are completed."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "externallyTerminated",
						"description": "Restrict to instances that are externallyTerminated."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "internallyTerminated",
						"description": "Restrict to instances that are internallyTerminated."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variables",
						"description": "Only include process instances that have/had variables with certain values.\nVariable filtering expressions are comma-separated and are structured as follows:\nA valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.\n\n**Note:** Values are always treated as String objects on server side.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.\n\nKey and value may not contain underscore or comma characters.\n"
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal."
					}
				],
				"tags": ["Historic Process Instance"]
			}
		},
		"/history/process-instance": {
			"post": {
				"summary": "Get List (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricProcessInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/process-instance`",
						"value": {
							"finishedAfter": "2013-01-01T00:00:00.000+0200",
							"variables": [
								{
									"name": "myVariable",
									"value": "camunda",
									"operator": "eq"
								},
								{
									"name": "mySecondVariable",
									"value": 124,
									"operator": "neq"
								}
							],
							"sorting": [
								{
									"sortOrder": "asc",
									"sortBy": "businessKey"
								},
								{
									"sortOrder": "desc",
									"sortBy": "startTime"
								}
							],
							"executedActivityAfter": "2013-03-23T13:42:44.000+0200",
							"finishedBefore": "2013-04-01T23:59:59.000+0200"
						}
					}}
				}}},
				"operationId": "queryHistoricProcessInstances",
				"description": "Queries for historic process instances that fulfill the given parameters.\nThis method is slightly more powerful than the\n[Get Process Instance](https://docs.camunda.org/manual/7.19/reference/rest/history/process-instance/get-process-instance-query/)\nbecause it allows filtering by multiple process variables of types `String`, `Number` or `Boolean`.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricProcessInstanceDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response for POST `/history/process-instance`",
								"value": [{
									"processDefinitionId": "invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e",
									"durationInMillis": null,
									"caseInstanceId": null,
									"processDefinitionName": "Invoice Receipt",
									"superCaseInstanceId": null,
									"deleteReason": null,
									"processDefinitionKey": "invoice",
									"removalTime": null,
									"startUserId": null,
									"startActivityId": "StartEvent_1",
									"businessKey": null,
									"tenantId": null,
									"startTime": "2017-02-10T14:33:19.000+0200",
									"rootProcessInstanceId": "f8259e5d-ab9d-11e8-8449-e4a7a094a9d6",
									"id": "7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e",
									"endTime": null,
									"state": "ACTIVE",
									"processDefinitionVersion": 1,
									"superProcessInstanceId": null
								}]
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Historic Process Instance"]
			},
			"get": {
				"summary": "Get List",
				"operationId": "getHistoricProcessInstances",
				"description": "Queries for historic process instances that fulfill the given parameters.\nThe size of the result set can be retrieved by using the\n[Get Process Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/process-instance/get-process-instance-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricProcessInstanceDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response for GET `/history/process-instance?finishedAfter=2013-01-01T00:00:00.000%2b0200&finishedBefore=2013-04-01T23:59:59.000%2b0200&executedActivityAfter=2013-03-23T13:42:44.000%2b0200`",
								"value": [{
									"processDefinitionId": "invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e",
									"durationInMillis": null,
									"caseInstanceId": null,
									"processDefinitionName": "Invoice Receipt",
									"superCaseInstanceId": null,
									"deleteReason": null,
									"processDefinitionKey": "invoice",
									"removalTime": null,
									"startUserId": null,
									"startActivityId": "StartEvent_1",
									"businessKey": null,
									"tenantId": null,
									"startTime": "2017-02-10T14:33:19.000+0200",
									"rootProcessInstanceId": "f8259e5d-ab9d-11e8-8449-e4a7a094a9d6",
									"id": "7c80cc8f-ef95-11e6-b6e6-34f39ab71d4e",
									"endTime": null,
									"state": "ACTIVE",
									"processDefinitionVersion": 1,
									"superProcessInstanceId": null
								}]
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid, for example if a sortOrder parameter is supplied, but no sortBy.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {
							"type": "string",
							"enum": [
								"instanceId",
								"definitionId",
								"definitionKey",
								"definitionName",
								"definitionVersion",
								"businessKey",
								"startTime",
								"endTime",
								"duration",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIds",
						"description": "Filter by process instance ids. Filter by a comma-separated list of `Strings`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the process definition the instances run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by the key of the process definition the instances run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKeyIn",
						"description": "Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of `Strings`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionName",
						"description": "Filter by the name of the process definition the instances run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionNameLike",
						"description": "Filter by process definition names that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKeyNotIn",
						"description": "Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of `Strings`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKey",
						"description": "Filter by process instance business key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyIn",
						"description": "Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of `Strings`"
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyLike",
						"description": "Filter by process instance business key that the parameter is a substring of."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "rootProcessInstances",
						"description": "Restrict the query to all process instances that are top level process instances."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "finished",
						"description": "Only include finished process instances. This flag includes all process instances\nthat are completed or terminated. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "unfinished",
						"description": "Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withIncidents",
						"description": "Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withRootIncidents",
						"description": "Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentType",
						"description": "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types) for a list of incident types."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"open",
								"resolved"
							]
						},
						"in": "query",
						"name": "incidentStatus",
						"description": "Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessage",
						"description": "Filter by the incident message. Exact match."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessageLike",
						"description": "Filter by the incident message that the parameter is a substring of."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedBefore",
						"description": "Restrict to instances that were started before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedAfter",
						"description": "Restrict to instances that were started after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedBefore",
						"description": "Restrict to instances that were finished before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedAfter",
						"description": "Restrict to instances that were finished after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "executedActivityAfter",
						"description": "Restrict to instances that executed an activity after the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "executedActivityBefore",
						"description": "Restrict to instances that executed an activity before the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "executedJobAfter",
						"description": "Restrict to instances that executed an job after the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "executedJobBefore",
						"description": "Restrict to instances that executed an job before the given date (inclusive).\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "startedBy",
						"description": "Only include process instances that were started by the given user."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "superProcessInstanceId",
						"description": "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "subProcessInstanceId",
						"description": "Restrict query to one process instance that has a sub process instance with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "superCaseInstanceId",
						"description": "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "subCaseInstanceId",
						"description": "Restrict query to one process instance that has a sub case instance with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of `Strings`"
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executedActivityIdIn",
						"description": "Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of `Strings`"
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activeActivityIdIn",
						"description": "Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of `Strings`"
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "active",
						"description": "Restrict to instances that are active."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "suspended",
						"description": "Restrict to instances that are suspended."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "completed",
						"description": "Restrict to instances that are completed."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "externallyTerminated",
						"description": "Restrict to instances that are externallyTerminated."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "internallyTerminated",
						"description": "Restrict to instances that are internallyTerminated."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variables",
						"description": "Only include process instances that have/had variables with certain values.\nVariable filtering expressions are comma-separated and are structured as follows:\nA valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value.\n\n**Note:** Values are always treated as String objects on server side.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.\n\nKey and value may not contain underscore or comma characters.\n"
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal."
					}
				],
				"tags": ["Historic Process Instance"]
			}
		},
		"/process-definition/key/{key}/start": {"post": {
			"summary": "Start Instance",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/StartProcessInstanceDto"},
				"examples": {
					"example-3": {
						"summary": "Starting a process instance at two specific activities",
						"value": {
							"variables": {"aProcessVariable": {
								"type": "String",
								"value": "aStringValue"
							}},
							"businessKey": "myBusinessKey",
							"startInstructions": [
								{
									"activityId": "activityId",
									"variables": {"var": {
										"type": "String",
										"value": "aVariableValue",
										"local": false
									}},
									"type": "startBeforeActivity"
								},
								{
									"activityId": "anotherActivityId",
									"variables": {"varLocal": {
										"type": "String",
										"value": "anotherVariableValue",
										"local": true
									}},
									"type": "startAfterActivity"
								}
							],
							"skipCustomListeners": true
						}
					},
					"example-1": {
						"summary": "Starting a process instance at its default initial activity",
						"value": {
							"variables": {
								"aVariable": {
									"type": "String",
									"value": "aStringValue"
								},
								"anotherVariable": {
									"type": "Boolean",
									"value": true
								}
							},
							"businessKey": "myBusinessKey"
						}
					},
					"example-2": {
						"summary": "Starting a process instance with variables in return",
						"value": {
							"variables": {
								"aVariable": {
									"type": "String",
									"value": "aStringValue"
								},
								"anotherVariable": {
									"type": "Boolean",
									"value": true
								}
							},
							"withVariablesInReturn": true,
							"businessKey": "myBusinessKey"
						}
					}
				}
			}}},
			"operationId": "startProcessInstanceByKey",
			"description": "Instantiates a given process definition, starts the latest version of the process definition\nwhich belongs to no tenant.\nProcess variables and business key may be supplied in the request body.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ProcessInstanceWithVariablesDto"},
						"examples": {
							"example-3": {
								"summary": "Status 200 Response 3",
								"description": "Response for starting a process instance at two specific activities",
								"value": {
									"caseInstanceId": null,
									"businessKey": "myBusinessKey",
									"tenantId": null,
									"ended": false,
									"links": [{
										"method": "GET",
										"rel": "self",
										"href": "http://localhost:8080/rest-test/process-instance/anId"
									}],
									"id": "anId",
									"suspended": false,
									"definitionId": "aProcessDefinitionId"
								}
							},
							"example-1": {
								"summary": "Status 200 Response 1",
								"description": "Response for starting a process instance at its default initial activity",
								"value": {
									"caseInstanceId": null,
									"businessKey": "myBusinessKey",
									"tenantId": null,
									"ended": false,
									"links": [{
										"method": "GET",
										"rel": "self",
										"href": "http://localhost:8080/rest-test/process-instance/anId"
									}],
									"id": "anId",
									"suspended": false,
									"definitionId": "aProcessDefinitionId"
								}
							},
							"example-2": {
								"summary": "Status 200 Response 2",
								"description": "Response for starting a process instance with variables in return",
								"value": {
									"variables": {
										"aVariable": {
											"valueInfo": {},
											"type": "String",
											"value": "aStringValue"
										},
										"anotherVariable": {
											"valueInfo": {"transient": true},
											"type": "Boolean",
											"value": true
										}
									},
									"caseInstanceId": null,
									"businessKey": "myBusinessKey",
									"ended": false,
									"tenantId": null,
									"links": [{
										"method": "GET",
										"rel": "self",
										"href": "http://localhost:8080/rest-test/process-instance/aProcInstId"
									}],
									"id": "aProcInstId",
									"suspended": false,
									"definitionId": "aProcessDefinitionId"
								}
							}
						}
					}}
				},
				"400": {
					"description": "The instance could not be created due to an invalid variable value,\nfor example if the value could not be parsed to an `Integer` value or\nthe passed variable type is not supported.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The instance could not be created successfully.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the process definition (the latest version thereof) to be retrieved.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/history/incident/count": {"get": {
			"summary": "Get Incident Count",
			"operationId": "getHistoricIncidentsCount",
			"description": "Queries for the number of historic incidents that fulfill the given parameters.\nTakes the same parameters as the\n[Get Incidents](https://docs.camunda.org/manual/7.19/reference/rest/history/incident/get-incident-query/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/history/incident/count?processInstanceId=aProcInstId`",
							"description": "GET `/history/incident/count?processInstanceId=aProcInstId`",
							"value": {"count": 2}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentId",
					"description": "Restricts to incidents that have the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentType",
					"description": "Restricts to incidents that belong to the given incident type. See the [User\nGuide](/manual/develop/user-guide/process-engine/incidents/#incident-types)\nfor a list of incident types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessage",
					"description": "Restricts to incidents that have the given incident message."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessageLike",
					"description": "Restricts to incidents that incidents message is a substring of the given value.\nThe string can include the wildcard character '%' to express\nlike-strategy: starts with (string%), ends with (%string) or contains\n(%string%).\n"
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Restricts to incidents that belong to a process definition with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKey",
					"description": "Restricts to incidents that have the given processDefinitionKey."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKeyIn",
					"description": "Restricts to incidents that have one of the given process definition keys."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Restricts to incidents that belong to a process instance with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "executionId",
					"description": "Restricts to incidents that belong to an execution with the given id."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "createTimeBefore",
					"description": "Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "createTimeAfter",
					"description": "Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "endTimeBefore",
					"description": "Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "endTimeAfter",
					"description": "Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityId",
					"description": "Restricts to incidents that belong to an activity with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "failedActivityId",
					"description": "Restricts to incidents that were created due to the failure of an activity with the given\nid."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "causeIncidentId",
					"description": "Restricts to incidents that have the given incident id as cause incident."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "rootCauseIncidentId",
					"description": "Restricts to incidents that have the given incident id as root cause incident."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "configuration",
					"description": "Restricts to incidents that have the given parameter set as configuration."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "historyConfiguration",
					"description": "Restricts to incidents that have the given parameter set as history configuration."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "open",
					"description": "Restricts to incidents that are open."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "resolved",
					"description": "Restricts to incidents that are resolved."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "deleted",
					"description": "Restricts to incidents that are deleted."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Restricts to incidents that have one of the given comma-separated tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include historic incidents that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "jobDefinitionIdIn",
					"description": "Restricts to incidents that have one of the given comma-separated job definition ids."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"incidentId",
							"incidentMessage",
							"createTime",
							"endTime",
							"incidentType",
							"executionId",
							"activityId",
							"processInstanceId",
							"processDefinitionId",
							"processDefinitionKey",
							"causeIncidentId",
							"rootCauseIncidentId",
							"configuration",
							"historyConfiguration",
							"tenantId",
							"incidentState"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				}
			],
			"tags": ["Historic Incident"]
		}},
		"/task/{id}/bpmnEscalation": {"post": {
			"summary": "Handle BPMN Escalation",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/TaskEscalationDto"},
				"examples": {"example-1": {
					"summary": "Request Body",
					"description": "POST `/task/aTaskId/bpmnEscalation`",
					"value": {
						"variables": {
							"aVariable": {
								"type": "String",
								"value": "aStringValue"
							},
							"anotherVariable": {
								"type": "Boolean",
								"value": true
							}
						},
						"escalationCode": "bpmn-escalation-432"
					}
				}}
			}}},
			"operationId": "handleEscalation",
			"description": "Reports an escalation in the context of a running task by id. The escalation code must\nbe specified to identify the escalation handler. See the documentation for\n[Reporting Bpmn Escalation](https://docs.camunda.org/manual/7.19/reference/bpmn20/tasks/user-task/#reporting-bpmn-escalation)\nin User Tasks.",
			"responses": {
				"400": {
					"description": "Returned if the <code>escalationCode<\/code> is not provided in\nthe request. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"403": {
					"description": "If the authenticated user is unauthorized to update the process instance. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				},
				"404": {
					"description": "Returned if the task does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task in which context a BPMN escalation is reported.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/process-definition/key/{key}/deployed-start-form": {"get": {
			"summary": "Get Deployed Start Form",
			"operationId": "getDeployedStartFormByKey",
			"description": "Retrieves the deployed form that can be referenced from a start event.\nFor further information please refer to [User Guide](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#embedded-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/xhtml+xml": {
						"schema": {
							"format": "binary",
							"description": "For `application/xhtml+xml` Responses, a byte stream is returned.",
							"type": "string"
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "Resonse for GET `/process-definition/key/processDefinitionKey/deployed-start-form`",
							"value": "<form role=\"form\" name=\"invoiceForm\"\n                                      class=\"form-horizontal\">\n\n                                  <div class=\"form-group\">\n                                    <label class=\"control-label col-md-4\"\n                                           for=\"creditor\">Creditor<\/label>\n                                    <div class=\"col-md-8\">\n                                      <input cam-variable-name=\"creditor\"\n                                             cam-variable-type=\"String\"\n                                             id=\"creditor\"\n                                             class=\"form-control\"\n                                             type=\"text\"\n                                             required />\n                                      <div class=\"help\">\n                                        (e.g. &quot;Great Pizza for Everyone Inc.&quot;)\n                                      <\/div>\n                                    <\/div>\n                                  <\/div>\n\n                                <\/form>"
						}}
					}}
				},
				"400": {
					"description": "The form key has wrong format.  See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "The deployed start form cannot be retrieved due to missing permissions on process definition resource.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				},
				"404": {
					"description": "No deployed start form for a given process definition exists. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the process definition (the latest version thereof) to be retrieved.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/tenant/{id}/user-members/{userId}": {
			"delete": {
				"summary": "Delete a Tenant User Membership",
				"operationId": "deleteUserMembership",
				"description": "Deletes a membership between a tenant and an user.",
				"responses": {
					"500": {
						"description": "In case an error occurs. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "Identity service is read-only.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the tenant.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "userId",
						"description": "The id of the user.",
						"required": true
					}
				],
				"tags": ["Tenant"]
			},
			"put": {
				"summary": "Create Tenant User Membership",
				"operationId": "createUserMembership",
				"description": "Creates a membership between a tenant and an user.",
				"responses": {
					"500": {
						"description": "In case an internal error occurs. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "Identity service is read-only.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the tenant.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "userId",
						"description": "The id of the user.",
						"required": true
					}
				],
				"tags": ["Tenant"]
			}
		},
		"/batch/statistics/count": {"get": {
			"summary": "Get Statistics Count",
			"operationId": "getBatchStatisticsCount",
			"description": "Requests the number of batch statistics that fulfill the query criteria.\nTakes the same filtering parameters as the\n[Get Batch Statistics](https://docs.camunda.org/manual/7.19/reference/rest/batch/get-statistics-query/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for GET `/batch/count?type=aBatchType`",
							"value": {"count": 1}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "batchId",
					"description": "Filter by batch id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "type",
					"description": "Filter by batch type.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/batch/#creating-a-batch)\nfor more information about batch types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of `Strings`. A batch matches if it has one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include batches which belong to no tenant.\nValue can effectively only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "suspended",
					"description": "A `Boolean` value which indicates whether only active or suspended batches should be included.\nWhen the value is set to `true`, only suspended batches will be returned and\nwhen the value is set to `false`, only active batches will be returned."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "createdBy",
					"description": "Only include batches that were started by this user id."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedBefore",
					"description": "Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedAfter",
					"description": "Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withFailures",
					"description": "Only include batches having jobs with failures.\nValue can only be `true`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutFailures",
					"description": "Only include batches having jobs without failures.\nValue can only be `true`."
				}
			],
			"tags": ["Batch"]
		}},
		"/history/identity-link-log/count": {"get": {
			"summary": "Get Identity Link Log Count",
			"operationId": "getHistoricIdentityLinksCount",
			"description": "Queries for the number of historic identity link logs that fulfill the given\nparameters. Takes the same parameters as the\n[Get Identity-Link-Logs](https://docs.camunda.org/manual/7.19/reference/rest/history/identity-links/get-identity-link-query/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/history/identity-link-log/count?taskId=aTaskId`",
							"description": "GET `/history/identity-link-log/count?taskId=aTaskId`",
							"value": {"count": 2}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "type",
					"description": "Restricts to identity links that have the given type (candidate/assignee/owner)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "userId",
					"description": "Restricts to identity links that have the given user id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "groupId",
					"description": "Restricts to identity links that have the given group id."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "dateBefore",
					"description": "Restricts to identity links that have the time before the given time."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "dateAfter",
					"description": "Restricts to identity links that have the time after the given time."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "taskId",
					"description": "Restricts to identity links that have the given task id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Restricts to identity links that have the given process definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKey",
					"description": "Restricts to identity links that have the given process definition key."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "operationType",
					"description": "Restricts to identity links that have the given operationType (add/delete)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "assignerId",
					"description": "Restricts to identity links that have the given assigner id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include historic identity links that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
				}
			],
			"tags": ["Historic Identity Link Log"]
		}},
		"/deployment/{id}/resources": {"get": {
			"summary": "Get Resources",
			"operationId": "getDeploymentResources",
			"description": "Retrieves all deployment resources of a given deployment.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/DeploymentResourceDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/deployment/anDeploymentId/resources`",
							"value": [
								{
									"deploymentId": "anDeploymentId",
									"name": "anResourceName",
									"id": "anResourceId"
								},
								{
									"deploymentId": "anDeploymentId",
									"name": "anotherResourceName",
									"id": "anotherResourceId"
								}
							]
						}}
					}}
				},
				"404": {
					"description": "Deployment resources for the given deployment do not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the deployment to retrieve the deployment resources for.",
				"required": true
			}],
			"tags": ["Deployment"]
		}},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/suspended": {"put": {
			"summary": "Activate/Suspend by Id",
			"requestBody": {
				"description": "**Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ProcessDefinitionSuspensionStateDto"},
					"examples": {"example-1": {
						"summary": "PUT `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/suspended`",
						"value": {
							"executionDate": "2013-11-21T10:49:45T14:42:45",
							"includeProcessInstances": true,
							"suspended": true
						}
					}}
				}}
			},
			"operationId": "updateProcessDefinitionSuspensionStateByKeyAndTenantId",
			"description": "Activates or suspends a given process definition by the latest version of\nthe process definition for tenant.",
			"responses": {
				"400": {
					"description": "Returned if some of the query parameters are invalid,\nfor example if the provided `executionDate` parameter doesn't have the expected format or\nif the `processDefinitionKey` parameter is `null`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Process definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) to be activated/suspended.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definition belongs to.",
					"required": true
				}
			],
			"tags": ["Process Definition"]
		}},
		"/process-definition/key/{key}/history-time-to-live": {"put": {
			"summary": "Update History Time to Live",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/HistoryTimeToLiveDto"},
				"examples": {"example-1": {
					"summary": "PUT `/process-definition/key/aProcessDefinitionKey/history-time-to-live`",
					"value": {"historyTimeToLive": 5}
				}}
			}}},
			"operationId": "updateHistoryTimeToLiveByProcessDefinitionKey",
			"description": "Updates history time to live for the latest version of the process definition which belongs to no tenant.\nThe field is used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).",
			"responses": {
				"400": {
					"description": "Returned if some of the request parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the process definition to change history time to live.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/process-definition/{id}/rendered-form": {"get": {
			"summary": "Get Rendered Start Form",
			"operationId": "getRenderedStartForm",
			"description": "Retrieves the rendered form for a process definition.\nThis method can be used to get the HTML rendering of a\n[Generated Task Form](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/xhtml+xml": {
						"schema": {
							"format": "binary",
							"description": "For `application/xhtml+xml` Responses, a byte stream is returned.",
							"type": "string"
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "A `/process-definition/anId/rendered-form` HTML\n                                       GET response body providing the rendered (generated) form content.",
							"value": "<form class=\"form-horizontal\">\n                                  <div class=\"control-group\">\n                                    <label class=\"control-label\">Customer ID<\/label>\n                                    <div class=\"controls\">\n                                      <input form-field type=\"string\" name=\"customerId\"><\/input>\n                                    <\/div>\n                                  <\/div>\n                                  <div class=\"control-group\">\n                                    <label class=\"control-label\">Amount<\/label>\n                                    <div class=\"controls\">\n                                      <input form-field type=\"number\" name=\"amount\"><\/input>\n                                    <\/div>\n                                  <\/div>\n                                <\/form>"
						}}
					}}
				},
				"400": {
					"description": "Process definition has no form field metadata defined. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given id does not exist.  See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition to get the rendered start form for.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/task/{id}/form": {"get": {
			"summary": "Get Form Key",
			"operationId": "getForm",
			"description": "Retrieves the form key for a task. The form key corresponds to the `FormData#formKey`\nproperty in the engine. This key can be used to do task-specific form rendering in\nclient applications. Additionally, the context path of the containing process\napplication is returned.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/FormDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "GET `/task/anId/form`",
							"value": {
								"contextPath": "http://localhost:8080/my-process-application/",
								"key": "aFormKey"
							}
						}}
					}}
				},
				"400": {
					"description": "Task with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to retrieve the form for.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/job-definition/{id}/suspended": {"put": {
			"summary": "Activate/Suspend Job Definition By Id",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/JobDefinitionSuspensionStateDto"},
				"examples": {"example-1": {
					"summary": "PUT `/job-definition/aJobDefinitionId/suspended`",
					"value": {
						"executionDate": "2013-11-21T10:49:45.000+0200",
						"includeJobs": true,
						"suspended": true
					}
				}}
			}}},
			"operationId": "updateSuspensionStateJobDefinition",
			"description": "Activates or suspends a given job definition by id.",
			"responses": {
				"400": {
					"description": "Returned if some of the request parameters are invalid, for example if the provided\n`executionDate` parameter doesn't have the expected format. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the job definition to activate or suspend.",
				"required": true
			}],
			"tags": ["Job Definition"]
		}},
		"/authorization/create": {"post": {
			"summary": "Create a New Authorization",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/AuthorizationCreateDto"},
				"examples": {"example-1": {
					"summary": "POST `/authorization/create`",
					"value": {
						"resourceId": "*",
						"permissions": [
							"CREATE",
							"READ"
						],
						"groupId": null,
						"type": 0,
						"userId": "*",
						"resourceType": 1
					}
				}}
			}}},
			"operationId": "createAuthorization",
			"description": "Creates a new authorization.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/AuthorizationDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "POST `/authorization/create`",
							"value": {
								"resourceId": "*",
								"permissions": [
									"CREATE",
									"READ"
								],
								"groupId": null,
								"rootProcessInstanceId": "f8259e5d-ab9d-11e8-8449-e4a7a094a9d6",
								"links": [
									{
										"method": "GET",
										"rel": "self",
										"href\"": "http://localhost:8080/engine-rest/authorization/anAuthorizationId"
									},
									{
										"method": "PUT",
										"rel": "update",
										"href\"": "http://localhost:8080/engine-rest/authorization/anAuthorizationId"
									},
									{
										"method": "DELETE",
										"rel": "delete",
										"href\"": "http://localhost:8080/engine-rest/authorization/anAuthorizationId"
									}
								],
								"id": "anAuthorizationId",
								"type": 0,
								"userId": "*",
								"resourceType": 1,
								"removalTime": "2018-02-10T14:33:19.000+0200"
							}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the properties in the request body are invalid, for example if\na permission parameter is not valid for the provided resourceType.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The authorization could not be updated due to an internal server error. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "The authenticated user is unauthorized to create an instance of this resource. See\nthe [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Authorization"]
		}},
		"/process-definition/key/{key}/diagram": {"get": {
			"summary": "Get Diagram",
			"operationId": "getProcessDefinitionDiagramByKey",
			"description": "Retrieves the diagram for the latest version of the process definition which belongs to no tenant.\n\nIf the process definition's deployment contains an image resource with the same file name\nas the process definition, the deployed image will be returned by the Get Diagram endpoint.\nExample: `someProcess.bpmn` and `someProcess.png`.\nSupported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.",
			"responses": {
				"200": {
					"description": "Request successful. The image diagram of this process.",
					"content": {
						"application/octet-stream": {"schema": {
							"format": "binary",
							"description": "defaults to `application/octet-stream` if the file suffix is unknown",
							"type": "string"
						}},
						"*/*": {"schema": {
							"format": "binary",
							"description": "Files with MIME type information image/png, image/gif, ... ",
							"type": "string"
						}}
					}
				},
				"204": {"description": "The process definition doesn't have an associated diagram."},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the process definition.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/decision-requirements-definition/{id}/xml": {"get": {
			"summary": "Get DMN XML by ID",
			"operationId": "getDecisionRequirementsDefinitionDmnXmlById",
			"description": "Retrieves the DMN XML of a decision requirements definition.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionRequirementsDefinitionXmlDto"},
						"examples": {"example-1": {
							"summary": "GET `/decision-requirements-definition/invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c/xml`",
							"description": "GET `/decision-requirements-definition/invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c/xml`",
							"value": {
								"dmnXml": "<?xml version=\"1.1\" encoding=\"UTF-8\"?>...<definitions id=\"dish\" name=\"Dish\" namespace=\"test-drg\" ... />",
								"id": "invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c"
							}
						}}
					}}
				},
				"404": {
					"description": "Decision requirements definition with given id or key does not\nexist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the decision requirements definition.",
				"required": true
			}],
			"tags": ["Decision Requirements Definition"]
		}},
		"/migration/executeAsync": {"post": {
			"summary": "Execute Migration Plan Async (Batch)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/MigrationExecutionDto"},
				"examples": {"example-1": {
					"summary": "POST `/migration/executeAsync`",
					"value": {
						"processInstanceQuery": {"processDefinitionId": "aProcessDefinitionId1"},
						"migrationPlan": {
							"targetProcessDefinitionId": "aProcessDefinitionId2",
							"instructions": [
								{
									"targetActivityIds": ["aUserTask"],
									"sourceActivityIds": ["aUserTask"]
								},
								{
									"targetActivityIds": ["anotherEvent"],
									"sourceActivityIds": ["anEvent"],
									"updateEventTrigger": true
								}
							],
							"variables": {"foo": {
								"valueInfo": {
									"objectTypeName": "java.util.ArrayList",
									"serializationDataFormat": "application/json"
								},
								"type": "Object",
								"value": "[5,9]"
							}},
							"sourceProcessDefinitionId": "aProcessDefinitionId1"
						},
						"processInstanceIds": [
							"aProcessInstance",
							"anotherProcessInstance"
						],
						"skipCustomListeners": true
					}
				}}
			}}},
			"operationId": "executeMigrationPlanAsync",
			"description": "Executes a migration plan asynchronously (batch) for multiple process instances.\nTo execute a migration plan synchronously, use the\n[Execute MigrationPlan](https://docs.camunda.org/manual/7.19/reference/rest/migration/execute-migration/)\nmethod.\n\nFor more information about the difference between synchronous and asynchronous\nexecution of a migration plan, please refer to the related section of\n[the user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "POST `/migration/executeAsync`",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId"
							}
						}}
					}}
				},
				"400": {
					"description": "The request is not valid if one or more of the following statements apply:\n\n* The provided migration plan is not valid, so an exception of type\n`MigrationPlanValidationException` is returned.\n* In case additional parameters of the request are unexpected, an\nexception of type `InvalidRequestException` is returned.\n\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Migration"]
		}},
		"/history/process-instance/set-removal-time": {"post": {
			"summary": "Set Removal Time Async (POST)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SetRemovalTimeToHistoricProcessInstancesDto"},
				"examples": {"example-1": {
					"summary": "POST `/history/process-instance/set-removal-time`",
					"value": {
						"historicProcessInstanceIds": [
							"b4d2ad98-7240-11e9-98b7-be5e0f7575b7",
							"b4d2ad94-7240-11e9-98b7-be5e0f7575b7"
						],
						"hierarchical": true,
						"absoluteRemovalTime": "2019-05-05T11:56:24.725+0200",
						"historicProcessInstanceQuery": {"unfinished": true}
					}
				}}
			}}},
			"operationId": "setRemovalTimeAsync",
			"description": "Sets the removal time to multiple historic process instances asynchronously (batch).\n\nAt least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.\nIf both are provided, all instances matching query criterion and instances from the list will be updated with a removal time.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for POST `/history/process-instance/set-removal-time`",
							"value": {
								"monitorJobDefinitionId": "120b568f-724a-11e9-98b7-be5e0f7575b7",
								"createUserId": null,
								"invocationsPerBatchJob": 1,
								"totalJobs": 12,
								"tenantId": "accounting",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "120b5690-724a-11e9-98b7-be5e0f7575b7",
								"id": "120b568d-724a-11e9-98b7-be5e0f7575b7",
								"type": "process-set-removal-time",
								"batchJobDefinitionId": "120b568e-724a-11e9-98b7-be5e0f7575b7",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "Bad Request\nRequest was unsuccessfull due to a bad user request. This occurs if some of the query parameters are invalid,\ne. g. if neither `historicProcessInstances` nor `historicProcessInstanceQuery` is present or if no mode is specified.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Historic Process Instance"]
		}},
		"/batch/{id}": {
			"get": {
				"summary": "Get",
				"operationId": "getBatch",
				"description": "Retrieves a batch by id, according to the Batch interface in the engine.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/BatchDto"},
							"examples": {"example-1": {
								"description": "Response for GET `/batch/aBatchId`",
								"value": {
									"monitorJobDefinitionId": "aMonitorJobDefinitionId",
									"createUserId": "aUserId",
									"invocationsPerBatchJob": 1,
									"totalJobs": 10,
									"jobsCreated": 10,
									"tenantId": "aTenantId",
									"batchJobsPerSeed": 100,
									"seedJobDefinitionId": "aSeedJobDefinitionId",
									"id": "aBatchId",
									"type": "aBatchType",
									"batchJobDefinitionId": "aBatchJobDefinitionId",
									"suspended": false
								}
							}}
						}}
					},
					"404": {
						"description": "Batch with given id does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the batch to be retrieved.",
					"required": true
				}],
				"tags": ["Batch"]
			},
			"delete": {
				"summary": "Delete",
				"operationId": "deleteBatch",
				"description": "Deletes a batch by id, including all related jobs and job definitions.\nOptionally also deletes the batch history.",
				"responses": {
					"400": {
						"description": "Batch with given id does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the batch to be deleted.",
						"required": true
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "cascade",
						"description": "`true`, if the historic batch and historic job logs for this batch should also be deleted."
					}
				],
				"tags": ["Batch"]
			}
		},
		"/history/process-instance/delete": {"post": {
			"summary": "Delete Async (POST)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/DeleteHistoricProcessInstancesDto"},
				"examples": {"example-1": {
					"summary": "POST `/history/process-instance/delete`",
					"value": {
						"historicProcessInstanceIds": [
							"aProcess",
							"secondProcess"
						],
						"historicProcessInstanceQuery": {
							"startedAfter": "2016-10-11T11:44:13.000+0200",
							"finishedBefore": "2016-10-13T11:44:17.000+0200"
						},
						"deleteReason": "aReason"
					}
				}}
			}}},
			"operationId": "deleteHistoricProcessInstancesAsync",
			"description": "Delete multiple historic process instances asynchronously (batch).\nAt least `historicProcessInstanceIds` or `historicProcessInstanceQuery` has to be provided.\nIf both are provided then all instances matching query criterion and instances from the list will be deleted.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for POST `/history/process-instance/delete`",
							"value": {
								"monitorJobDefinitionId": "120b568f-724a-11e9-98b7-be5e0f7575b7",
								"createUserId": null,
								"invocationsPerBatchJob": 1,
								"totalJobs": 12,
								"tenantId": "accounting",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "120b5690-724a-11e9-98b7-be5e0f7575b7",
								"id": "120b568d-724a-11e9-98b7-be5e0f7575b7",
								"type": "process-set-removal-time",
								"batchJobDefinitionId": "120b568e-724a-11e9-98b7-be5e0f7575b7",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, i.e. neither historicProcessInstanceIds,\nnor historicProcessInstanceQuery is present. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Historic Process Instance"]
		}},
		"/batch/{id}/suspended": {"put": {
			"summary": "Activate/Suspend",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SuspensionStateDto"},
				"examples": {"example-1": {
					"summary": "PUT `/batch/aBatch/suspended`",
					"value": {"suspended": true}
				}}
			}}},
			"operationId": "updateBatchSuspensionState",
			"description": "Activates or suspends a batch by id.",
			"responses": {
				"400": {
					"description": "Returned if the batch cannot be suspended or activated.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the batch to activate or suspend.",
				"required": true
			}],
			"tags": ["Batch"]
		}},
		"/decision-definition/key/{key}/history-time-to-live": {"put": {
			"summary": "Update History Time to Live By Key",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/HistoryTimeToLiveDto"},
				"examples": {"example-1": {
					"summary": "PUT `/decision-definition/key/aKey/history-time-to-live`",
					"value": {"historyTimeToLive": 5}
				}}
			}}},
			"operationId": "updateHistoryTimeToLiveByDecisionDefinitionKey",
			"description": "Updates the latest version of the decision definition which belongs to no tenant.\nThe field is used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).",
			"responses": {
				"400": {
					"description": "Returned if some of the request parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Decision definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the decision definitions to change history time to live.",
				"required": true
			}],
			"tags": ["Decision Definition"]
		}},
		"/migration/validate": {"post": {
			"summary": "Validate Migration Plan",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/MigrationPlanDto"},
				"examples": {"example-1": {
					"summary": "POST `/migration/validate`",
					"value": {
						"targetProcessDefinitionId": "aProcessDefinitionId2",
						"instructions": [
							{
								"targetActivityIds": ["aUserTask"],
								"sourceActivityIds": ["aUserTask"]
							},
							{
								"targetActivityIds": ["anotherEvent"],
								"sourceActivityIds": ["anEvent"],
								"updateEventTrigger": true
							}
						],
						"variables": {"foo": {
							"valueInfo": {
								"objectTypeName": "java.util.ArrayList",
								"serializationDataFormat": "application/x-java-serialized-object"
							},
							"type": "Object",
							"value": "..."
						}},
						"sourceProcessDefinitionId": "aProcessDefinitionId1"
					}
				}}
			}}},
			"operationId": "validateMigrationPlan",
			"description": "Validates a migration plan statically without executing it. This\ncorresponds to the\n[creation time validation](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-instance-migration/#creation-time-validation)\ndescribed in the user guide.",
			"responses": {
				"200": {
					"description": "Request successful. The validation report was returned.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/MigrationPlanReportDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "POST `/migration/validate`",
							"value": {
								"variableReports": {"foo": {
									"failures": ["Cannot set variable with name foo. Java serialization format is prohibited"],
									"valueInfo": {
										"objectTypeName": "java.util.ArrayList",
										"serializationDataFormat": "application/x-java-serialized-object"
									},
									"type": "Object",
									"value": "..."
								}},
								"instructionReports": [
									{
										"failures": [
											"failure1",
											"failure2"
										],
										"instruction": {
											"targetActivityIds": ["aUserTask"],
											"sourceActivityIds": ["aUserTask"],
											"updateEventTrigger": false
										}
									},
									{
										"failures": [
											"failure1",
											"failure2"
										],
										"instruction": {
											"targetActivityIds": ["anotherEvent"],
											"sourceActivityIds": ["anEvent"],
											"updateEventTrigger": true
										}
									}
								]
							}
						}}
					}}
				},
				"400": {
					"description": "In case additional parameters of the request are unexpected, an\nexception of type `InvalidRequestException` is returned. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Migration"]
		}},
		"/decision-definition/key/{key}/xml": {"get": {
			"summary": "Get XML By Key",
			"operationId": "getDecisionDefinitionDmnXmlByKey",
			"description": "Retrieves the XML for the latest version of the decision definition which belongs to no tenant.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionDefinitionDiagramDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for GET `/decision-definition/key/aKey/xml`",
							"value": {
								"dmnXml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                                    <definitions xmlns=\"http://www.omg.org/spec/DMN/20151101/dmn.xsd\"\n                                                 id=\"definitions\"\n                                                 name=\"camunda\"\n                                                 namespace=\"http://camunda.org/schema/1.0/dmn\">\n                                      <decision id=\"testDecision\" name=\"decision\">\n                                        <decisionTable id=\"table\">\n                                          <output id=\"result\" name=\"result\" >\n                                          <\/output>\n                                          <rule id=\"rule\">\n                                            <outputEntry id=\"output1\">\n                                              <text>\"not okay\"<\/text>\n                                            <\/outputEntry>\n                                          <\/rule>\n                                        <\/decisionTable>\n                                      <\/decision>\n                                    <\/definitions>",
								"id": "aDecisionDefinitionId"
							}
						}}
					}}
				},
				"404": {
					"description": "Decision definition with given key does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the decision definition (the latest version thereof).",
				"required": true
			}],
			"tags": ["Decision Definition"]
		}},
		"/history/batch/cleanable-batch-report/count": {"get": {
			"summary": "Get Cleanable Batch Report Count",
			"operationId": "getCleanableHistoricBatchesReportCount",
			"description": "Queries for the number of report results about a historic batch operations relevant\nto history cleanup (see\n[History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)\n).\nTakes the same parameters as the\n[Get Cleanable Batch Report](https://docs.camunda.org/manual/7.19/reference/rest/history/batch/get-cleanable-batch-report/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/history/batch/cleanable-batch-report/count`",
							"description": "GET `/history/batch/cleanable-batch-report/count`",
							"value": {"count": 10}
						}}
					}}
				},
				"500": {
					"description": "See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Historic Batch"]
		}},
		"/history/user-operation": {"get": {
			"summary": "Get User Operation Log (Historic)",
			"operationId": "queryUserOperationEntries",
			"description": "Queries for user operation log entries that fulfill the given parameters.\nThe size of the result set can be retrieved by using the\n[Get User Operation Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/user-operation-log/get-user-operation-log-query-count/)\nmethod.\n\nNote that the properties of operation log entries are interpreted as\nrestrictions on the entities they apply to. That means, if a single\nprocess instance is updated, the field `processInstanceId` is\npopulated. If a single operation updates all process instances of the\nsame process definition, the field `processInstanceId` is `null` (a\n`null` restriction is viewed as a wildcard, i.e., matches a process\ninstance with any id) and the field `processDefinitionId` is\npopulated. This way, which entities were changed by a user operation\ncan easily be reconstructed.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/UserOperationLogEntryDto"}
						},
						"examples": {
							"example-1": {
								"summary": "Gets an operation that updates a single task.",
								"description": "GET `/history/user-operation?operationType=Claim&userId=demo&sortBy=timestamp&sortOrder=asc`",
								"value": [{
									"annotation": "anAnnotation",
									"processDefinitionId": "aProcessDefinitionId",
									"processInstanceId": "aProcessInstanceId",
									"newValue": "demo",
									"jobDefinitionId": "aJobDefinitionId",
									"entityType": "Task",
									"userId": "demo",
									"processDefinitionKey": null,
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"executionId": "anExecutionId",
									"jobId": "aJobId",
									"deploymentId": "aDeploymentId",
									"property": "assignee",
									"orgValue": null,
									"operationId": "anOperationId",
									"operationType": "Claim",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "anUserOperationLogEntryId",
									"category": "TaskWorker",
									"taskId": "aTaskId",
									"timestamp": "2014-02-25T14:58:37.000+0200"
								}]
							},
							"example-2": {
								"summary": "Gets an operation that updates a multiple process instances with the same key.",
								"description": "GET `/history/user-operation?operationType=Suspend&userId=demo`",
								"value": [{
									"annotation": "anAnnotation",
									"processDefinitionId": "aProcessDefinitionId",
									"processInstanceId": null,
									"newValue": "suspended",
									"jobDefinitionId": null,
									"entityType": "ProcessInstance",
									"userId": "demo",
									"processDefinitionKey": "aProcessDefinitionKey",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"executionId": null,
									"jobId": null,
									"deploymentId": "aDeploymentId",
									"property": "suspensionState",
									"orgValue": null,
									"operationId": "anOperationId",
									"operationType": "Suspend",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "anUserOperationLogEntryId",
									"category": "Operator",
									"taskId": null,
									"timestamp": "2014-02-25T14:58:37.000+0200"
								}]
							}
						}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "deploymentId",
					"description": "Filter by deployment id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Filter by process definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKey",
					"description": "Filter by process definition key."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Filter by process instance id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "executionId",
					"description": "Filter by execution id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseDefinitionId",
					"description": "Filter by case definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseInstanceId",
					"description": "Filter by case instance id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseExecutionId",
					"description": "Filter by case execution id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "taskId",
					"description": "Only include operations on this task."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "externalTaskId",
					"description": "Only include operations on this external task."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "batchId",
					"description": "Only include operations on this batch."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "jobId",
					"description": "Filter by job id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "jobDefinitionId",
					"description": "Filter by job definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "userId",
					"description": "Only include operations of this user."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "operationId",
					"description": "Filter by the id of the operation. This allows fetching of multiple entries which are part\nof a composite operation."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "operationType",
					"description": "Filter by the type of the operation like `Claim` or `Delegate`. See the\n[Javadoc](https://docs.camunda.org/manual/7.19/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html)\nfor a list of available operation types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "entityType",
					"description": "Filter by the type of the entity that was affected by this operation, possible values are\n`Task`, `Attachment` or `IdentityLink`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "entityTypeIn",
					"description": "Filter by a comma-separated list of types of the entities that was affected by this operation,\npossible values are `Task`, `Attachment` or `IdentityLink`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "category",
					"description": "Filter by the category that this operation is associated with, possible values are\n`TaskWorker`, `Admin` or `Operator`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "categoryIn",
					"description": "Filter by a comma-separated list of categories that this operation is associated with, possible values are\n`TaskWorker`, `Admin` or `Operator`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "property",
					"description": "Only include operations that changed this property, e.g., `owner` or `assignee`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "afterTimestamp",
					"description": "Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the\ntimestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., 2013-01-23T14:42:45.000+0200."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "beforeTimestamp",
					"description": "Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the\ntimestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., 2013-01-23T14:42:45.000+0200."
				},
				{
					"schema": {
						"type": "string",
						"enum": ["timestamp"]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Historic User Operation Log"]
		}},
		"/process-instance/delete-historic-query-based": {"post": {
			"summary": "Delete Async Historic Query Based (POST)",
			"requestBody": {
				"description": "**Unallowed property**: `processInstanceQuery`",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/DeleteProcessInstancesDto"},
					"examples": {"example-1": {
						"summary": "POST `/process-instance/delete-historic-query-based` Request Body 1",
						"value": {
							"historicProcessInstanceQuery": {"startedBefore": "2017-04-28T11:24:37.765+0200"},
							"deleteReason": "aReason",
							"skipSubprocesses": true,
							"skipCustomListeners": true
						}
					}}
				}}
			},
			"operationId": "deleteAsyncHistoricQueryBased",
			"description": "Deletes a set of process instances asynchronously (batch) based on a historic process instance query.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response 1",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"createUserId": "demo",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"jobsCreated": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "Bad Request\nReturned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor historicProcessInstanceQuery is present",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Process Instance"]
		}},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live": {"put": {
			"summary": "Update History Time to Live",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/HistoryTimeToLiveDto"},
				"examples": {"example-1": {
					"summary": "PUT `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/history-time-to-live`",
					"value": {"historyTimeToLive": 5}
				}}
			}}},
			"operationId": "updateHistoryTimeToLiveByProcessDefinitionKeyAndTenantId",
			"description": "Updates history time to live for the latest version of the process definition for a tenant.\nThe field is used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).",
			"responses": {
				"400": {
					"description": "Returned if some of the request parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition to change history time to live.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definition belongs to.",
					"required": true
				}
			],
			"tags": ["Process Definition"]
		}},
		"/decision-definition/key/{key}/tenant-id/{tenant-id}": {"get": {
			"summary": "Get Decision Definition By Key And Tenant Id",
			"operationId": "getDecisionDefinitionByKeyAndTenantId",
			"description": "Retrieves the latest version of the decision definition for tenant",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionDefinitionDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for GET `/decision-definition/key/dish-decision/tenant-id/aTenantId`",
							"value": {
								"resource": "drd-dish-decision.dmn",
								"decisionRequirementsDefinitionId": "dish:1:c633c195-41b7-11e6-b0ef-00aa004d0001",
								"deploymentId": "c627175e-41b7-11e6-b0ef-00aa004d0001",
								"name": "Dish Decision",
								"tenantId": "aTenantId",
								"historyTimeToLive": 5,
								"versionTag": null,
								"id": "aDecisionDefinitionId",
								"category": "http://camunda.org/schema/1.0/dmn",
								"version": 1,
								"key": "dish-decision",
								"decisionRequirementsDefinitionKey": "dish"
							}
						}}
					}}
				},
				"404": {
					"description": "Decision definition with given key does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the decision definition (the latest version thereof) to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the decision definition belongs to.",
					"required": true
				}
			],
			"tags": ["Decision Definition"]
		}},
		"/modification/execute": {"post": {
			"summary": "Execute Modification",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ModificationDto"},
				"examples": {"example-1": {
					"summary": "POST `/modification/execute`",
					"value": {
						"annotation": "Modified to resolve an error.",
						"processDefinitionId": "aProcessDefinitionId",
						"instructions": [
							{
								"activityId": "aUserTask",
								"type": "startAfterActivity"
							},
							{
								"activityId": "anotherTask",
								"type": "cancel",
								"cancelCurrentActiveActivityInstances": true
							}
						],
						"processInstanceQuery": {"processDefinitionId": "aProcessDefinitionId"},
						"processInstanceIds": [
							"aProcessInstance",
							"anotherProcessInstance"
						],
						"skipCustomListeners": true
					}
				}}
			}}},
			"operationId": "executeModification",
			"description": "Executes a modification synchronously for multiple process instances.\nTo modify a single process instance, use the\n[Modify Process Instance Execution State](https://docs.camunda.org/manual/7.19/reference/rest/process-instance/post-modification/) method.\nTo execute a modification asynchronously, use the\n[Execute Modification Async (Batch)](https://docs.camunda.org/manual/7.19/reference/rest/modification/post-modification-async/) method.\n\nFor more information about the difference between synchronous and\nasynchronous execution of a modification, please refer to the related\nsection of the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-instance-migration.md#executing-a-migration-plan).",
			"responses": {
				"400": {
					"description": "\nIn case following parameters are missing: instructions,\nprocessDefinitionId, activityId or transitionId, processInstanceIds\nor processInstanceQuery, an exception of type\n`InvalidRequestException` is returned. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."}
			},
			"tags": ["Modification"]
		}},
		"/task": {
			"post": {
				"summary": "Get List (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/TaskQueryDto"},
					"examples": {
						"example-1": {
							"summary": "POST `/task` Request Body 1",
							"value": {
								"assigneeIn": "anAssignee,anotherAssignee",
								"taskVariables": [
									{
										"name": "varName",
										"value": "varValue",
										"operator": "eq"
									},
									{
										"name": "anotherVarName",
										"value": 30,
										"operator": "neq"
									}
								],
								"sorting": [
									{
										"sortOrder": "asc",
										"sortBy": "dueDate"
									},
									{
										"sortOrder": "desc",
										"sortBy": "processVariable",
										"parameters": {
											"variable": "orderId",
											"type": "String"
										}
									}
								],
								"processInstanceBusinessKeyIn": "aBusinessKey,anotherBusinessKey",
								"priority": 10
							}
						},
						"example-2": {
							"summary": "POST `/task` Request Body 2",
							"description": "Logical query: assignee = \"John Munda\" AND (name = \"Approve Invoice\" OR priority = 5) AND (suspended = false OR taskDefinitionKey = \"approveInvoice\")",
							"value": {
								"orQueries": [
									{
										"name": "Approve Invoice",
										"priority": 5
									},
									{
										"taskDefinitionKey": "approveInvoice",
										"suspended": false
									}
								],
								"assignee": "John Munda"
							}
						}
					}
				}}},
				"operationId": "queryTasks",
				"description": "Queries for tasks that fulfill a given filter. This method is slightly more powerful\nthan the [Get Tasks](https://docs.camunda.org/manual/7.19/reference/rest/task/get-query/) method because it\nallows filtering by multiple process or task variables of types `String`, `Number`\nor `Boolean`. The size of the result set can be retrieved by using the\n[Get Task Count (POST)](https://docs.camunda.org/manual/7.19/reference/rest/task/post-query-count/) method.\n\n**Security Consideration**:\nThere are several parameters (such as `assigneeExpression`) for specifying an EL\nexpression. These are disabled by default to prevent remote code execution. See the\nsection on\n[security considerations for custom code](https://docs.camunda.org/manual/7.19/user-guide/process-engine/securing-custom-code/)\nin the user guide for details.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/TaskDto"}
							},
							"examples": {
								"example-1": {
									"summary": "Status 200 response 1",
									"value": [{
										"owner": "anOwner",
										"processDefinitionId": "aProcDefId",
										"processInstanceId": "aProcInstId",
										"caseExecutionId": "aCaseExecution",
										"caseDefinitionId": "aCaseDefId",
										"formKey": "aFormKey",
										"created": "2013-01-23T13:42:42.453+0200",
										"parentTaskId": "aParentId",
										"caseInstanceId": "aCaseInstId",
										"followUp:": "2013-01-23T13:44:42.546+0200",
										"description": "aDescription",
										"priority": 10,
										"camundaFormRef": {
											"binding": "version",
											"version": 2,
											"key": "aCamundaFormKey"
										},
										"suspended": false,
										"delegationState": "RESOLVED",
										"executionId": "anExecution",
										"taskDefinitionKey": "aTaskDefinitionKey",
										"due": "2013-01-23T13:49:42.342+0200",
										"name": "aName",
										"tenantId": "aTenantId",
										"id": "anId",
										"assignee": "anAssignee",
										"lastUpdated:": "2013-01-23T13:44:42.546+0200"
									}]
								},
								"example-2": {
									"summary": "Status 200 response 2",
									"value": [{
										"owner": null,
										"processDefinitionId": "invoice:1:2c8d8057-6571-11e7-9a44-d6940f5ef88d",
										"processInstanceId": "349f8a5c-6571-11e7-9a44-d6940f5ef88d",
										"caseExecutionId": null,
										"caseDefinitionId": null,
										"formKey": "embedded:app:develop/invoice-forms/approve-invoice.html",
										"created": "2017-07-10T15:10:54.670+0200",
										"parentTaskId": null,
										"caseInstanceId": null,
										"description": "Approve the invoice (or not).",
										"priority": 50,
										"suspended": false,
										"delegationState": null,
										"followUp": null,
										"lastUpdated": "2017-07-17T15:10:54.670+0200",
										"executionId": "349f8a5c-6571-11e7-9a44-d6940f5ef88d",
										"taskDefinitionKey": "approveInvoice",
										"due": "2017-07-17T15:10:54.670+0200",
										"name": "Approve Invoice",
										"tenantId": null,
										"id": "349fffa8-6571-11e7-9a44-d6940f5ef88d",
										"assignee": "John Munda"
									}]
								}
							}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`, or if an invalid operator for variable\ncomparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Task"]
			},
			"get": {
				"summary": "Get List",
				"operationId": "getTasks",
				"description": "Queries for tasks that fulfill a given filter. The size of the result set can be\nretrieved by using the Get Task Count method.\n\n**Security Consideration:** There are several query parameters (such as\nassigneeExpression) for specifying an EL expression. These are disabled by default to\nprevent remote code execution. See the section on\n[security considerations](https://docs.camunda.org/manual/7.19/user-guide/process-engine/securing-custom-code/)\nfor custom code in the user guide for details.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/TaskDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response for GET `/task?assignee=anAssignee&delegationState=RESOLVED&maxPriority=50`",
								"value": [{
									"owner": "anOwner",
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"caseExecutionId": "aCaseExecution",
									"caseDefinitionId": "aCaseDefId",
									"formKey": "aFormKey",
									"created": "2013-01-23T13:42:42.657+0200",
									"parentTaskId": "aParentId",
									"caseInstanceId": "aCaseInstId",
									"followUp:": "2013-01-23T13:44:42.987+0200",
									"description": "aDescription",
									"priority": 42,
									"camundaFormRef": {
										"binding": "version",
										"version": 2,
										"key": "aCamundaFormKey"
									},
									"suspended": false,
									"delegationState": "RESOLVED",
									"executionId": "anExecution",
									"taskDefinitionKey": "aTaskDefinitionKey",
									"due": "2013-01-23T13:49:42.323+0200",
									"name": "aName",
									"tenantId": "aTenantId",
									"id": "anId",
									"assignee": "anAssignee",
									"lastUpdated:": "2013-01-23T13:44:42.987+0200"
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`, or if an invalid operator for variable\ncomparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskId",
						"description": "Restrict to task with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskIdIn",
						"description": "Restrict to tasks with any of the given ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Restrict to tasks that belong to process instances with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIdIn",
						"description": "Restrict to tasks that belong to process instances with the given ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKey",
						"description": "Restrict to tasks that belong to process instances with the given business key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyExpression",
						"description": "Restrict to tasks that belong to process instances with the given business key which \nis described by an expression. See the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyIn",
						"description": "Restrict to tasks that belong to process instances with one of the give business keys. \nThe keys need to be in a comma-separated list."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyLike",
						"description": "Restrict to tasks that have a process instance business key that has the parameter \nvalue as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyLikeExpression",
						"description": "Restrict to tasks that have a process instance business key that has the parameter \nvalue as a substring and is described by an expression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Restrict to tasks that belong to a process definition with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Restrict to tasks that belong to a process definition with the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKeyIn",
						"description": "Restrict to tasks that belong to a process definition with one of the given keys. The \nkeys need to be in a comma-separated list."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionName",
						"description": "Restrict to tasks that belong to a process definition with the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionNameLike",
						"description": "Restrict to tasks that have a process definition name that has the parameter value as \na substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Restrict to tasks that belong to an execution with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Restrict to tasks that belong to case instances with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceBusinessKey",
						"description": "Restrict to tasks that belong to case instances with the given business key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceBusinessKeyLike",
						"description": "Restrict to tasks that have a case instance business key that has the parameter value \nas a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionId",
						"description": "Restrict to tasks that belong to a case definition with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionKey",
						"description": "Restrict to tasks that belong to a case definition with the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionName",
						"description": "Restrict to tasks that belong to a case definition with the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionNameLike",
						"description": "Restrict to tasks that have a case definition name that has the parameter value as a \nsubstring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseExecutionId",
						"description": "Restrict to tasks that belong to a case execution with the given id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceIdIn",
						"description": "Only include tasks which belong to one of the passed and comma-separated activity \ninstance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include tasks which belong to one of the passed and comma-separated \ntenant ids."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include tasks which belong to no tenant. Value may only be `true`, \nas `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assignee",
						"description": "Restrict to tasks that the given user is assigned to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assigneeExpression",
						"description": "Restrict to tasks that the user described by the given expression is assigned to. \nSee the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assigneeLike",
						"description": "Restrict to tasks that have an assignee that has the parameter \nvalue as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assigneeLikeExpression",
						"description": "Restrict to tasks that have an assignee that has the parameter value described by the \ngiven expression as a substring. See the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assigneeIn",
						"description": "Only include tasks which are assigned to one of the passed and \ncomma-separated user ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "assigneeNotIn",
						"description": "Only include tasks which are not assigned to one of the passed and\ncomma-separated user ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "owner",
						"description": "Restrict to tasks that the given user owns."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "ownerExpression",
						"description": "Restrict to tasks that the user described by the given expression owns. See the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateGroup",
						"description": "Only include tasks that are offered to the given group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateGroupExpression",
						"description": "Only include tasks that are offered to the group described by the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateUser",
						"description": "Only include tasks that are offered to the given user or to one of his groups."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateUserExpression",
						"description": "Only include tasks that are offered to the user described by the given expression. \nSee the \n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions) \nfor more information on available functions."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "includeAssignedTasks",
						"description": "Also include tasks that are assigned to users in candidate queries. Default is to only \ninclude tasks that are not assigned to any user if you query by candidate user or\ngroup(s)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "involvedUser",
						"description": "Only include tasks that the given user is involved in. A user is involved in a task if \nan identity link exists between task and user (e.g., the user is the assignee)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "involvedUserExpression",
						"description": "Only include tasks that the user described by the given expression is involved in.\nA user is involved in a task if an identity link exists between task and user\n(e.g., the user is the assignee). See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "assigned",
						"description": "If set to `true`, restricts the query to all tasks that are assigned."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "unassigned",
						"description": "If set to `true`, restricts the query to all tasks that are unassigned."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDefinitionKey",
						"description": "Restrict to tasks that have the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDefinitionKeyIn",
						"description": "Restrict to tasks that have one of the given keys. The keys need to be in a\ncomma-separated list."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDefinitionKeyLike",
						"description": "Restrict to tasks that have a key that has the parameter value as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "name",
						"description": "Restrict to tasks that have the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "nameNotEqual",
						"description": "Restrict to tasks that do not have the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "nameLike",
						"description": "Restrict to tasks that have a name with the given parameter value as substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "nameNotLike",
						"description": "Restrict to tasks that do not have a name with the given parameter\nvalue as substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "description",
						"description": "Restrict to tasks that have the given description."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "descriptionLike",
						"description": "Restrict to tasks that have a description that has the parameter\nvalue as a substring."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "priority",
						"description": "Restrict to tasks that have the given priority."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxPriority",
						"description": "Restrict to tasks that have a lower or equal priority."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "minPriority",
						"description": "Restrict to tasks that have a higher or equal priority."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueDate",
						"description": "Restrict to tasks that are due on the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.546+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueDateExpression",
						"description": "Restrict to tasks that are due on the date described by the given expression. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueAfter",
						"description": "Restrict to tasks that are due after the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.435+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueAfterExpression",
						"description": "Restrict to tasks that are due after the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueBefore",
						"description": "Restrict to tasks that are due before the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.243+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueBeforeExpression",
						"description": "Restrict to tasks that are due before the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withoutDueDate",
						"description": "Only include tasks which have no due date. Value may only be `true`, \nas `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpDate",
						"description": "Restrict to tasks that have a followUp date on the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date\nmust have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.342+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpDateExpression",
						"description": "Restrict to tasks that have a followUp date on the date described by the given\nexpression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpAfter",
						"description": "Restrict to tasks that have a followUp date after the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the\ndate must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.542+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpAfterExpression",
						"description": "Restrict to tasks that have a followUp date after the date described by the given\nexpression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpBefore",
						"description": "Restrict to tasks that have a followUp date before the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the\ndate must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g.,\n`2013-01-23T14:42:45.234+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpBeforeExpression",
						"description": "Restrict to tasks that have a followUp date before the date described by the given\nexpression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpBeforeOrNotExistent",
						"description": "Restrict to tasks that have no followUp date or a followUp date before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The\ntypical use case is to query all `active` tasks for a user for a given date."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "followUpBeforeOrNotExistentExpression",
						"description": "Restrict to tasks that have no followUp date or a followUp date before the date\ndescribed by the given expression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdOn",
						"description": "Restrict to tasks that were created on the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have\nthe format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdOnExpression",
						"description": "Restrict to tasks that were created on the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdAfter",
						"description": "Restrict to tasks that were created after the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdAfterExpression",
						"description": "Restrict to tasks that were created after the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdBefore",
						"description": "Restrict to tasks that were created before the given date. By\n[default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the\nformat `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createdBeforeExpression",
						"description": "Restrict to tasks that were created before the date described by the given expression.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "updatedAfter",
						"description": "Restrict to tasks that were updated after the given date. Every action that fires \na [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must\nhave the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "updatedAfterExpression",
						"description": "Restrict to tasks that were updated after the date described by the given expression. Every action that fires \na [task update event](https://docs.camunda.org/manual/7.19/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task.\nSee the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to a\n`java.util.Date` or `org.joda.time.DateTime` object."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"PENDING",
								"RESOLVED"
							]
						},
						"in": "query",
						"name": "delegationState",
						"description": "Restrict to tasks that are in the given delegation state. Valid values are\n`PENDING` and `RESOLVED`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateGroups",
						"description": "Restrict to tasks that are offered to any of the given candidate groups. Takes a\ncomma-separated list of group names, so for example `developers,support,sales`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "candidateGroupsExpression",
						"description": "Restrict to tasks that are offered to any of the candidate groups described by the\ngiven expression. See the\n[user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/expression-language/#internal-context-functions)\nfor more information on available functions. The expression must evaluate to\n`java.util.List` of Strings."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withCandidateGroups",
						"description": "Only include tasks which have a candidate group. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withoutCandidateGroups",
						"description": "Only include tasks which have no candidate group. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withCandidateUsers",
						"description": "Only include tasks which have a candidate user. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withoutCandidateUsers",
						"description": "Only include tasks which have no candidate users. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "active",
						"description": "Only include active tasks. Value may only be `true`, as `false`\nis the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended tasks. Value may only be `true`, as\n`false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskVariables",
						"description": "Only include tasks that have variables with certain values. Variable filtering\nexpressions are comma-separated and are structured as follows:\n\nA valid parameter value has the form `key_operator_value`. `key` is the variable name,\n`operator` is the comparison operator to be used and `value` the variable value.\n\n**Note**: Values are always treated as String objects on server side.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processVariables",
						"description": "Only include tasks that belong to process instances that have variables with certain \nvalues. Variable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`. `key` is the variable name,\n`operator` is the comparison operator to be used and `value` the variable value.\n\n**Note**: Values are always treated as String objects on server side.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`;\n`notLike`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceVariables",
						"description": "Only include tasks that belong to case instances that have variables with certain\nvalues. Variable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`. `key` is the variable name,\n`operator` is the comparison operator to be used and `value` the variable value.\n\n**Note**: Values are always treated as String objects on server side.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match all variable names in this query case-insensitively. If set\n`variableName` and `variablename` are treated as equal."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match all variable values in this query case-insensitively. If set\n`variableValue` and `variablevalue` are treated as equal."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "parentTaskId",
						"description": "Restrict query to all tasks that are sub tasks of the given task. Takes a task id."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"instanceId",
								"caseInstanceId",
								"dueDate",
								"executionId",
								"caseExecutionId",
								"assignee",
								"created",
								"lastUpdated",
								"description",
								"id",
								"name",
								"nameCaseInsensitive",
								"priority",
								"processVariable",
								"executionVariable",
								"taskVariable",
								"caseExecutionVariable",
								"caseInstanceVariable"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Task"]
			}
		},
		"/job-definition": {
			"post": {
				"summary": "Get Job Definitions (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/JobDefinitionQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/job-definition`",
						"value": {
							"sorting": [
								{
									"sortOrder": "asc",
									"sortBy": "activityId"
								},
								{
									"sortOrder": "asc",
									"sortBy": "jobType"
								}
							],
							"activityIdIn": [
								"ServiceTask1",
								"ServiceTask2"
							]
						}
					}}
				}}},
				"operationId": "queryJobDefinitions",
				"description": "Queries for job definitions that fulfill given parameters. This method is slightly\nmore powerful than the\n[Get Job Definitions](https://docs.camunda.org/manual/7.19/reference/rest/job-definition/get-query/)\nmethod because it allows filtering by multiple job definitions of\ntypes `String`, `Number` or `Boolean`.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/JobDefinitionDto"}
							},
							"examples": {"example-1": {
								"summary": "POST `/job-definition`",
								"description": "POST `/job-definition`",
								"value": [
									{
										"processDefinitionId": "aProcDefId",
										"activityId": "ServiceTask1",
										"overridingJobPriority": 15,
										"deploymentId": "aDeploymentId",
										"tenantId": null,
										"id": "aJobDefId",
										"jobConfiguration": "",
										"jobType": "asynchronous-continuation",
										"suspended": false,
										"processDefinitionKey": "aProcDefKey"
									},
									{
										"processDefinitionId": "aProcDefId",
										"activityId": "ServiceTask2",
										"overridingJobPriority": null,
										"deploymentId": "aDeploymentId",
										"tenantId": null,
										"id": "aJobDefId",
										"jobConfiguration": "",
										"jobType": "asynchronous-continuation",
										"suspended": true,
										"processDefinitionKey": "aProcDefKey"
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Job Definition"]
			},
			"get": {
				"summary": "Get Job Definitions",
				"operationId": "getJobDefinitions",
				"description": "Queries for job definitions that fulfill given parameters.\nThe size of the result set can be retrieved by using the\n[Get Job Definition Count](https://docs.camunda.org/manual/7.19/reference/rest/job-definition/get-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/JobDefinitionDto"}
							},
							"examples": {"example-1": {
								"summary": "GET `/job-definition?activityIdIn=ServiceTask1,ServiceTask2`",
								"description": "GET `/job-definition?activityIdIn=ServiceTask1,ServiceTask2`",
								"value": [
									{
										"processDefinitionId": "aProcDefId",
										"activityId": "ServiceTask1",
										"overridingJobPriority": 15,
										"deploymentId": "aDeploymentId",
										"tenantId": null,
										"id": "aJobDefId",
										"jobConfiguration": "",
										"jobType": "asynchronous-continuation",
										"suspended": false,
										"processDefinitionKey": "aProcDefKey"
									},
									{
										"processDefinitionId": "aProcDefId",
										"activityId": "ServiceTask2",
										"overridingJobPriority": null,
										"deploymentId": "aDeploymentId",
										"tenantId": null,
										"id": "aJobDefId",
										"jobConfiguration": "",
										"jobType": "asynchronous-continuation",
										"suspended": true,
										"processDefinitionKey": "aProcDefKey"
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobDefinitionId",
						"description": "Filter by job definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityIdIn",
						"description": "Only include job definitions which belong to one of the passed and comma-separated activity ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Only include job definitions which exist for the given process definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Only include job definitions which exist for the given process definition key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobType",
						"description": "Only include job definitions which exist for the given job type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation)\nfor more information about job types."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobConfiguration",
						"description": "Only include job definitions which exist for the given job configuration. For example: for\ntimer jobs it is the timer configuration."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "active",
						"description": "Only include active job definitions. Value may only be `true`, as `false` is the default\nbehavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended job definitions. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withOverridingJobPriority",
						"description": "Only include job definitions that have an overriding job priority defined. The only\neffective value is `true`. If set to `false`, this filter is not applied."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include job definitions which belong to one of the passed and comma-separated tenant\nids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include job definitions which belong to no tenant. Value may only be `true`, as\n`false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "includeJobDefinitionsWithoutTenantId",
						"description": "Include job definitions which belong to no tenant. Can be used in combination with\n`tenantIdIn`. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"jobDefinitionId",
								"activityId",
								"processDefinitionId",
								"processDefinitionKey",
								"jobType",
								"jobConfiguration",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Job Definition"]
			}
		},
		"/metrics": {"get": {
			"summary": "Get Metrics in Interval",
			"operationId": "interval",
			"description": "Retrieves a list of metrics, aggregated for a given interval.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/MetricsIntervalResultDto"}
						},
						"examples": {"example-1": {
							"summary": "GET /metrics?name=flow-node-instances&startDate=1970-01-01T01:45:00.000%2b0200&endDate=1970-01-01T02:00:00.000%2b0200",
							"value": [{
								"name": "flow-node-instances",
								"reporter": "REPORTER",
								"value": 23,
								"timestamp": "1970-01-01T01:45:00.000+0200"
							}]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {
						"type": "string",
						"enum": [
							"activity-instance-start",
							"activity-instance-end",
							"decision-instances",
							"flow-node-instances",
							"job-acquisition-attempt",
							"job-acquired-success",
							"job-acquired-failure",
							"job-execution-rejected",
							"job-successful",
							"job-failed",
							"job-locked-exclusive",
							"executed-decision-elements",
							"history-cleanup-removed-process-instances",
							"history-cleanup-removed-case-instances",
							"history-cleanup-removed-decision-instances",
							"history-cleanup-removed-batch-operations",
							"history-cleanup-removed-task-metrics",
							"process-instances"
						]
					},
					"in": "query",
					"name": "name",
					"description": "The name of the metric."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "reporter",
					"description": "The name of the reporter (host), on which the metrics was logged. This will have\nvalue provided by the [hostname configuration property](https://docs.camunda.org/manual/7.19/reference/deployment-descriptors/tags/process-engine/#hostname)."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startDate",
					"description": "The start date (inclusive)."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "endDate",
					"description": "The end date (exclusive)."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				},
				{
					"schema": {
						"default": 900,
						"type": "string"
					},
					"in": "query",
					"name": "interval",
					"description": "The interval for which the metrics should be aggregated. Time unit is seconds.\nDefault: The interval is set to 15 minutes (900 seconds)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "aggregateByReporter",
					"description": "Aggregate metrics by reporter."
				}
			],
			"tags": ["Metrics"]
		}},
		"/variable-instance/{id}": {"get": {
			"summary": "Get Variable Instance",
			"operationId": "getVariableInstance",
			"description": "Retrieves a variable by id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/VariableInstanceDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "GET `/variable-instance/someId`",
							"value": {
								"processDefinitionId": "aProcessDefinitionId",
								"processInstanceId": "aProcessInstanceId",
								"caseExecutionId": null,
								"caseInstanceId": null,
								"errorMessage": null,
								"activityInstanceId": "Task_1:b68b71ca-e310-11e2-beb0-f0def1557726",
								"type": "Integer",
								"batchId": null,
								"executionId": "b68b71c9-e310-11e2-beb0-f0def1557726",
								"name": "amount",
								"tenantId": null,
								"id": "someId",
								"value": 5,
								"taskId": null
							}
						}}
					}}
				},
				"404": {
					"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the variable instance.",
					"required": true
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "deserializeValue",
					"description": "Determines whether serializable variable values (typically variables that store custom Java objects)\nshould be deserialized on server side (default `true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side and transformed to JSON\nusing [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.\nNote that this requires the Java classes of the variable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string containing XML.\n\n**Note:**  While `true` is the default value for reasons of backward compatibility, we recommend setting this\nparameter to `false` when developing web applications that are independent of the Java process\napplications deployed to the engine."
				}
			],
			"tags": ["Variable Instance"]
		}},
		"/deployment/{id}/resources/{resourceId}/data": {"get": {
			"summary": "Get Resource (Binary)",
			"operationId": "getDeploymentResourceData",
			"description": "Retrieves the binary content of a deployment resource for the given deployment by id.",
			"responses": {
				"200": {
					"description": "Request successful. The media type of the response depends on the filename.",
					"content": {
						"application/octet-stream": {"schema": {
							"format": "binary",
							"description": "For files without any MIME type information, a byte stream is returned.",
							"type": "string"
						}},
						"*/*": {"schema": {
							"format": "binary",
							"description": "Files with MIME type information are returned as the saved type. For example, a\n                            `process.bpmn` resource will have the media type `application/xml`.",
							"type": "string"
						}}
					}
				},
				"400": {
					"description": "Deployment Resource with given resource id or deployment id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the deployment.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "resourceId",
					"description": "The id of the deployment resource.",
					"required": true
				}
			],
			"tags": ["Deployment"]
		}},
		"/external-task/fetchAndLock": {"post": {
			"summary": "Fetch and Lock",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/FetchExternalTasksDto"},
				"examples": {
					"example-3": {
						"summary": "POST /external-task/fetchAndLock (3)",
						"description": "Request with includeExtensionProperties",
						"value": {
							"workerId": "aWorkerId",
							"maxTasks": 1,
							"topics": [{
								"includeExtensionProperties": true,
								"lockDuration": 10000,
								"topicName": "createOrder"
							}],
							"usePriority": true
						}
					},
					"example-1": {
						"summary": "POST /external-task/fetchAndLock (1)",
						"description": "Request with variable filtering",
						"value": {
							"workerId": "aWorkerId",
							"maxTasks": 2,
							"topics": [{
								"variables": ["orderId"],
								"lockDuration": 10000,
								"topicName": "createOrder"
							}],
							"usePriority": true
						}
					},
					"example-2": {
						"summary": "POST /external-task/fetchAndLock (2)",
						"description": "Request with all variables included",
						"value": {
							"workerId": "aWorkerId",
							"maxTasks": 2,
							"topics": [{
								"processDefinitionId": "aProcessDefinitionId",
								"lockDuration": 10000,
								"tenantIdIn": "tenantOne",
								"topicName": "createOrder"
							}],
							"usePriority": true
						}
					}
				}
			}}},
			"operationId": "fetchAndLock",
			"description": "Fetches and locks a specific number of external tasks for execution by a worker. Query can be restricted\nto specific task topics and for each task topic an individual lock time can be provided.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/LockedExternalTaskDto"}
						},
						"examples": {
							"example-3": {
								"summary": "POST /external-task/fetchAndLock (3)",
								"description": "Request with includeExtensionProperties",
								"value": [{
									"processDefinitionId": "aProcessDefinitionId",
									"processInstanceId": "aProcessInstanceId",
									"workerId": "aWorkerId",
									"variables": {},
									"extensionProperties": {
										"property2": "value2",
										"property1": "value1"
									},
									"lockExpirationTime": "2015-10-06T16:34:42.000+0200",
									"errorMessage": "anErrorMessage",
									"activityInstanceId": "anActivityInstanceId",
									"priority": 0,
									"suspended": false,
									"processDefinitionKey": "aProcessDefinitionKey",
									"activityId": "anActivityId",
									"executionId": "anExecutionId",
									"retries": null,
									"tenantId": null,
									"businessKey": "default",
									"topicName": "createOrder",
									"id": "anExternalTaskId",
									"errorDetails": "anErrorDetails"
								}]
							},
							"example-1": {
								"summary": "POST /external-task/fetchAndLock (1)",
								"description": "Request with variable filtering",
								"value": [
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "aProcessInstanceId",
										"workerId": "aWorkerId",
										"variables": {"orderId": {
											"valueInfo": {},
											"type": "String",
											"value": "1234"
										}},
										"lockExpirationTime": "2015-10-06T16:34:42.000+0200",
										"errorMessage": "anErrorMessage",
										"activityInstanceId": "anActivityInstanceId",
										"priority": 4,
										"processDefinitionKey": "aProcessDefinitionKey",
										"activityId": "anActivityId",
										"executionId": "anExecutionId",
										"retries": 3,
										"tenantId": null,
										"topicName": "createOrder",
										"id": "anExternalTaskId",
										"errorDetails": "anErrorDetails"
									},
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "aProcessInstanceId",
										"workerId": "aWorkerId",
										"variables": {"orderId": {
											"valueInfo": {},
											"type": "String",
											"value": "3456"
										}},
										"lockExpirationTime": "2015-10-06T16:34:42.000+0200",
										"errorMessage": "anErrorMessage",
										"activityInstanceId": "anActivityInstanceId",
										"priority": 0,
										"processDefinitionKey": "aProcessDefinitionKey",
										"activityId": "anActivityId",
										"executionId": "anExecutionId",
										"retries": 3,
										"tenantId": null,
										"topicName": "createOrder",
										"id": "anExternalTaskId",
										"errorDetails": "anotherErrorDetails"
									}
								]
							},
							"example-2": {
								"summary": "POST /external-task/fetchAndLock (2)",
								"description": "Request with all variables included",
								"value": [
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "aProcessInstanceId",
										"workerId": "aWorkerId",
										"variables": {"orderId": {
											"valueInfo": {},
											"type": "String",
											"value": "1234"
										}},
										"lockExpirationTime": "2015-10-06T16:34:42.00+0200",
										"errorMessage": "anErrorMessage",
										"activityInstanceId": "anActivityInstanceId",
										"priority": 4,
										"processDefinitionKey": "aProcessDefinitionKey",
										"activityId": "anActivityId",
										"executionId": "anExecutionId",
										"retries": 3,
										"tenantId": "tenantOne",
										"businessKey": "aBusinessKey",
										"topicName": "createOrder",
										"id": "anExternalTaskId",
										"errorDetails": "anErrorDetails"
									},
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "aProcessInstanceId",
										"workerId": "aWorkerId",
										"variables": {"orderId": {
											"valueInfo": {},
											"type": "String",
											"value": "3456"
										}},
										"lockExpirationTime": "2015-10-06T16:34:42.000+0200",
										"errorMessage": "anErrorMessage",
										"activityInstanceId": "anActivityInstanceId",
										"priority": 0,
										"processDefinitionKey": "aProcessDefinitionKey",
										"activityId": "anActivityId",
										"executionId": "anExecutionId",
										"retries": 3,
										"tenantId": null,
										"businessKey": "aBusinessKey",
										"topicName": "createOrder",
										"id": "anExternalTaskId",
										"errorDetails": "anotherErrorDetails"
									}
								]
							}
						}
					}}
				},
				"400": {
					"description": "Bad Request. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["External Task"]
		}},
		"/filter/{id}": {
			"get": {
				"summary": "Get Single Filter",
				"operationId": "getSingleFilter",
				"description": "Retrieves a single filter by id, according to the `Filter` interface in the engine.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/FilterDto"},
							"examples": {
								"example-1": {
									"summary": "request",
									"description": "GET `/filter/aFilterId`",
									"value": {
										"owner": null,
										"query": {"candidateGroup": "accounting"},
										"name": "Accounting Tasks",
										"id": "9917d731-3cde-11e4-b704-f0def1e59da8",
										"properties": {
											"color": "#3e4d2f",
											"description": "Tasks assigned to group accounting",
											"priority": 5
										},
										"resourceType": "Task"
									}
								},
								"example-2": {
									"summary": "request with itemCount",
									"description": "GET `/filter/aFilterId?itemCount=true`",
									"value": {
										"owner": null,
										"query": {"candidateGroup": "accounting"},
										"name": "Accounting Tasks",
										"id": "9917d731-3cde-11e4-b704-f0def1e59da8",
										"properties": {
											"color": "#3e4d2f",
											"description": "Tasks assigned to group accounting",
											"priority": 5
										},
										"resourceType": "Task",
										"itemCount": 23
									}
								}
							}
						}}
					},
					"403": {
						"description": "The authenticated user is unauthorized to read this filter.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "Filter with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the filter to be retrieved.",
						"required": true
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "itemCount",
						"description": "If set to `true`, each filter result will contain an `itemCount`\nproperty with the number of items matched by the filter itself."
					}
				],
				"tags": ["Filter"]
			},
			"options": {
				"summary": "Filter Resource Options",
				"operationId": "filterResourceOptionsSingle",
				"description": "The OPTIONS request allows you to check for the set of available operations \nthat the currently authenticated user can perform on the `/filter` resource.\nWhether the user can perform an operation or not may depend on various\nfactors, including the users authorizations to interact with this\nresource and the internal configuration of the process engine.",
				"responses": {"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
						"examples": {"example-1": {
							"summary": "request",
							"description": "OPTIONS `/filter/aFilterId`",
							"value": {"links": [
								{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:8080/engine-rest/filter/aFilterId"
								},
								{
									"method": "GET",
									"rel": "singleResult",
									"href": "http://localhost:8080/engine-rest/filter/aFilterId/singleResult"
								},
								{
									"method": "POST",
									"rel": "singleResult",
									"href": "http://localhost:8080/engine-rest/filter/aFilterId/singleResult"
								},
								{
									"method": "GET",
									"rel": "list",
									"href": "http://localhost:8080/engine-rest/filter/aFilterId/list"
								},
								{
									"method": "POST",
									"rel": "list",
									"href": "http://localhost:8080/engine-rest/filter/aFilterId/list"
								},
								{
									"method": "GET",
									"rel": "count",
									"href": "http://localhost:8080/engine-rest/filter/aFilterId/count"
								},
								{
									"method": "POST",
									"rel": "count",
									"href": "http://localhost:8080/engine-rest/filter/aFilterId/count"
								},
								{
									"method": "PUT",
									"rel": "update",
									"href": "http://localhost:8080/engine-rest/filter/aFilterId"
								},
								{
									"method": "DELETE",
									"rel": "delete",
									"href": "http://localhost:8080/engine-rest/filter/aFilterId"
								}
							]}
						}}
					}}
				}},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the filter to be checked.",
					"required": true
				}],
				"tags": ["Filter"]
			},
			"delete": {
				"summary": "Delete Filter",
				"operationId": "deleteFilter",
				"description": "Deletes a filter by id.",
				"responses": {
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "\nThe authenticated user is unauthorized to delete this filter.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "\nFilter cannot be found. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the filter to be deleted.",
					"required": true
				}],
				"tags": ["Filter"]
			},
			"put": {
				"summary": "Update Filter",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/CreateFilterDto"},
					"examples": {"example-1": {
						"summary": "request",
						"description": "PUT `/filter/aFilterID`",
						"value": {
							"owner": "jonny1",
							"query": {"assignee": "jonny1"},
							"name": "My Tasks",
							"properties": {
								"color": "#99CCFF",
								"description": "Tasks assigned to me",
								"priority": -10
							},
							"resourceType": "Task"
						}
					}}
				}}},
				"operationId": "updateFilter",
				"description": "Updates an existing filter.",
				"responses": {
					"400": {
						"description": "\nFilter was invalid. See\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "\nThe authenticated user is unauthorized to update this filter.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "\nFilter cannot be found. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the filter to be updated.",
					"required": true
				}],
				"tags": ["Filter"]
			}
		},
		"/external-task/{id}/bpmnError": {"post": {
			"summary": "Handle BPMN Error",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ExternalTaskBpmnError"},
				"examples": {"example-1": {
					"summary": "POST /external-task/anId/bpmnError",
					"value": {
						"workerId": "aWorker",
						"variables": {
							"aVariable": {
								"type": "String",
								"value": "aStringValue"
							},
							"anotherVariable": {
								"type": "Boolean",
								"value": true
							}
						},
						"errorMessage": "anErrorMessage",
						"errorCode": "bpmn-error"
					}
				}}
			}}},
			"operationId": "handleExternalTaskBpmnError",
			"description": "Reports a business error in the context of a running external task by id. The error code must be specified\nto identify the BPMN error handler.",
			"responses": {
				"400": {
					"description": "Returned if the task's most recent lock was not acquired by the provided worker.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "Returned if the corresponding process instance could not be resumed successfully.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,\ne.g., due to a caught BPMN boundary event.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the external task in which context a BPMN error is reported.",
				"required": true
			}],
			"tags": ["External Task"]
		}},
		"/decision-definition/key/{key}/tenant-id/{tenant-id}/xml": {"get": {
			"summary": "Get XML By Key and Tenant",
			"operationId": "getDecisionDefinitionDmnXmlByKeyAndTenant",
			"description": "Retrieves the XML of the latest version of the decision definition for tenant",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionDefinitionDiagramDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for GET `/decision-definition/key/aKey/tenant-id/aTenantId/xml`",
							"value": {
								"dmnXml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                                    <definitions xmlns=\"http://www.omg.org/spec/DMN/20151101/dmn.xsd\"\n                                                 id=\"definitions\"\n                                                 name=\"camunda\"\n                                                 namespace=\"http://camunda.org/schema/1.0/dmn\">\n                                      <decision id=\"testDecision\" name=\"decision\">\n                                        <decisionTable id=\"table\">\n                                          <output id=\"result\" name=\"result\" >\n                                          <\/output>\n                                          <rule id=\"rule\">\n                                            <outputEntry id=\"output1\">\n                                              <text>\"not okay\"<\/text>\n                                            <\/outputEntry>\n                                          <\/rule>\n                                        <\/decisionTable>\n                                      <\/decision>\n                                    <\/definitions>",
								"id": "aDecisionDefinitionId"
							}
						}}
					}}
				},
				"404": {
					"description": "Decision definition with given key does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the decision definition (the latest version thereof).",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the decision definition belongs to.",
					"required": true
				}
			],
			"tags": ["Decision Definition"]
		}},
		"/job/{id}": {
			"get": {
				"summary": "Get Job",
				"operationId": "getJob",
				"description": "Retrieves a job by id, according to the `Job` interface in the engine.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/JobDto"},
							"examples": {"example-1": {
								"description": "GET `/job/aJobId`",
								"value": {
									"processInstanceId": "aProcessInstanceId",
									"processDefinitionId": "timer:1:f9ee9c1f-e3ff-11e8-8f7d-e4a7a094a9d6",
									"jobDefinitionId": "f9eec330-e3ff-11e8-8f7d-e4a7a094a9d6",
									"dueDate": "2018-07-17T17:00:00+0200",
									"priority": 10,
									"suspended": false,
									"processDefinitionKey": "timer",
									"executionId": "anExecutionId",
									"retries": 0,
									"createTime": "2018-05-05T17:00:00+0200",
									"tenantId": null,
									"id": "aJobId",
									"exceptionMessage": "An exception Message",
									"failedActivityId": "anActivityId"
								}
							}}
						}}
					},
					"404": {
						"description": "Job with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the job to be retrieved.",
					"required": true
				}],
				"tags": ["Job"]
			},
			"delete": {
				"summary": "Delete Job",
				"operationId": "deleteJob",
				"description": "Deletes a job by id.",
				"responses": {
					"500": {
						"description": "The job could not be deleted. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."},
					"404": {
						"description": "Job with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the job to be deleted.",
					"required": true
				}],
				"tags": ["Job"]
			}
		},
		"/process-instance/delete": {"post": {
			"summary": "Delete Async (POST)",
			"requestBody": {
				"description": "**Unallowed property**: `historicProcessInstanceQuery`",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/DeleteProcessInstancesDto"},
					"examples": {"example-1": {
						"summary": "POST `/process-instance/delete` Request Body 1",
						"value": {
							"deleteReason": "aReason",
							"skipSubprocesses": true,
							"processInstanceIds": [
								"aProcess",
								"secondProcess"
							],
							"skipCustomListeners": true
						}
					}}
				}}
			},
			"operationId": "deleteProcessInstancesAsyncOperation",
			"description": "Deletes multiple process instances asynchronously (batch).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response 1",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"createUserId": "demo",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"jobsCreated": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "Bad Request\nReturned if some of the query parameters are invalid, i.e., neither processInstanceIds, nor processInstanceQuery is present",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Process Instance"]
		}},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/xml": {"get": {
			"summary": "Get XML",
			"operationId": "getProcessDefinitionBpmn20XmlByKeyAndTenantId",
			"description": "Retrieves latest version the BPMN 2.0 XML of a process definition.\nReturns the XML for the latest version of the process definition for tenant.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ProcessDefinitionDiagramDto"},
						"examples": {"example-1": {
							"summary": "GET `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/xml`",
							"value": {
								"bpmn20Xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions\n                         xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n                         xmlns:camunda=\"http://camunda.org/schema/1.0/bpmn\"\n                         targetNamespace=\"Examples\">\n                         <process id=\"oneTaskProcess\" isExecutable=\"true\">\n                           <startEvent id=\"theStart\" />\n                           <sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"theEnd\" />\n                           <endEvent id=\"theEnd\" />\n                         <\/process>\n                       <\/definitions>",
								"id": "anProcessDefinitionId"
							}
						}}
					}}
				},
				"403": {
					"description": "The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) whose XML should be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definition belongs to.",
					"required": true
				}
			],
			"tags": ["Process Definition"]
		}},
		"/event-subscription": {"get": {
			"summary": "Get List",
			"operationId": "getEventSubscriptions",
			"description": "Queries for event subscriptions that fulfill given parameters.\nThe size of the result set can be retrieved by using the\n[Get Event Subscriptions count](https://docs.camunda.org/manual/7.19/reference/rest/event-subscription/get-query-count/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/EventSubscriptionDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/event-subscription?eventType=message&sortBy=created&sortOrder=desc`",
							"value": [
								{
									"executionId": "anExecutionId",
									"processInstanceId": "aProcessInstanceId",
									"activityId": "anActivityId",
									"createdDate": "2020-04-20T15:23:12.229+0200",
									"tenantId": null,
									"eventName": "anEventName",
									"id": "anId",
									"eventType": "message"
								},
								{
									"executionId": "anotherExecutionId",
									"processInstanceId": "anotherProcessInstanceId",
									"activityId": "anotherActivityId",
									"createdDate": "2020-04-20T15:20:12.229+0200",
									"tenantId": null,
									"eventName": "anotherEventName",
									"id": "anotherId",
									"eventType": "message"
								}
							]
						}}
					}}
				},
				"400": {
					"description": "Bad Request\nReturned if some of the query parameters are invalid,\nfor example if a `sortOrder` parameter is supplied, but no `sortBy`.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "eventSubscriptionId",
					"description": "Only select subscription with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "eventName",
					"description": "Only select subscriptions for events with the given name."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"message",
							"signal",
							"compensate",
							"conditional"
						]
					},
					"in": "query",
					"name": "eventType",
					"description": "Only select subscriptions for events with the given type.\nValid values: `message`, `signal`, `compensate` and `conditional`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "executionId",
					"description": "Only select subscriptions that belong to an execution with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Only select subscriptions that belong to a process instance with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityId",
					"description": "Only select subscriptions that belong to an activity with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids.\nOnly select subscriptions that belong to one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only select subscriptions which have no tenant id.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeEventSubscriptionsWithoutTenantId",
					"description": "Select event subscriptions which have no tenant id.\nCan be used in combination with tenantIdIn parameter.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"created",
							"tenantId"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Event Subscription"]
		}},
		"/history/task/report": {"get": {
			"summary": "Get Task Report (Historic)",
			"operationId": "getHistoricTaskInstanceReport",
			"description": "Retrieves a report of completed tasks. When the report type is set to `count`, the\nreport contains a list of completed task counts where an entry contains the task name, the\ndefinition key of the task, the process definition id, the process definition key, the process\ndefinition name and the count of how many tasks were completed for the specified key in a given\nperiod. When the report type is set to `duration`, the report contains a minimum, maximum and\naverage duration value of all completed task instances in a given period.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/HistoricTaskInstanceReportResultDto"}
						},
						"examples": {
							"example-1": {
								"summary": "Request for completed task report",
								"description": "GET `/history/task/report?reportType=count&groupBy=processDefinition`",
								"value": [
									{
										"processDefinitionId": "aProcessDefinitionId",
										"count": 42,
										"taskName": null,
										"processDefinitionName": "A Process Definition Name",
										"processDefinitionKey": "aProcessDefinitionKey"
									},
									{
										"processDefinitionId": "anotherProcessDefinitionId",
										"count": 9000,
										"taskName": null,
										"processDefinitionName": "Another Process Definition Name",
										"processDefinitionKey": "anotherProcessDefinitionKey"
									}
								]
							},
							"example-2": {
								"summary": "Request for duration report.",
								"description": "GET `/history/task/report?reportType=duration&periodUnit=quarter`",
								"value": [
									{
										"average": 375000,
										"period": 1,
										"maximum": 500000,
										"periodUnit": "QUARTER",
										"minimum": 250000
									},
									{
										"average": 450000,
										"period": 2,
										"maximum": 600000,
										"periodUnit": "QUARTER",
										"minimum": 300000
									},
									{
										"average": 750000,
										"period": 3,
										"maximum": 1000000,
										"periodUnit": "QUARTER",
										"minimum": 500000
									},
									{
										"average": 150000,
										"period": 4,
										"maximum": 200000,
										"periodUnit": "QUARTER",
										"minimum": 100000
									}
								]
							}
						}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `completedAfter`\nparameter is supplied, but the date format is wrong. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {
						"type": "string",
						"enum": [
							"duration",
							"count"
						]
					},
					"in": "query",
					"name": "reportType",
					"description": "**Mandatory.** Specifies the kind of the report to execute. To retrieve a report\nabout the duration of process instances the value must be set to `duration`. For a\nreport of the completed tasks in a specific timespan the value must be set to `count`."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"MONTH",
							"QUARTER"
						]
					},
					"in": "query",
					"name": "periodUnit",
					"description": "When the report type is set to `duration`, this parameter is **mandatory**.\nSpecifies the granularity of the report. Valid values are `month` and `quarter`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "completedBefore",
					"description": "Restrict to tasks that were completed before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "completedAfter",
					"description": "Restrict to tasks that were completed after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "groupBy",
					"description": "When the report type is set to `count`, this parameter is **mandatory**. Groups the\ntasks report by a given criterion. Valid values are `taskName` and `processDefinition`."
				}
			],
			"tags": ["Historic Task Instance"]
		}},
		"/incident/{id}/annotation": {
			"delete": {
				"summary": "Clear Incident Annotation",
				"operationId": "clearIncidentAnnotation",
				"description": "Clears the annotation of an incident with given id.",
				"responses": {
					"400": {
						"description": "Returned if no incident can be found for the given id.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the incident to clear the annotation at.",
					"required": true
				}],
				"tags": ["Incident"]
			},
			"put": {
				"summary": "Set Incident Annotation",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/AnnotationDto"},
					"examples": {"example-1": {
						"summary": "PUT `/incident/7c80cc8f-ef95-11e6-b6e6-34f39ab71d4b/annotation`",
						"value": {"annotation": "my annotation"}
					}}
				}}},
				"operationId": "setIncidentAnnotation",
				"description": "Sets the annotation of an incident with given id.",
				"responses": {
					"400": {
						"description": "Returned if no incident can be found for the given id.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the incident to clear the annotation at.",
					"required": true
				}],
				"tags": ["Incident"]
			}
		},
		"/execution/{id}/messageSubscriptions/{messageName}": {"get": {
			"summary": "Get Message Event Subscription",
			"operationId": "getMessageEventSubscription",
			"description": "Retrieves a message event subscription for a given execution by id and a message\nname.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/EventSubscriptionDto"},
						"examples": {"example-1": {
							"description": "GET `/execution/anExecutionId/messageSubscriptions/someMessage`",
							"value": {
								"executionId": "anExecutionId",
								"processInstanceId": "aProcInstId",
								"activityId": "anActivity",
								"createdDate": "2013-01-23T13:59:43.000+0200",
								"tenantId": null,
								"eventName": "anEvent",
								"id": "anEventSubscriptionId",
								"eventType": "message"
							}
						}}
					}}
				},
				"404": {
					"description": "A message subscription for the given name and execution does not exist.\nThis may either mean that the execution does not exist, or that\nit is not subscribed on such a message.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the execution that holds the subscription.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "messageName",
					"description": "The name of the message that the subscription corresponds to.",
					"required": true
				}
			],
			"tags": ["Execution"]
		}},
		"/process-instance/{id}": {
			"get": {
				"summary": "Get Process Instance",
				"operationId": "getProcessInstance",
				"description": "Retrieves a process instance by id, according to the `ProcessInstance` interface in the engine.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/ProcessInstanceDto"},
							"examples": {"example-1": {
								"summary": "GET `/process-instance/aProcessInstanceId`",
								"value": {
									"caseInstanceId": "aCaseInstanceId",
									"businessKey": "aKey",
									"ended": false,
									"tenantId": null,
									"id": "aProcessInstanceId",
									"suspended": false,
									"definitionId": "aProcDefId"
								}
							}}
						}}
					},
					"404": {
						"description": "Process instance with given id does not exist. See the \n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format. ",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the process instance to be retrieved.",
					"required": true
				}],
				"tags": ["Process Instance"]
			},
			"delete": {
				"summary": "Delete",
				"operationId": "deleteProcessInstance",
				"description": "Deletes a running process instance by id.",
				"responses": {
					"204": {"description": "Request successful."},
					"404": {
						"description": "Not found\nProcess instance with given id does not exist. ",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the process instance to be deleted.",
						"required": true
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipCustomListeners",
						"description": "If set to true, the custom listeners will be skipped."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipIoMappings",
						"description": "If set to true, the input/output mappings will be skipped."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipSubprocesses",
						"description": "If set to true, subprocesses related to deleted processes will be skipped."
					},
					{
						"schema": {
							"default": true,
							"type": "boolean"
						},
						"in": "query",
						"name": "failIfNotExists",
						"description": "If set to false, the request will still be successful if the process id is not found."
					}
				],
				"tags": ["Process Instance"]
			}
		},
		"/history/decision-instance/set-removal-time": {"post": {
			"summary": "Set Removal Time Async (POST)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SetRemovalTimeToHistoricDecisionInstancesDto"},
				"examples": {"example-1": {
					"summary": "POST `/history/decision-instance/set-removal-time`",
					"description": "POST `/history/decision-instance/set-removal-time`",
					"value": {
						"historicDecisionInstanceIds": [
							"b4d2ad98-7240-11e9-98b7-be5e0f7575b7",
							"b4d2ad94-7240-11e9-98b7-be5e0f7575b7"
						],
						"hierarchical": true,
						"historicDecisionInstanceQuery": {"evaluatedBefore": "2019-09-05T17:02:10.123+0200"},
						"absoluteRemovalTime": "2019-05-05T11:56:24.725+0200"
					}
				}}
			}}},
			"operationId": "setRemovalTimeAsyncHistoricDecisionInstance",
			"description": "Sets the removal time to multiple historic decision instances asynchronously\n(batch).\n\nAt least `historicDecisionInstanceIds` or\n`historicDecisionInstanceQuery` has to be provided. If both are\nprovided, all instances matching query criterion and instances from the list\nwill be updated with a removal time.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "POST `/history/decision-instance/set-removal-time`",
							"description": "POST `/history/decision-instance/set-removal-time`",
							"value": {
								"monitorJobDefinitionId": "120b568f-724a-11e9-98b7-be5e0f7575b7",
								"createUserId": "demo-user",
								"invocationsPerBatchJob": 1,
								"totalJobs": 12,
								"jobsCreated": 10,
								"tenantId": "accounting",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "120b5690-724a-11e9-98b7-be5e0f7575b7",
								"id": "120b568d-724a-11e9-98b7-be5e0f7575b7",
								"type": "decision-set-removal-time",
								"batchJobDefinitionId": "120b568e-724a-11e9-98b7-be5e0f7575b7",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "Request was unsuccessfull due to a bad user request. This occurs if\nsome of the query parameters are invalid, e. g. if neither\nhistoricDecisionInstances nor historicDecisionInstanceQuery is\npresent or if no mode is specified.\n\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Historic Decision Instance"]
		}},
		"/process-instance/{id}/activity-instances": {"get": {
			"summary": "Get Activity Instance",
			"operationId": "getActivityInstanceTree",
			"description": "Retrieves an Activity Instance (Tree) for a given process instance by id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ActivityInstanceDto"},
						"examples": {"example-1": {
							"summary": "GET `/process-instance/aProcessInstanceId/activity-instances`",
							"value": {
								"childTransitionInstances": [],
								"processInstanceId": "eca75c6b-f70c-11e9-8777-e4a7a094a9d6",
								"processDefinitionId": "invoice:2:e9d77375-f70c-11e9-8777-e4a7a094a9d6",
								"activityName": "Invoice Receipt",
								"activityId": "invoice:2:e9d77375-f70c-11e9-8777-e4a7a094a9d6",
								"executionIds": ["eca75c6b-f70c-11e9-8777-e4a7a094a9d6"],
								"incidents": null,
								"name": "Invoice Receipt",
								"id": "eca75c6b-f70c-11e9-8777-e4a7a094a9d6",
								"activityType": "processDefinition",
								"incidentIds": null,
								"childActivityInstances": [{
									"childTransitionInstances": [],
									"processInstanceId": "eca75c6b-f70c-11e9-8777-e4a7a094a9d6",
									"processDefinitionId": "invoice:2:e9d77375-f70c-11e9-8777-e4a7a094a9d6",
									"activityName": "Approve Invoice",
									"activityId": "approveInvoice",
									"executionIds": ["eca75c6b-f70c-11e9-8777-e4a7a094a9d6"],
									"incidents": [{
										"activityId": "AttachedTimerBoundaryEvent",
										"id": "648d7e21-f71c-11e9-a725-e4a7a094a9d6"
									}],
									"name": "Approve Invoice",
									"id": "approveInvoice:eca89509-f70c-11e9-8777-e4a7a094a9d6",
									"activityType": "userTask",
									"incidentIds": ["648d7e21-f71c-11e9-a725-e4a7a094a9d6"],
									"childActivityInstances": [],
									"parentActivityInstanceId": "eca75c6b-f70c-11e9-8777-e4a7a094a9d6"
								}],
								"parentActivityInstanceId": null
							}
						}}
					}}
				},
				"500": {
					"description": "Process instance with given id does not exist.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process instance for which the activity instance should be retrieved.",
				"required": true
			}],
			"tags": ["Process Instance"]
		}},
		"/task/{id}/unclaim": {"post": {
			"summary": "Unclaim",
			"operationId": "unclaim",
			"description": "Resets a task's assignee. If successful, the task is not assigned to a user.",
			"responses": {
				"500": {
					"description": "The Task with the given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to unclaim.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/group/{id}/members": {"options": {
			"summary": "Group Membership Resource Options",
			"operationId": "availableGroupMembersOperations",
			"description": "The OPTIONS request allows checking for the set of available operations that the currently authenticated\nuser can perform on the resource. If the user can perform an operation or not may depend on various\nthings, including the users authorizations to interact with this resource and the internal configuration\nof the process engine.",
			"responses": {"200": {
				"description": "Request successful.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
					"examples": {"example-1": {
						"summary": "Status 200 response",
						"description": "OPTIONS `/group/sales/members`",
						"value": {"links": [
							{
								"method": "DELETE",
								"rel": "delete",
								"href": "http://localhost:8080/engine-rest/group/sales/members"
							},
							{
								"method": "PUT",
								"rel": "create",
								"href": "http://localhost:8080/engine-rest/group/sales/members"
							}
						]}
					}}
				}}
			}},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the group.",
				"required": true
			}],
			"tags": ["Group"]
		}},
		"/external-task/{id}/failure": {"post": {
			"summary": "Handle Failure",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ExternalTaskFailureDto"},
				"examples": {"example-1": {
					"summary": "POST /external-task/anId/failure",
					"value": {
						"retries": 3,
						"workerId": "aWorker",
						"retryTimeout": 60000,
						"errorMessage": "Does not compute"
					}
				}}
			}}},
			"operationId": "handleFailure",
			"description": "Reports a failure to execute an external task by id. A number of retries and a timeout until the task can\nbe retried can be specified. If retries are set to 0, an incident for this task is created.",
			"responses": {
				"400": {
					"description": "Returned if the task's most recent lock was not acquired by the provided worker. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "Returned if the corresponding process instance could not be resumed successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,\ne.g., due to a caught BPMN boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the external task to report a failure for.",
				"required": true
			}],
			"tags": ["External Task"]
		}},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/start": {"post": {
			"summary": "Start Instance",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/StartProcessInstanceDto"},
				"examples": {
					"example-3": {
						"summary": "Starting a process instance at two specific activities",
						"value": {
							"variables": {"aProcessVariable": {
								"type": "String",
								"value": "aStringValue"
							}},
							"businessKey": "myBusinessKey",
							"startInstructions": [
								{
									"activityId": "activityId",
									"variables": {"var": {
										"type": "String",
										"value": "aVariableValue",
										"local": false
									}},
									"type": "startBeforeActivity"
								},
								{
									"activityId": "anotherActivityId",
									"variables": {"varLocal": {
										"type": "String",
										"value": "anotherVariableValue",
										"local": true
									}},
									"type": "startAfterActivity"
								}
							],
							"skipCustomListeners": true
						}
					},
					"example-1": {
						"summary": "Starting a process instance at its default initial activity",
						"value": {
							"variables": {
								"aVariable": {
									"type": "String",
									"value": "aStringValue"
								},
								"anotherVariable": {
									"type": "Boolean",
									"value": true
								}
							},
							"businessKey": "myBusinessKey"
						}
					},
					"example-2": {
						"summary": "Starting a process instance with variables in return",
						"value": {
							"variables": {
								"aVariable": {
									"type": "String",
									"value": "aStringValue"
								},
								"anotherVariable": {
									"type": "Boolean",
									"value": true
								}
							},
							"withVariablesInReturn": true,
							"businessKey": "myBusinessKey"
						}
					}
				}
			}}},
			"operationId": "startProcessInstanceByKeyAndTenantId",
			"description": "Instantiates a given process definition, starts the latest version of the process definition for tenant.\nProcess variables and business key may be supplied in the request body.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ProcessInstanceWithVariablesDto"},
						"examples": {
							"example-3": {
								"summary": "Status 200 Response 3",
								"description": "Response for starting a process instance at two specific activities",
								"value": {
									"caseInstanceId": null,
									"businessKey": "myBusinessKey",
									"tenantId": null,
									"ended": false,
									"links": [{
										"method": "GET",
										"rel": "self",
										"href": "http://localhost:8080/rest-test/process-instance/anId"
									}],
									"id": "anId",
									"suspended": false,
									"definitionId": "aProcessDefinitionId"
								}
							},
							"example-1": {
								"summary": "Status 200 Response 1",
								"description": "Response for starting a process instance at its default initial activity",
								"value": {
									"caseInstanceId": null,
									"businessKey": "myBusinessKey",
									"tenantId": null,
									"ended": false,
									"links": [{
										"method": "GET",
										"rel": "self",
										"href": "http://localhost:8080/rest-test/process-instance/anId"
									}],
									"id": "anId",
									"suspended": false,
									"definitionId": "aProcessDefinitionId"
								}
							},
							"example-2": {
								"summary": "Status 200 Response 2",
								"description": "Response for starting a process instance with variables in return",
								"value": {
									"variables": {
										"aVariable": {
											"valueInfo": {},
											"type": "String",
											"value": "aStringValue"
										},
										"anotherVariable": {
											"valueInfo": {"transient": true},
											"type": "Boolean",
											"value": true
										}
									},
									"caseInstanceId": null,
									"businessKey": "myBusinessKey",
									"ended": false,
									"tenantId": null,
									"links": [{
										"method": "GET",
										"rel": "self",
										"href": "http://localhost:8080/rest-test/process-instance/aProcInstId"
									}],
									"id": "aProcInstId",
									"suspended": false,
									"definitionId": "aProcessDefinitionId"
								}
							}
						}
					}}
				},
				"400": {
					"description": "The instance could not be created due to an invalid variable value,\nfor example if the value could not be parsed to an `Integer` value or\nthe passed variable type is not supported.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The instance could not be created successfully.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definition belongs to.",
					"required": true
				}
			],
			"tags": ["Process Definition"]
		}},
		"/decision-requirements-definition/key/{key}": {"get": {
			"summary": "Get Decision Requirements Definition by Key",
			"operationId": "getDecisionRequirementsDefinitionByKey",
			"description": "Retrieves a decision requirements definition according to the\n`DecisionRequirementsDefinition` interface in the engine. \nReturns the latest version of the decision requirements definition \nwhich belongs to no tenant.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionRequirementsDefinitionDto"},
						"examples": {"example-1": {
							"summary": "GET `/decision-requirements-definition/key/invoiceKey`",
							"description": "GET `/decision-requirements-definition/key/invoiceKey`",
							"value": {
								"resource": "invoice.dmn",
								"deploymentId": "c627175e-41b7-11e6-b0ef-00aa004d0001",
								"name": "receiptInvoice",
								"tenantId": null,
								"id": "invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c",
								"category": "invoice",
								"version": 2,
								"key": "invoiceKey"
							}
						}}
					}}
				},
				"404": {
					"description": "Decision requirements definition with given id or key does not\nexist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the decision requirements definition (the latest version thereof) to be retrieved.",
				"required": true
			}],
			"tags": ["Decision Requirements Definition"]
		}},
		"/job/{id}/priority": {"put": {
			"summary": "Set Job Priority",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/PriorityDto"},
				"examples": {"example-1": {
					"summary": "PUT `/job/aJobId/priority`",
					"value": {"priority": 10}
				}}
			}}},
			"operationId": "setJobPriority",
			"description": "Sets the execution priority of a job by id.",
			"responses": {
				"500": {
					"description": "The priority could not be set successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."},
				"404": {
					"description": "Job with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the job to be updated.",
				"required": true
			}],
			"tags": ["Job"]
		}},
		"/batch/count": {"get": {
			"summary": "Get List Count",
			"operationId": "getBatchesCount",
			"description": "Requests the number of batches that fulfill the query criteria.\nTakes the same filtering parameters as the [Get Batches](https://docs.camunda.org/manual/7.19/reference/rest/batch/get-query/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "Status 200 response",
							"description": "Response for GET `/batch/count?type=aBatchType`",
							"value": {"count": 1}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "batchId",
					"description": "Filter by batch id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "type",
					"description": "Filter by batch type.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/batch/#creating-a-batch)\nfor more information about batch types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of `Strings`. A batch matches if it has one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include batches which belong to no tenant.\nValue can effectively only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "suspended",
					"description": "A `Boolean` value which indicates whether only active or suspended batches should be included.\nWhen the value is set to `true`, only suspended batches will be returned and\nwhen the value is set to `false`, only active batches will be returned."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "createdBy",
					"description": "Only include batches that were started by this user id."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedBefore",
					"description": "Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedAfter",
					"description": "Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withFailures",
					"description": "Only include batches having jobs with failures.\nValue can only be `true`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutFailures",
					"description": "Only include batches having jobs without failures.\nValue can only be `true`."
				}
			],
			"tags": ["Batch"]
		}},
		"/process-definition/key/{key}/xml": {"get": {
			"summary": "Get XML",
			"operationId": "getProcessDefinitionBpmn20XmlByKey",
			"description": "Retrieves latest version the BPMN 2.0 XML of a process definition.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ProcessDefinitionDiagramDto"},
						"examples": {"example-1": {
							"summary": "GET `/process-definition/key/aProcessDefinitionKey/xml`",
							"value": {
								"bpmn20Xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions\n                         xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n                         xmlns:camunda=\"http://camunda.org/schema/1.0/bpmn\"\n                         targetNamespace=\"Examples\">\n                         <process id=\"oneTaskProcess\" isExecutable=\"true\">\n                           <startEvent id=\"theStart\" />\n                           <sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"theEnd\" />\n                           <endEvent id=\"theEnd\" />\n                         <\/process>\n                       <\/definitions>",
								"id": "anProcessDefinitionId"
							}
						}}
					}}
				},
				"403": {
					"description": "The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the process definition (the latest version thereof) whose XML should be retrieved.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/history/variable-instance/{id}": {
			"get": {
				"summary": "Get Variable Instance",
				"operationId": "getHistoricVariableInstance",
				"description": "Retrieves a historic variable by id.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/HistoricVariableInstanceDto"},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "GET `/history/variable-instance/someId`",
								"value": {
									"processDefinitionId": "aProcessDefinitionId",
									"processInstanceId": "aProcessInstanceId",
									"caseExecutionId": null,
									"caseDefinitionId": null,
									"caseDefinitionKey": null,
									"caseInstanceId": null,
									"valueInfo": {},
									"errorMessage": null,
									"activityInstanceId": "Task_1:b68b71ca-e310-11e2-beb0-f0def1557726",
									"type": "Integer",
									"processDefinitionKey": "aProcessDefinitionKey",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"executionId": "aExecutionId",
									"createTime": "2017-02-10T14:33:19.000+0200",
									"name": "amount",
									"tenantId": null,
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "someId",
									"state": "CREATED",
									"value": 5,
									"taskId": null
								}
							}}
						}}
					},
					"404": {
						"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the variable instance.",
						"required": true
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically variables that\nstore custom Java objects) should be deserialized on server side (default\n`true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side\nand transformed to JSON using\n[Jackson's](https://github.com/FasterXML/jackson) POJO/bean property\nintrospection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized\nformat. For example, a variable that is serialized as XML will be returned as\na JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of backward\ncompatibility, we recommend setting this parameter to `false` when developing\nweb applications that are independent of the Java process applications\ndeployed to the engine."
					}
				],
				"tags": ["Historic Variable Instance"]
			},
			"delete": {
				"summary": "Delete Variable Instance",
				"operationId": "deleteHistoricVariableInstance",
				"description": "Deletes a historic variable instance by id.",
				"responses": {
					"204": {"description": "Request successful. This method returns no content."},
					"404": {
						"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the variable instance.",
					"required": true
				}],
				"tags": ["Historic Variable Instance"]
			}
		},
		"/job/{id}/duedate/recalculate": {"post": {
			"summary": "Recalculate Job Due Date",
			"operationId": "recalculateDuedate",
			"description": "Recalculates the due date of a job by id.",
			"responses": {
				"500": {
					"description": "The due date could not be recalculated successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."},
				"404": {
					"description": "Job with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the job to be updated.",
					"required": true
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "creationDateBased",
					"description": "Recalculate the due date based on the creation date of the job or the current date.\nValue may only be `false`, as `true` is the default behavior. "
				}
			],
			"tags": ["Job"]
		}},
		"/process-definition/{id}/history-time-to-live": {"put": {
			"summary": "Update History Time to Live",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/HistoryTimeToLiveDto"},
				"examples": {"example-1": {
					"summary": "PUT `/process-definition/aProcessDefinitionId/history-time-to-live`",
					"value": {"historyTimeToLive": 5}
				}}
			}}},
			"operationId": "updateHistoryTimeToLiveByProcessDefinitionId",
			"description": "Updates history time to live for process definition.\nThe field is used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).",
			"responses": {
				"400": {
					"description": "Returned if some of the request parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition to change history time to live.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/history/decision-definition/cleanable-decision-instance-report/count": {"get": {
			"summary": "Get Cleanable Decision Instance Report Count",
			"operationId": "getCleanableHistoricDecisionInstanceReportCount",
			"description": "Queries for the number of report results about a decision definition and finished\ndecision instances relevant to history cleanup (see\n[History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)).\nTakes the same parameters as the [Get Cleanable Decision Instance Report](https://docs.camunda.org/manual/7.19/reference/rest/history/decision-definition/get-cleanable-decision-instance-report/) \nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "request",
							"description": "GET `/history/decision-definition/cleanable-decision-instance-report/count`",
							"value": {"count": 1}
						}}
					}}
				},
				"500": {
					"description": "See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the\nerror response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionIdIn",
					"description": "Filter by decision definition ids. Must be a comma-separated list of decision definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionKeyIn",
					"description": "Filter by decision definition keys. Must be a comma-separated list of decision definition keys."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A decision definition must have one of the given tenant \nids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include decision definitions which belong to no tenant. Value may only be `true`, as `false` \nis the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "compact",
					"description": "Only include decision instances which have more than zero finished instances. Value may only be `true`, \nas `false` is the default behavior."
				}
			],
			"tags": ["Historic Decision Definition"]
		}},
		"/job-definition/count": {
			"post": {
				"summary": "Get Job Definition Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/JobDefinitionQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/job-definition/count`",
						"value": {"activityIdIn": [
							"ServiceTask1",
							"ServiceTask2"
						]}
					}}
				}}},
				"operationId": "queryJobDefinitionsCount",
				"description": "Queries for the number of job definitions that fulfill given parameters. This\nmethod takes the same message body as the\n[Get Job Definitions (POST)](https://docs.camunda.org/manual/7.19/reference/rest/job-definition/post-query/)\nmethod and therefore it is slightly more powerful than the\n[Get Job Definition Count](https://docs.camunda.org/manual/7.19/reference/rest/job-definition/get-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "POST `/job-definition/count`",
								"description": "POST `/job-definition/count`",
								"value": {"count": 2}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Job Definition"]
			},
			"get": {
				"summary": "Get Job Definition Count",
				"operationId": "getJobDefinitionsCount",
				"description": "Queries for the number of job definitions that fulfill given parameters.\nTakes the same parameters as the\n[Get Job Definitions](https://docs.camunda.org/manual/7.19/reference/rest/job-definition/get-query/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "GET `/job-definition/count?activityIdIn=ServiceTask1,ServiceTask2`",
								"description": "GET `/job-definition/count?activityIdIn=ServiceTask1,ServiceTask2`",
								"value": {"count": 2}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobDefinitionId",
						"description": "Filter by job definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityIdIn",
						"description": "Only include job definitions which belong to one of the passed and comma-separated activity ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Only include job definitions which exist for the given process definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Only include job definitions which exist for the given process definition key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobType",
						"description": "Only include job definitions which exist for the given job type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation)\nfor more information about job types."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobConfiguration",
						"description": "Only include job definitions which exist for the given job configuration. For example: for\ntimer jobs it is the timer configuration."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "active",
						"description": "Only include active job definitions. Value may only be `true`, as `false` is the default\nbehavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended job definitions. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withOverridingJobPriority",
						"description": "Only include job definitions that have an overriding job priority defined. The only\neffective value is `true`. If set to `false`, this filter is not applied."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include job definitions which belong to one of the passed and comma-separated tenant\nids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include job definitions which belong to no tenant. Value may only be `true`, as\n`false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "includeJobDefinitionsWithoutTenantId",
						"description": "Include job definitions which belong to no tenant. Can be used in combination with\n`tenantIdIn`. Value may only be `true`, as `false` is the default behavior."
					}
				],
				"tags": ["Job Definition"]
			}
		},
		"/process-definition/{id}/xml": {"get": {
			"summary": "Get XML",
			"operationId": "getProcessDefinitionBpmn20Xml",
			"description": "Retrieves the BPMN 2.0 XML of a process definition.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ProcessDefinitionDiagramDto"},
						"examples": {"example-1": {
							"summary": "GET `/process-definition/id/aProcessDefinitionId/xml`",
							"value": {
								"bpmn20Xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions\n                         xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n                         xmlns:camunda=\"http://camunda.org/schema/1.0/bpmn\"\n                         targetNamespace=\"Examples\">\n                         <process id=\"oneTaskProcess\" isExecutable=\"true\">\n                           <startEvent id=\"theStart\" />\n                           <sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"theEnd\" />\n                           <endEvent id=\"theEnd\" />\n                         <\/process>\n                       <\/definitions>",
								"id": "anProcessDefinitionId"
							}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "The Process Definition xml cannot be retrieved due to missing permissions on the Process Definition resource.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/incident/{id}": {
			"get": {
				"summary": "Get Incident",
				"operationId": "getIncident",
				"description": "Retrieves an incident by ID.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/IncidentDto"},
							"examples": {"example-1": {
								"summary": "GET `/incident/anIncidentId`",
								"value": {
									"annotation": "an annotation",
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"jobDefinitionId": "aJobDefinitionId",
									"incidentMessage": "anIncidentMessage",
									"configuration": "aConfiguration",
									"causeIncidentId": "aCauseIncidentId",
									"incidentType": "failedJob",
									"executionId": "anExecutionId",
									"activityId": "serviceTask",
									"incidentTimestamp": "2014-03-01T08:00:00.000+0200",
									"rootCauseIncidentId": "aRootCauseIncidentId",
									"tenantId": null,
									"id": "anIncidentId",
									"failedActivityId": "serviceTask"
								}
							}}
						}}
					},
					"404": {
						"description": "Returned if an incident with given id does not exist.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the incident to be retrieved.",
					"required": true
				}],
				"tags": ["Incident"]
			},
			"delete": {
				"summary": "Resolve Incident",
				"operationId": "resolveIncident",
				"description": "Resolves an incident with given id.",
				"responses": {
					"400": {
						"description": "Returned if an incident is not related to any execution or an incident is of type `failedJob` or\n`failedExternalTask`. To resolve such an incident, please refer to the\n[Incident Types](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types) section.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."},
					"404": {
						"description": "Returned if an incident with given id does not exist.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the incident to be resolved.",
					"required": true
				}],
				"tags": ["Incident"]
			}
		},
		"/history/cleanup/jobs": {"get": {
			"summary": "Find clean up history jobs (GET)",
			"operationId": "findCleanupJobs",
			"description": "Finds history cleanup jobs (See\n[History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/JobDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/history/cleanup/jobs`",
							"description": "GET `/history/cleanup/jobs`",
							"value": [
								{
									"processInstanceId": null,
									"processDefinitionId": null,
									"jobDefinitionId": null,
									"dueDate": "aDueDate",
									"priority": 0,
									"suspended": false,
									"processDefinitionKey": null,
									"executionId": null,
									"retries": 3,
									"createTime": "2018-05-05T17:00:00+0200",
									"tenantId": null,
									"id": "aJobId",
									"exceptionMessage": null
								},
								{
									"processInstanceId": null,
									"processDefinitionId": null,
									"jobDefinitionId": null,
									"dueDate": "anotherDueDate",
									"priority": 0,
									"suspended": false,
									"processDefinitionKey": null,
									"executionId": null,
									"retries": 3,
									"createTime": "2018-05-05T17:00:00+0200",
									"tenantId": null,
									"id": "anotherJobId",
									"exceptionMessage": null
								}
							]
						}}
					}}
				},
				"404": {
					"description": "History clean up jobs are empty.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["History Cleanup"]
		}},
		"/process-instance/{id}/variables": {
			"post": {
				"summary": "Update/Delete Process Variables",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/PatchVariablesDto"},
					"examples": {"example-1": {
						"summary": "POST `/process-instance/aProcessInstanceId/variables`",
						"description": "Status 204 Response: No content.",
						"value": {
							"deletions": [
								"aThirdVariable",
								"FourthVariable"
							],
							"modifications": {
								"aVariable": {
									"type": "String",
									"value": "aValue"
								},
								"anotherVariable": {
									"type": "Integer",
									"value": 42
								}
							}
						}
					}}
				}}},
				"operationId": "modifyProcessInstanceVariables",
				"description": "Updates or deletes the variables of a process instance by id. Updates precede deletions.\nSo, if a variable is updated AND deleted, the deletion overrides the update.",
				"responses": {
					"400": {
						"description": "Bad Request\nThe variable value or type is invalid, for example if the value could not be parsed to an Integer value or\nthe passed variable type is not supported.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"500": {
						"description": "Update or delete could not be executed, for example because the process instance does not exist.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the process instance to set variables for.",
					"required": true
				}],
				"tags": ["Process Instance"]
			},
			"get": {
				"summary": "Get Process Variables",
				"operationId": "getProcessInstanceVariables",
				"description": "Retrieves all variables of a given process instance by id.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
								"type": "object"
							},
							"examples": {
								"example-1": {
									"summary": "GET `/process-instance/aProcessInstanceId/variables`",
									"value": {"aVariableKey": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": {
											"prop2": "b",
											"prop1": "a"
										}
									}}
								},
								"example-2": {
									"summary": "GET `/process-instance/aProcessInstanceId/variables?deserializeValue=false`",
									"value": {"aVariableKey": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": "ab"
									}}
								}
							}
						}}
					},
					"500": {
						"description": "Process instance with given id does not exist.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the process instance to retrieve the variables from.",
						"required": true
					},
					{
						"schema": {
							"default": true,
							"type": "boolean"
						},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically variables that store custom Java objects)\nshould be deserialized on server side (default true).\n\nIf set to true, a serializable variable will be deserialized on server side and transformed to JSON\nusing [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.\nNote that this requires the Java classes of the variable value to be on the REST API's classpath.\n\nIf set to false, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string containing XML.\n\nNote: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false\nwhen developing web applications that are independent of the Java process applications deployed to the engine."
					}
				],
				"tags": ["Process Instance"]
			}
		},
		"/history/variable-instance/count": {
			"post": {
				"summary": "Get Variable Instance Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricVariableInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/variable-instance/count`",
						"value": {
							"variableName": "someVariable",
							"variableValue": 42
						}
					}}
				}}},
				"operationId": "queryHistoricVariableInstancesCount",
				"description": "Queries for historic variable instances that fulfill the given parameters.\nThis method takes the same message body as the\n[Get Variable Instances (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/variable-instance/post-variable-instance-query/)\nmethod and therefore it is more powerful regarding variable values\nthan the\n[Get Variable Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/variable-instance/get-variable-instance-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "POST `/history/variable-instance/count`",
								"description": "POST `/history/variable-instance/count`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Historic Variable Instance"]
			},
			"get": {
				"summary": "Get Variable Instance Count",
				"operationId": "getHistoricVariableInstancesCount",
				"description": "Queries for the number of historic variable instances that fulfill the given\nparameters.\nTakes the same parameters as the\n[Get Variable Instances](https://docs.camunda.org/manual/7.19/reference/rest/history/variable-instance/get-variable-instance-query/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "GET `/history/variable-instance/count?variableName=my_variable`",
								"description": "GET `/history/variable-instance/count?variableName=my_variable`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableName",
						"description": "Filter by variable name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableNameLike",
						"description": "Restrict to variables with a name like the parameter."
					},
					{
						"schema": {"type": "object"},
						"in": "query",
						"name": "variableValue",
						"description": "Filter by variable value. Is treated as a `String` object on server side."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match the variable name provided in `variableName` and `variableNameLike` case-\ninsensitively. If set to `true` **variableName** and **variablename** are\ntreated as equal."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match the variable value provided in `variableValue` case-insensitively. If set to `true`\n**variableValue** and **variablevalue** are treated as equal."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableTypeIn",
						"description": "Only include historic variable instances which belong to one of the passed and comma-\nseparated variable types. A list of all supported variable types can be found\n[here](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#supported-variable-values).\n**Note:** All non-primitive variables are associated with the type\n'serializable'."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "includeDeleted",
						"description": "Include variables that has already been deleted during the execution."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by the process instance the variable belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and comma-separated process instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the process definition the variable belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by a key of the process definition the variable belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and and comma-separated execution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Filter by the case instance the variable belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseExecutionIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseActivityIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and and comma-separated task ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and comma-\nseparated tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic variable instances that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableNameIn",
						"description": "Only include historic variable instances which belong to one of the passed and comma-separated variable names."
					}
				],
				"tags": ["Historic Variable Instance"]
			}
		},
		"/deployment/{id}/redeploy": {"post": {
			"summary": "Redeploy",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/RedeploymentDto"},
				"examples": {"example-1": {
					"summary": "POST `/deployment/anDeploymentId/redeploy`",
					"value": {
						"resourceNames": ["aResourceName"],
						"source": "cockpit",
						"resourceIds": ["aResourceId"]
					}
				}}
			}}},
			"operationId": "redeploy",
			"description": "Re-deploys an existing deployment.\n\nThe deployment resources to re-deploy can be restricted by using the properties `resourceIds` or\n`resourceNames`. If no deployment resources to re-deploy are passed then all existing resources of the\ngiven deployment are re-deployed.\n\n**Warning**: Deployments can contain custom code in form of scripts or EL expressions to customize\nprocess behavior. This may be abused for remote execution of arbitrary code. See the section on\n[security considerations for custom code](https://docs.camunda.org/manual/7.19/user-guide/process-engine/securing-custom-code/) in\nthe user guide for details.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DeploymentWithDefinitionsDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"value": {
								"deployedProcessDefinitions": {"aProcDefId": {
									"diagram": "aResourceName.png",
									"resource": "aResourceName",
									"deploymentId": "aDeploymentId",
									"name": "aName",
									"tenantId": null,
									"description": "aDescription",
									"versionTag": null,
									"id": "aProcDefId",
									"category": "aCategory",
									"version": 42,
									"key": "aKey",
									"suspended": true
								}},
								"name": "aName",
								"tenantId": null,
								"links": [{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:38080/rest-test/deployment/aDeploymentId"
								}],
								"id": "aDeploymentId",
								"source": "cockpit",
								"deployedCaseDefinitions": null,
								"deployedDecisionDefinitions": null,
								"deploymentTime": "2015-10-13T13:59:43.000+0200",
								"deployedDecisionRequirementsDefinitions": null
							}
						}}
					}}
				},
				"404": {
					"description": "Deployment or a deployment resource for the given deployment does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the deployment to re-deploy.",
				"required": true
			}],
			"tags": ["Deployment"]
		}},
		"/job-definition/{id}/jobPriority": {"put": {
			"summary": "Set Job Definition Priority by Id",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/JobDefinitionPriorityDto"},
				"examples": {"example-1": {
					"summary": "PUT `/job-definition/aJobDefId/jobPriority`",
					"value": {
						"priority": 10,
						"includeJobs": true
					}
				}}
			}}},
			"operationId": "setJobPriorityJobDefinition",
			"description": "Sets an overriding execution priority for jobs with the given definition id.\nOptionally, the priorities of all the definitions' existing jobs are\nupdated accordingly. The priority can be reset by setting it to\n`null`, meaning that a new job's priority will not be determined based\non its definition's priority any longer. See the\n[user guide on job prioritization](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#set-job-definition-priorities-via-managementservice-api)\nfor details.",
			"responses": {
				"500": {
					"description": "The retries could not be set successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."},
				"404": {
					"description": "Job definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the job definition to be updated.",
				"required": true
			}],
			"tags": ["Job Definition"]
		}},
		"/decision-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live": {"put": {
			"summary": "Update History Time to Live By Key And Tenant",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/HistoryTimeToLiveDto"},
				"examples": {"example-1": {
					"summary": "PUT `/decision-definition/key/aKey/tenant-id/aTenantId/history-time-to-live`",
					"value": {"historyTimeToLive": 5}
				}}
			}}},
			"operationId": "updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant",
			"description": "Updates the latest version of the decision definition for tenant.\nThe field is used within [History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup).",
			"responses": {
				"400": {
					"description": "Returned if some of the request parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Decision definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the decision definitions to change history time to live.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the decision definition belongs to.",
					"required": true
				}
			],
			"tags": ["Decision Definition"]
		}},
		"/variable-instance": {
			"post": {
				"summary": "Get Variable Instances (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/VariableInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/variable-instance`",
						"value": {
							"variableValues": [
								{
									"name": "amount",
									"value": 5,
									"operator": "gteq"
								},
								{
									"name": "amount",
									"value": 200,
									"operator": "lteq"
								}
							],
							"sorting": [{
								"sortOrder": "asc",
								"sortBy": "variableType"
							}],
							"processInstanceIdIn": [
								"aProcessInstanceId",
								"anotherProcessInstanceId"
							]
						}
					}}
				}}},
				"operationId": "queryVariableInstances",
				"description": "Query for variable instances that fulfill given parameters through a JSON object.\nThis method is slightly more powerful than the\n[Get Variable Instances](https://docs.camunda.org/manual/7.19/reference/rest/variable-\ninstance/get-query/) method because it allows filtering by multiple\nvariable instances of types `String`, `Number` or `Boolean`.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/VariableInstanceDto"}
							},
							"examples": {"example-1": {
								"description": "POST `/variable-instance`",
								"value": [
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "aProcessInstanceId",
										"executionId": "b68b71c9-e310-11e2-beb0-f0def1557726",
										"name": "amount",
										"errorMessage": null,
										"tenantId": null,
										"id": "someId",
										"activityInstanceId": "Task_1:b68b71ca-e310-11e2-beb0-f0def1557726",
										"type": "Integer",
										"batchId": null,
										"value": 5,
										"taskId": null
									},
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "aProcessInstanceId",
										"executionId": "68b71c9-e310-11e2-beb0-f0def1557726",
										"name": "amount",
										"errorMessage": null,
										"tenantId": null,
										"id": "someOtherId",
										"activityInstanceId": "Task_1:b68b71ca-e310-11e2-beb0-f0def1557726",
										"type": "Integer",
										"batchId": null,
										"value": 15,
										"taskId": null
									},
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "anotherProcessInstanceId",
										"executionId": "68b71c9-e310-11e2-beb0-f0def1557726",
										"name": "amount",
										"errorMessage": null,
										"tenantId": null,
										"id": "yetAnotherId",
										"activityInstanceId": "Task_2:b68b71ca-e310-11e2-beb0-f0def1557726",
										"type": "Integer",
										"batchId": null,
										"value": 150,
										"taskId": null
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`, or if an invalid operator\nfor variable comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically variables that\nstore custom Java objects) should be deserialized on server side (default\n`true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side\nand transformed to JSON using\n[Jackson's](https://github.com/FasterXML/jackson) POJO/bean property\nintrospection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized\nformat. For example, a variable that is serialized as XML will be returned as\na JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of backward\ncompatibility, we recommend setting this parameter to `false` when developing\nweb applications that are independent of the Java process applications\ndeployed to the engine."
					}
				],
				"tags": ["Variable Instance"]
			},
			"get": {
				"summary": "Get Variable Instances",
				"operationId": "getVariableInstances",
				"description": "Query for variable instances that fulfill given parameters. Parameters may be the\nproperties of variable instances, such as the name or type. The size\nof the result set can be retrieved by using the [Get Variable Instance\nCount](https://docs.camunda.org/manual/7.19/reference/rest/variable-instance/get-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/VariableInstanceDto"}
							},
							"examples": {"example-1": {
								"description": "GET `/variable-instance?processInstanceIdIn=aProcessInstanceId,anotherProcessInstanceId&variableValues=amount_gteq_5,amount_lteq_200`",
								"value": [
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "aProcessInstanceId",
										"caseExecutionId": null,
										"caseInstanceId": null,
										"errorMessage": null,
										"activityInstanceId": "Task_1:b68b71ca-e310-11e2-beb0-f0def1557726",
										"type": "Integer",
										"batchId": null,
										"executionId": "b68b71c9-e310-11e2-beb0-f0def1557726",
										"name": "amount",
										"tenantId": null,
										"id": "someId",
										"value": 5,
										"taskId": null
									},
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "aProcessInstanceId",
										"caseExecutionId": null,
										"caseInstanceId": null,
										"errorMessage": null,
										"activityInstanceId": "Task_1:b68b71ca-e310-11e2-beb0-f0def1557726",
										"type": "Integer",
										"batchId": null,
										"executionId": "68b71c9-e310-11e2-beb0-f0def1557726",
										"name": "amount",
										"tenantId": null,
										"id": "someOtherId",
										"value": 15,
										"taskId": null
									},
									{
										"processDefinitionId": "aProcessDefinitionId",
										"processInstanceId": "anotherProcessInstanceId",
										"caseExecutionId": null,
										"caseInstanceId": null,
										"errorMessage": null,
										"activityInstanceId": "Task_2:b68b71ca-e310-11e2-beb0-f0def1557726",
										"type": "Integer",
										"batchId": null,
										"executionId": "68b71c9-e310-11e2-beb0-f0def1557726",
										"name": "amount",
										"tenantId": null,
										"id": "yetAnotherId",
										"value": 150,
										"taskId": null
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`, or if an invalid operator\nfor variable comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableName",
						"description": "Filter by variable instance name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableNameLike",
						"description": "Filter by the variable instance name. The parameter can include the wildcard `%` to\nexpress like-strategy such as: starts with (`%`name), ends with (name`%`) or\ncontains (`%`name`%`)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated\nprocess instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated\nexecution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated case instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseExecutionIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated case execution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated task\nids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "batchIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated\nbatch ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated\nactivity instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include variable instances which belong to one of the passed and comma-separated\ntenant ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableValues",
						"description": "Only include variable instances that have the certain values.\nValue filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n\n**Note:** Values are always treated as `String` objects on server side.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to; `gt` -\ngreater than;\n`gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or\nequal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match all variable names provided in `variableValues` case-insensitively. If set to `true`\n**variableName** and **variablename** are treated as equal."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match all variable values provided in `variableValues` case-insensitively. If set to\n`true` **variableValue** and **variablevalue** are treated as equal."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableScopeIdIn",
						"description": "Only include variable instances which belong to one of passed scope ids."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"variableName",
								"variableType",
								"activityInstanceId",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically variables that\nstore custom Java objects) should be deserialized on server side (default\n`true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side\nand transformed to JSON using\n[Jackson's](https://github.com/FasterXML/jackson) POJO/bean property\nintrospection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized\nformat. For example, a variable that is serialized as XML will be returned as\na JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of backward\ncompatibility, we recommend setting this parameter to `false` when developing\nweb applications that are independent of the Java process applications\ndeployed to the engine."
					}
				],
				"tags": ["Variable Instance"]
			}
		},
		"/job": {
			"post": {
				"summary": "Get Jobs (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/JobQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/job`",
						"value": {
							"dueDates": [
								{
									"value": "2018-07-17T17:00:00.000+0200",
									"operator": "gt"
								},
								{
									"value": "2018-07-17T18:00:00.000+0200",
									"operator": "lt"
								}
							],
							"sorting": [
								{
									"sortOrder": "asc",
									"sortBy": "jobDueDate"
								},
								{
									"sortOrder": "asc",
									"sortBy": "jobRetries"
								}
							],
							"createTimes": [
								{
									"value": "2012-05-05T10:00:00.000+0200",
									"operator": "gt"
								},
								{
									"value": "2012-07-16T15:00:00.000+0200",
									"operator": "lt"
								}
							]
						}
					}}
				}}},
				"operationId": "queryJobs",
				"description": "Queries for jobs that fulfill given parameters. This method is slightly more\npowerful than the [Get Jobs](https://docs.camunda.org/manual/7.19/reference/rest/job/get-query/)\nmethod because it allows filtering by multiple jobs of types `String`,\n`Number` or `Boolean`.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/JobDto"}
							},
							"examples": {"example-1": {
								"description": "POST `/job`",
								"value": [
									{
										"processInstanceId": "aProcessInstanceId",
										"processDefinitionId": "aProcessDefinitionId",
										"jobDefinitionId": "aJobDefinitionId",
										"dueDate": "2018-07-17T17:05:00.000+0200",
										"priority": 10,
										"suspended": false,
										"processDefinitionKey": "aPDKey",
										"executionId": "anExecutionId",
										"retries": 0,
										"createTime": "2018-05-05T17:00:00+0200",
										"tenantId": null,
										"id": "aJobId",
										"exceptionMessage": "An exception Message",
										"failedActivityId": "anActivityId"
									},
									{
										"processInstanceId": "aProcessInstanceId",
										"processDefinitionId": "anotherPDId",
										"jobDefinitionId": "anotherJobDefinitionId",
										"dueDate": "2018-07-17T17:55:00.000+0200",
										"priority": 8,
										"suspended": true,
										"processDefinitionKey": "anotherPDKey",
										"executionId": "anotherExecutionId",
										"retries": 0,
										"createTime": "2018-05-05T17:00:00+0200",
										"tenantId": null,
										"id": "anotherJobId",
										"exceptionMessage": "Another exception Message",
										"failedActivityId": "anotherActivityId"
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`, or if an invalid operator\nfor due date comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Job"]
			},
			"get": {
				"summary": "Get Jobs",
				"operationId": "getJobs",
				"description": "Queries for jobs that fulfill given parameters.\nThe size of the result set can be retrieved by using the [Get Job\nCount](https://docs.camunda.org/manual/7.19/reference/rest/job/get-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/JobDto"}
							},
							"examples": {"example-1": {
								"description": "GET `/job/count?dueDates=gt_2012-07-17T17:00:00.000+0200,lt_2012-07-17T18:00:00.000+0200&createTimes=gt_2012-05-05T10:00:00.000+0200,lt_2012-07-16T15:00:00.000+0200`",
								"value": [
									{
										"processInstanceId": "aProcessInstanceId",
										"processDefinitionId": "aProcessDefinitionId",
										"jobDefinitionId": "aJobDefinitionId",
										"dueDate": "2018-07-17T17:05:00.000+0200",
										"priority": 10,
										"suspended": false,
										"processDefinitionKey": "aPDKey",
										"executionId": "anExecutionId",
										"retries": 0,
										"createTime": "2018-05-05T17:00:00+0200",
										"tenantId": null,
										"id": "aJobId",
										"exceptionMessage": "An exception Message",
										"failedActivityId": "anActivityId"
									},
									{
										"processInstanceId": "aProcessInstanceId",
										"processDefinitionId": "anotherPDId",
										"jobDefinitionId": "anotherJobDefinitionId",
										"dueDate": "2018-07-17T17:55:00.000+0200",
										"priority": 8,
										"suspended": true,
										"processDefinitionKey": "anotherPDKey",
										"executionId": "anotherExecutionId",
										"retries": 0,
										"createTime": "2018-05-05T17:00:00+0200",
										"tenantId": null,
										"id": "anotherJobId",
										"exceptionMessage": "Another exception Message",
										"failedActivityId": "anotherActivityId"
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`, or if an invalid operator\nfor due date comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobId",
						"description": "Filter by job id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobIds",
						"description": "Filter by a comma-separated list of job ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobDefinitionId",
						"description": "Only select jobs which exist for the given job definition."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Only select jobs which exist for the given process instance."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIds",
						"description": "Only select jobs which exist for the given comma-separated list of process instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Only select jobs which exist for the given execution."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the id of the process definition the jobs run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by the key of the process definition the jobs run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityId",
						"description": "Only select jobs which exist for an activity with the given id."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withRetriesLeft",
						"description": "Only select jobs which have retries left. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "executable",
						"description": "Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due\ndate is in the past. Value may only be `true`, as `false` is the default\nbehavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "timers",
						"description": "Only select jobs that are timers. Cannot be used together with `messages`. Value may only\nbe `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "messages",
						"description": "Only select jobs that are messages. Cannot be used together with `timers`. Value may only\nbe `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "dueDates",
						"description": "Only select jobs where the due date is lower or higher than the given date.\nDue date expressions are comma-separated and are structured as follows:\n\nA valid condition value has the form `operator_value`.\n`operator` is the comparison operator to be used and `value` the date value\nas string.\n\nValid operator values are: `gt` - greater than; `lt` - lower than.\n`value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "createTimes",
						"description": "Only select jobs created before or after the given date.\n\nCreate time expressions are comma-separated and are structured as\nfollows:\n\nA valid condition value has the form `operator_value`.\n`operator` is the comparison operator to be used and `value` the date value\nas string.\n\nValid operator values are: `gt` - greater than; `lt` - lower than.\n`value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withException",
						"description": "Only select jobs that failed due to an exception. Value may only be `true`, as `false` is\nthe default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "exceptionMessage",
						"description": "Only select jobs that failed due to an exception with the given message."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "failedActivityId",
						"description": "Only select jobs that failed due to an exception at an activity with the given id."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "noRetriesLeft",
						"description": "Only select jobs which have no retries left. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "active",
						"description": "Only include active jobs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended jobs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityLowerThanOrEquals",
						"description": "Only include jobs with a priority lower than or equal to the given value. Value must be a\nvalid `long` value."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityHigherThanOrEquals",
						"description": "Only include jobs with a priority higher than or equal to the given value. Value must be a\nvalid `long` value."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include jobs which belong to one of the passed comma-separated tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "includeJobsWithoutTenantId",
						"description": "Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`.\nValue may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"jobId",
								"executionId",
								"processInstanceId",
								"processDefinitionId",
								"processDefinitionKey",
								"jobPriority",
								"jobRetries",
								"jobDueDate",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Job"]
			}
		},
		"/migration/execute": {"post": {
			"summary": "Execute Migration Plan",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/MigrationExecutionDto"},
				"examples": {"example-1": {
					"summary": "POST `/migration/execute`",
					"value": {
						"processInstanceQuery": {"processDefinitionId": "aProcessDefinitionId1"},
						"migrationPlan": {
							"targetProcessDefinitionId": "aProcessDefinitionId2",
							"instructions": [
								{
									"targetActivityIds": ["aUserTask"],
									"sourceActivityIds": ["aUserTask"]
								},
								{
									"targetActivityIds": ["anotherEvent"],
									"sourceActivityIds": ["anEvent"],
									"updateEventTrigger": true
								}
							],
							"variables": {"foo": {
								"valueInfo": {
									"objectTypeName": "java.util.ArrayList",
									"serializationDataFormat": "application/json"
								},
								"type": "Object",
								"value": "[5,9]"
							}},
							"sourceProcessDefinitionId": "aProcessDefinitionId1"
						},
						"processInstanceIds": [
							"aProcessInstance",
							"anotherProcessInstance"
						],
						"skipCustomListeners": true
					}
				}}
			}}},
			"operationId": "executeMigrationPlan",
			"description": "Executes a migration plan synchronously for multiple process instances. To execute\na migration plan asynchronously, use the\n[Execute Migration Plan Async(Batch)](https://docs.camunda.org/manual/7.19/reference/rest/migration/execute-migration-async/)\nmethod.\n\nFor more information about the difference between synchronous and asynchronous\nexecution of a migration plan, please refer to the related section of\n[the user guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-instance-migration/#executing-a-migration-plan).",
			"responses": {
				"400": {
					"description": "The request is not valid if one or more of the following statements apply:\n\n* The provided migration plan is not valid, so an exception of type\n`MigrationPlanValidationException` is returned.\n* The provided migration plan is not valid for a specific process\ninstance it is applied to, so an exception of type\n`MigratingProcessInstanceValidationException` is returned.\n* In case additional parameters of the request are unexpected, an\nexception of type `InvalidRequestException` is returned.\n\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."}
			},
			"tags": ["Migration"]
		}},
		"/task/report/candidate-group-count": {"get": {
			"summary": "Get Task Count By Candidate Group",
			"operationId": "getTaskCountByCandidateGroup",
			"description": "Retrieves the number of tasks for each candidate group.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {
						"application/csv": {"schema": {}},
						"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/TaskCountByCandidateGroupResultDto"}
							},
							"examples": {"example-1": {"value": [
								{
									"taskCount": 1,
									"groupName": null
								},
								{
									"taskCount": 2,
									"groupName": "aGroupName"
								},
								{
									"taskCount": 3,
									"groupName": "anotherGroupName"
								}
							]}}
						},
						"text/csv": {"schema": {}}
					}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid or mandatory parameters are not supplied. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "If the authenticated user is unauthorized to read the history. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Task"]
		}},
		"/execution/{id}/localVariables": {
			"post": {
				"summary": "Update/Delete Local Execution Variables",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/PatchVariablesDto"},
					"examples": {"example-1": {
						"summary": "POST `/execution/anExecutionId/localVariables`",
						"value": {
							"deletions": [
								"aThirdVariable",
								"FourthVariable"
							],
							"modifications": {
								"aVariable": {
									"type": "String",
									"value": "aValue"
								},
								"anotherVariable": {
									"type": "Integer",
									"value": 42
								}
							}
						}
					}}
				}}},
				"operationId": "modifyLocalExecutionVariables",
				"description": "Updates or deletes the variables in the context of an execution by id. The updates\ndo not propagate upwards in the execution hierarchy.\nUpdates precede deletions. So, if a variable is updated AND deleted,\nthe deletion overrides the update.",
				"responses": {
					"400": {
						"description": "The variable value or type is invalid, for example if the value could not be parsed\nto an Integer value or the passed variable type is not supported.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"500": {
						"description": "Update or delete could not be executed, for example because the execution does not\nexist.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the execution to set variables for.",
					"required": true
				}],
				"tags": ["Execution"]
			},
			"get": {
				"summary": "Get Local Execution Variables",
				"operationId": "getLocalExecutionVariables",
				"description": "Retrieves all variables of a given execution by id.",
				"responses": {
					"200": {
						"description": "Request successful. Returns A JSON object of variables key-value pairs. Each key is a variable name and each value a VariableValueDto",
						"content": {"application/json": {
							"schema": {
								"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
								"type": "object"
							},
							"examples": {
								"example-1": {
									"summary": "GET `/execution/anExecutionId/localVariables`",
									"description": "GET `/execution/anExecutionId/localVariables`",
									"value": {"aVariableKey": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": {
											"prop2": "b",
											"prop1": "a"
										}
									}}
								},
								"example-2": {
									"summary": "GET `/execution/anExecutionId/localVariables?deserializeValues=false`",
									"description": "GET `/execution/anExecutionId/localVariables?deserializeValues=false`",
									"value": {"aVariableKey": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": "<myObj><prop1>a<\/prop1><prop2>b<\/prop2><\/myObj>"
									}}
								}
							}
						}}
					},
					"500": {
						"description": "Execution with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the execution to retrieve the variables from.",
						"required": true
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically\nvariables that store custom Java objects) should be deserialized\non server side (default `true`).\n\nIf set to `true`, a serializable variable will be deserialized on\nserver side and transformed to JSON using\n[Jackson's](https://github.com/FasterXML/jackson) POJO/bean\nproperty introspection feature. Note that this requires the Java\nclasses of the variable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its\nserialized format. For example, a variable that is serialized as\nXML will be returned as a JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of\nbackward compatibility, we recommend setting this parameter to\n`false` when developing web applications that are independent of\nthe Java process applications deployed to the engine."
					}
				],
				"tags": ["Execution"]
			}
		},
		"/process-definition/key/{key}/tenant-id/{tenant-id}": {
			"get": {
				"summary": "Get",
				"operationId": "getLatestProcessDefinitionByTenantId",
				"description": "Retrieves the latest version of the process definition for tenant according to\nthe `ProcessDefinition` interface in the engine.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/ProcessDefinitionDto"},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response of GET `/process-definition/key/invoice/tenant-id/tenantOne`",
								"value": {
									"resource": "invoice.v1.bpmn",
									"startableInTasklist": true,
									"description": null,
									"historyTimeToLive": 5,
									"versionTag": null,
									"version": 1,
									"suspended": false,
									"diagram": null,
									"deploymentId": "c398cd26-2046-11e7-8f94-34f39ab71d4e",
									"name": "Invoice Receipt",
									"tenantId": "tenantOne",
									"id": "invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e",
									"category": "http://www.omg.org/spec/BPMN/20100524/MODEL",
									"key": "invoice"
								}
							}}
						}}
					},
					"400": {
						"description": "Process definition with given `key` does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "key",
						"description": "The key of the process definition (the latest version thereof) to be retrieved.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "tenant-id",
						"description": "The id of the tenant the process definition belongs to.",
						"required": true
					}
				],
				"tags": ["Process Definition"]
			},
			"delete": {
				"summary": "Delete By Key",
				"operationId": "deleteProcessDefinitionsByKeyAndTenantId",
				"description": "Deletes process definitions by a given key and which belong to a tenant id.",
				"responses": {
					"204": {"description": "Request successful."},
					"403": {
						"description": "Forbidden\nThe process definitions with the given `key` cannot be deleted due to missing permissions.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
					},
					"404": {
						"description": "Not found\nProcess definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "key",
						"description": "The key of the process definitions to be deleted.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "tenant-id",
						"description": "The id of the tenant the process definitions belong to.",
						"required": true
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "cascade",
						"description": "`true`, if all process instances, historic process instances and jobs\nfor this process definition should be deleted."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipCustomListeners",
						"description": "`true`, if only the built-in ExecutionListeners should be notified with the end event."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipIoMappings",
						"description": "A boolean value to control whether input/output mappings should be executed during deletion.\n`true`, if input/output mappings should not be invoked."
					}
				],
				"tags": ["Process Definition"]
			}
		},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/submit-form": {"post": {
			"summary": "Submit Start Form",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/StartProcessInstanceFormDto"},
				"examples": {"example-1": {
					"summary": "POST `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/submit-form`",
					"value": {
						"variables": {
							"aVariable": {
								"type": "String",
								"value": "aStringValue"
							},
							"anotherVariable": {
								"type": "Boolean",
								"value": true
							}
						},
						"businessKey": "myBusinessKey"
					}
				}}
			}}},
			"operationId": "submitFormByKeyAndTenantId",
			"description": "Starts the latest version of the process definition for a tenant\nusing a set of process variables and the business key.\nIf the start event has Form Field Metadata defined, the process engine will perform backend validation\nfor any form fields which have validators defined.\nSee [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ProcessInstanceDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response 1",
							"description": "POST `/process-definition/key/aProcessDefinitionKey/tenant-id/aTenantId/submit-form`",
							"value": {
								"caseInstanceId": null,
								"businessKey": "myBusinessKey",
								"tenantId": null,
								"ended": false,
								"links": [{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:8080/rest-test/process-instance/anId"
								}],
								"id": "anId",
								"suspended": false,
								"definitionId": "aProcessDefinitionId"
							}
						}}
					}}
				},
				"400": {
					"description": "The instance could not be created due to an invalid variable value,\nfor example if the value could not be parsed to an `Integer` value or\nthe passed variable type is not supported.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The instance could not be created successfully.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given key does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition to submit the form for.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definition belongs to.",
					"required": true
				}
			],
			"tags": ["Process Definition"]
		}},
		"/process-instance/{id}/modification": {"post": {
			"summary": "Modify Process Instance Execution State",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ProcessInstanceModificationDto"},
				"examples": {"example-1": {
					"summary": "POST `/process-instance/aProcessInstanceId/modification`",
					"value": {
						"annotation": "Modified to resolve an error.",
						"instructions": [
							{
								"activityId": "activityId",
								"variables": {
									"var": {
										"type": "String",
										"value": "aVariableValue",
										"local": false
									},
									"varLocal": {
										"type": "String",
										"value": "anotherVariableValue",
										"local": true
									}
								},
								"type": "startBeforeActivity"
							},
							{
								"activityInstanceId": "anActivityInstanceId",
								"type": "cancel"
							}
						],
						"skipIoMappings": true,
						"skipCustomListeners": true
					}
				}}
			}}},
			"operationId": "modifyProcessInstance",
			"description": "Submits a list of modification instructions to change a process instance's execution state.\nA modification instruction is one of the following:\n\n* Starting execution before an activity\n* Starting execution after an activity on its single outgoing sequence flow\n* Starting execution on a specific sequence flow\n* Canceling an activity instance, transition instance, or all instances (activity or transition) for an activity\n\nInstructions are executed immediately and in the order they are provided in this request's body.\nVariables can be provided with every starting instruction.\n\nThe exact semantics of modification can be read about in the [User guide](https://docs.camunda.org/manual/develop/user-guide/process-engine/process-instance-modification/).",
			"responses": {
				"400": {
					"description": "At least one modification instruction misses required parameters.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The modification cannot be performed, for example because it starts a failing activity.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process instance to modify.",
				"required": true
			}],
			"tags": ["Process Instance"]
		}},
		"/job/retries": {"post": {
			"summary": "Set Job Retries Async (POST)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SetJobRetriesDto"},
				"examples": {"example-1": {
					"summary": "POST `/job/retries`",
					"value": {
						"jobIds": [
							"aJob",
							"secondJob"
						],
						"retries": 5,
						"dueDate": "2017-04-06T13:57:45.000+0200",
						"jobQuery": {"dueDates": [
							{
								"value": "2012-07-17T17:00:00.000+0200",
								"operator": "gt"
							},
							{
								"value": "2012-07-17T18:00:00.000+0200",
								"operator": "lt"
							}
						]}
					}
				}}
			}}},
			"operationId": "setJobRetriesAsyncOperation",
			"description": "Create a batch to set retries of jobs asynchronously.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 OK",
							"description": "POST `/job/retries`",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"suspened": false,
								"createUserId": "userId",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"jobsCreated": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId"
							}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if neither\nprocessInstanceIds nor processInstanceQuery is present. Or if the\nretry count is not specified. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Job"]
		}},
		"/deployment/create": {"post": {
			"summary": "Create",
			"requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/MultiFormDeploymentDto"}}}},
			"operationId": "createDeployment",
			"description": "Creates a deployment.\n\n**Security Consideration**\n\nDeployments can contain custom code in form of scripts or EL expressions to customize process behavior.\nThis may be abused for remote execution of arbitrary code.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DeploymentWithDefinitionsDto"},
						"examples": {"example-1": {
							"summary": "POST `/deployment/create`",
							"value": {
								"deployedProcessDefinitions": {"aProcDefId": {
									"diagram": "aResourceName.png",
									"resource": "aResourceName",
									"deploymentId": "aDeploymentId",
									"name": "aName",
									"tenantId": null,
									"description": "aDescription",
									"versionTag": null,
									"id": "aProcDefId",
									"category": "aCategory",
									"version": 42,
									"key": "aKey",
									"suspended": true
								}},
								"name": "aName",
								"tenantId": null,
								"links": [{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:38080/rest-test/deployment/aDeploymentId"
								}],
								"id": "aDeploymentId",
								"source": "process application",
								"deployedCaseDefinitions": null,
								"deployedDecisionDefinitions": null,
								"deploymentTime": "2013-01-23T13:59:43.000+0200",
								"deployedDecisionRequirementsDefinitions": null
							}
						}}
					}}
				},
				"400": {
					"description": "Bad Request. In case one of the bpmn resources cannot be parsed.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#parse-exceptions) for\nthe error response format.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ParseExceptionDto"},
						"examples": {"example-1": {
							"summary": "GET /deployment?name=deploymentName",
							"value": {
								"details": {"invoice.bpmn": {
									"warnings": [{
										"mainBpmnElementId": "BoundaryEvent_1",
										"line": 87,
										"column": 20,
										"message": "It is not recommended to use a cancelling boundary timer event with a time cycle.",
										"bpmnElementIds": ["BoundaryEvent_1"]
									}],
									"errors": [{
										"mainBpmnElementId": "ExclusiveGateway_1",
										"line": 77,
										"column": 15,
										"message": "Exclusive Gateway 'ExclusiveGateway_1' has outgoing sequence flow 'SequenceFlow_0' without condition which is not the default flow.",
										"bpmnElementIds": [
											"ExclusiveGateway_1",
											"SequenceFlow_0"
										]
									}]
								}},
								"type": "ParseException",
								"message": "ENGINE-09005 Could not parse BPMN process. Errors: Exclusive Gateway 'ExclusiveGateway_1' has outgoing sequence flow 'SequenceFlow_0' without condition which is not the default flow."
							}
						}}
					}}
				}
			},
			"tags": ["Deployment"]
		}},
		"/decision-requirements-definition/key/{key}/xml": {"get": {
			"summary": "Get DMN XML by Key",
			"operationId": "getDecisionRequirementsDefinitionDmnXmlByKey",
			"description": "Retrieves the DMN XML of a decision requirements definition.\nReturns the XML for the latest version of the decision requirements \ndefinition which belongs to no tenant.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionRequirementsDefinitionXmlDto"},
						"examples": {"example-1": {
							"summary": "GET `/decision-requirements-definition/key/invoiceKey/xml`",
							"description": "GET `/decision-requirements-definition/key/invoiceKey/xml`",
							"value": {
								"dmnXml": "<?xml version=\"1.1\" encoding=\"UTF-8\"?>...<definitions id=\"dish\" name=\"Dish\" namespace=\"test-drg\" ... />",
								"id": "invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c"
							}
						}}
					}}
				},
				"404": {
					"description": "\nDecision requirements definition with given id or key does not\nexist.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the decision requirements definition (the latest version thereof) to be\nretrieved.",
				"required": true
			}],
			"tags": ["Decision Requirements Definition"]
		}},
		"/history/external-task-log": {
			"post": {
				"summary": "Get External Task Logs (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricExternalTaskLogQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/external-task-log`",
						"value": {"externalTaskId": "anExternalTaskId"}
					}}
				}}},
				"operationId": "queryHistoricExternalTaskLogs",
				"description": "Queries for historic external task logs that fulfill the given parameters.\nThis method is slightly more powerful than the\n[Get External Task Logs](https://docs.camunda.org/manual/7.19/reference/rest/history/external-task-log/get-external-task-log-query/)\nmethod because it allows filtering by historic external task logs\nvalues of the different types `String`, `Number` or `Boolean`.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricExternalTaskLogDto"}
							},
							"examples": {"example-1": {
								"summary": "POST `/history/external-task-log`",
								"description": "POST `/history/external-task-log`",
								"value": [{
									"processInstanceId": "aProcessInstanceId",
									"processDefinitionId": "aProcessDefinitionId",
									"workerId": "aWorkerId",
									"deletionLog": false,
									"creationLog": false,
									"successLog": false,
									"errorMessage": "An error occured!",
									"activityInstanceId": "externalServiceTask:15",
									"priority": 5,
									"processDefinitionKey": "aProcessDefinitionKey",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"failureLog": true,
									"retries": 3,
									"activityId": "externalServiceTask",
									"executionId": "anExecutionId",
									"tenantId": null,
									"topicName": "aTopicName",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "someId",
									"externalTaskId": "anExternalTaskId",
									"timestamp": "2017-01-15T15:22:20.000+0200"
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Historic External Task Log"]
			},
			"get": {
				"summary": "Get External Task Logs",
				"operationId": "getHistoricExternalTaskLogs",
				"description": "Queries for historic external task logs that fulfill the given parameters.\nThe size of the result set can be retrieved by using the\n[Get External Task Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/external-task-log/get-external-task-log-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricExternalTaskLogDto"}
							},
							"examples": {"example-1": {
								"summary": "GET `/history/external-task-log?externalTaskId=anExternalTaskId`",
								"description": "GET `/history/external-task-log?externalTaskId=anExternalTaskId`",
								"value": [{
									"processInstanceId": "aProcessInstanceId",
									"processDefinitionId": "aProcessDefinitionId",
									"workerId": "aWorkerId",
									"deletionLog": false,
									"creationLog": false,
									"successLog": false,
									"errorMessage": "An error occured!",
									"activityInstanceId": "externalServiceTask:15",
									"priority": 5,
									"processDefinitionKey": "aProcessDefinitionKey",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"failureLog": true,
									"retries": 3,
									"activityId": "externalServiceTask",
									"executionId": "anExecutionId",
									"tenantId": null,
									"topicName": "aTopicName",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "someId",
									"externalTaskId": "anExternalTaskId",
									"timestamp": "2017-01-15T15:22:20.000+0200"
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "logId",
						"description": "Filter by historic external task log id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "externalTaskId",
						"description": "Filter by external task id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "topicName",
						"description": "Filter by an external task topic."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "workerId",
						"description": "Filter by the id of the worker that the task was most recently locked by."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "errorMessage",
						"description": "Filter by external task exception message."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityIdIn",
						"description": "Only include historic external task logs which belong to one of the passed activity ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceIdIn",
						"description": "Only include historic external task logs which belong to one of the passed activity\ninstance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionIdIn",
						"description": "Only include historic external task logs which belong to one of the passed execution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by process definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by process definition key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include historic external task log entries which belong to one of the passed and\ncomma-separated tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic external task log entries that belong to no tenant. Value may only\nbe `true`, as `false` is the default behavior."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityLowerThanOrEquals",
						"description": "Only include logs for which the associated external task had a priority lower than or\nequal to the given value. Value must be a valid `long` value."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "priorityHigherThanOrEquals",
						"description": "Only include logs for which the associated external task had a priority higher than or\nequal to the given value. Value must be a valid `long` value."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "creationLog",
						"description": "Only include creation logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "failureLog",
						"description": "Only include failure logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "successLog",
						"description": "Only include success logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deletionLog",
						"description": "Only include deletion logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"timestamp",
								"externalTaskId",
								"topicName",
								"workerId",
								"retries",
								"priority",
								"activityId",
								"activityInstanceId",
								"executionId",
								"processInstanceId",
								"processDefinitionId",
								"processDefinitionKey",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Historic External Task Log"]
			}
		},
		"/process-instance/count": {
			"post": {
				"summary": "Get List Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ProcessInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/process-instance/count` Request Body 1",
						"value": {
							"processDefinitionId": "aProcessDefinitionId",
							"variables": [
								{
									"name": "myVariable",
									"value": "camunda",
									"operator": "eq"
								},
								{
									"name": "mySecondVariable",
									"value": 124,
									"operator": "neq"
								}
							]
						}
					}}
				}}},
				"operationId": "queryProcessInstancesCount",
				"description": "Queries for the number of process instances that fulfill the given parameters.\nThis method takes the same message body as the Get Instances (POST) method and\ntherefore it is slightly more powerful than the Get Instance Count method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200 Response 1",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid, for example if an invalid operator for variable comparison is used.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Process Instance"]
			},
			"get": {
				"summary": "Get List Count",
				"operationId": "getProcessInstancesCount",
				"description": "Queries for the number of process instances that fulfill given parameters.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response for GET `/process-instance/count?variables=myVariable_eq_camunda`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid, for example an invalid operator for variable comparison is used.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIds",
						"description": "Filter by a comma-separated list of process instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "businessKey",
						"description": "Filter by process instance business key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "businessKeyLike",
						"description": "Filter by process instance business key that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Filter by case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the deployment the id belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by the key of the process definition the instances run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKeyIn",
						"description": "Filter by a comma-separated list of process definition keys.\nA process instance must have one of the given process definition keys."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKeyNotIn",
						"description": "Exclude instances by a comma-separated list of process definition keys.\nA process instance must not have one of the given process definition keys."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "deploymentId",
						"description": "Filter by the deployment the id belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "superProcessInstance",
						"description": "Restrict query to all process instances that are sub process instances of the given process instance.\nTakes a process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "subProcessInstance",
						"description": "Restrict query to all process instances that have the given process instance as a sub process instance.\nTakes a process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "superCaseInstance",
						"description": "Restrict query to all process instances that are sub process instances of the given case instance.\nTakes a case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "subCaseInstance",
						"description": "Restrict query to all process instances that have the given case instance as a sub case instance.\nTakes a case instance id."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "active",
						"description": "Only include active process instances. Value may only be true,\nas false is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended process instances. Value may only be true,\nas false is the default behavior."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withIncident",
						"description": "Filter by presence of incidents. Selects only process instances that have an incident."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentId",
						"description": "Filter by the incident id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentType",
						"description": "Filter by the incident type.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types)\nfor a list of incident types."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessage",
						"description": "Filter by the incident message. Exact match."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessageLike",
						"description": "Filter by the incident message that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include process instances which belong to no tenant."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "processDefinitionWithoutTenantId",
						"description": "Only include process instances which process definition has no tenant id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityIdIn",
						"description": "Filter by a comma-separated list of activity ids.\nA process instance must currently wait in a leaf activity with one of the given activity ids."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "rootProcessInstances",
						"description": "Restrict the query to all process instances that are top level process instances."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "leafProcessInstances",
						"description": "Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variables",
						"description": "Only include process instances that have variables with certain values.\nVariable filtering expressions are comma-separated and are structured as follows:\n\nA valid parameter value has the form `key_operator_value`. `key` is the variable name,\n`operator` is the comparison operator to be used and `value` the variable value.\n\n**Note**: Values are always treated as String objects on server side.\n\nValid `operator` values are:\n`eq` - equal to;\n`neq` - not equal to;\n`gt` - greater than;\n`gteq` - greater than or equal to;\n`lt` - lower than;\n`lteq` - lower than or equal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match all variable names in this query case-insensitively.\nIf set to true variableName and variablename are treated as equal."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match all variable values in this query case-insensitively.\nIf set to true variableValue and variablevalue are treated as equal."
					}
				],
				"tags": ["Process Instance"]
			}
		},
		"/tenant/create": {"post": {
			"summary": "Create Tenant",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/TenantDto"},
				"examples": {"example-1": {
					"summary": "POST `/tenant/create`",
					"value": {
						"name": "Tenant One",
						"id": "tenantOne"
					}
				}}
			}}},
			"operationId": "createTenant",
			"description": "Create a new tenant.",
			"responses": {
				"500": {
					"description": "The tenant could not be created due to an internal server error. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."},
				"403": {
					"description": "Identity service is read-only.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Tenant"]
		}},
		"/process-definition/{id}/diagram": {"get": {
			"summary": "Get Diagram",
			"operationId": "getProcessDefinitionDiagram",
			"description": "Retrieves the diagram of a process definition.\n\nIf the process definition's deployment contains an image resource with the same file name\nas the process definition, the deployed image will be returned by the Get Diagram endpoint.\nExample: `someProcess.bpmn` and `someProcess.png`.\nSupported file extentions for the image are: `svg`, `png`, `jpg`, and `gif`.",
			"responses": {
				"200": {
					"description": "Request successful. The image diagram of this process.",
					"content": {
						"application/octet-stream": {"schema": {
							"format": "binary",
							"description": "defaults to `application/octet-stream` if the file suffix is unknown",
							"type": "string"
						}},
						"*/*": {"schema": {
							"format": "binary",
							"description": "Files with MIME type information image/png, image/gif, ... ",
							"type": "string"
						}}
					}
				},
				"204": {"description": "The process definition doesn't have an associated diagram."},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/execution/{id}/signal": {"post": {
			"summary": "Trigger Execution",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ExecutionTriggerDto"},
				"examples": {"example-1": {
					"summary": "POST `/execution/{id}/signal`",
					"value": {"variables": {
						"myVariable": {
							"type": "String",
							"value": "camunda"
						},
						"mySecondVariable": {
							"type": "Integer",
							"value": 124
						}
					}}
				}}
			}}},
			"operationId": "signalExecution",
			"description": "Signals an execution by id. Can for example be used to explicitly skip user tasks\nor signal asynchronous continuations.",
			"responses": {
				"400": {
					"description": "The variable value or type is invalid, for example if the value could not be parsed\nto an Integer value or the passed variable type is not supported.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the execution to signal.",
				"required": true
			}],
			"tags": ["Execution"]
		}},
		"/history/decision-instance": {"get": {
			"summary": "Get Historic Decision Instances",
			"operationId": "getHistoricDecisionInstances",
			"description": "Queries for historic decision instances that fulfill the given parameters. \nThe size of the result set can be retrieved by using the \n[Get Historic Decision Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/decision-instance/get-decision-instance-query-count/) \nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/HistoricDecisionInstanceDto"}
						},
						"examples": {"example-1": {
							"summary": "request including inputs and outputs",
							"description": "GET `/history/decision-instance?includeInputs=true&includeOutputs=true`",
							"value": [{
								"outputs": [{
									"variableName": "result",
									"decisionInstanceId": "67ea2c3f-579d-11e5-9848-f0def1e59da8",
									"errorMessage": null,
									"valueInfo": {},
									"clauseId": "clause3",
									"type": "String",
									"removalTime": null,
									"createTime": "2015-09-10T11:22:06.000+0200",
									"clauseName": "Approver Group",
									"ruleOrder": 1,
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "67ea2c42-579d-11e5-9848-f0def1e59da8",
									"ruleId": "DecisionRule_1of5a87",
									"value": "accounting"
								}],
								"processDefinitionId": "invoice:1:4c6e3197-579d-11e5-9848-f0def1e59da8",
								"processInstanceId": "67e98fec-579d-11e5-9848-f0def1e59da8",
								"rootDecisionInstanceId": null,
								"caseDefinitionId": null,
								"inputs": [
									{
										"decisionInstanceId": "67ea2c3f-579d-11e5-9848-f0def1e59da8",
										"createTime": "2015-09-10T11:22:06.000+0200",
										"clauseName": "Invoice Amount",
										"errorMessage": null,
										"valueInfo": {},
										"rootProcessInstanceId": "aRootProcessInstanceId",
										"clauseId": "clause1",
										"id": "67ea2c41-579d-11e5-9848-f0def1e59da8",
										"type": "Double",
										"value": 123,
										"removalTime": null
									},
									{
										"decisionInstanceId": "67ea2c3f-579d-11e5-9848-f0def1e59da8",
										"createTime": "2015-09-10T11:22:06.000+0200",
										"clauseName": "Invoice Category",
										"errorMessage": null,
										"valueInfo": {},
										"rootProcessInstanceId": "aRootProcessInstanceId",
										"clauseId": "clause2",
										"id": "67ea2c40-579d-11e5-9848-f0def1e59da8",
										"type": "String",
										"value": "Misc",
										"removalTime": null
									}
								],
								"caseDefinitionKey": null,
								"caseInstanceId": null,
								"decisionDefinitionKey": "invoice-assign-approver",
								"activityInstanceId": "assignApprover:67e9de1e-579d-11e5-9848-f0def1e59da8",
								"evaluationTime": "2015-09-10T11:22:06.000+0200",
								"userId": null,
								"removalTime": null,
								"processDefinitionKey": "invoice",
								"activityId": "assignApprover",
								"decisionDefinitionId": "invoice-assign-approver:1:4c864d79-579d-11e5-9848-f0def1e59da8",
								"decisionRequirementsDefinitionId": null,
								"decisionDefinitionName": "Assign Approver",
								"tenantId": null,
								"rootProcessInstanceId": "f8259e5d-ab9d-11e8-8449-e4a7a094a9d6",
								"id": "67ea2c3f-579d-11e5-9848-f0def1e59da8",
								"collectResultValue": null,
								"decisionRequirementsDefinitionKey": null
							}]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionInstanceId",
					"description": "Filter by decision instance id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionInstanceIdIn",
					"description": "Filter by decision instance ids. Must be a comma-separated list of decision instance ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionId",
					"description": "Filter by the decision definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionIdIn",
					"description": "Filter by the decision definitions the instances belongs to. Must be a\ncomma-separated list of decision definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionKey",
					"description": "Filter by the key of the decision definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionKeyIn",
					"description": "Filter by the keys of the decision definition the instances belongs to. Must be a comma-\nseparated list of decision definition keys."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionName",
					"description": "Filter by the name of the decision definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionDefinitionNameLike",
					"description": "Filter by the name of the decision definition the instances belongs to, that the parameter\nis a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Filter by the process definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKey",
					"description": "Filter by the key of the process definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Filter by the process instance the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseDefinitionId",
					"description": "Filter by the case definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseDefinitionKey",
					"description": "Filter by the key of the case definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseInstanceId",
					"description": "Filter by the case instance the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityIdIn",
					"description": "Filter by the activity ids the instances belongs to.\nMust be a comma-separated list of acitvity ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityInstanceIdIn",
					"description": "Filter by the activity instance ids the instances belongs to.\nMust be a comma-separated list of acitvity instance ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A historic decision instance must have one\nof the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include historic decision instances that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "evaluatedBefore",
					"description": "Restrict to instances that were evaluated before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-\ndd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "evaluatedAfter",
					"description": "Restrict to instances that were evaluated after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-\ndd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "userId",
					"description": "Restrict to instances that were evaluated by the given user."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "rootDecisionInstanceId",
					"description": "Restrict to instances that have a given root decision instance id.\nThis also includes the decision instance with the given id."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "rootDecisionInstancesOnly",
					"description": "Restrict to instances those are the root decision instance of an evaluation.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionId",
					"description": "Filter by the decision requirements definition the instances belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionKey",
					"description": "Filter by the key of the decision requirements definition the instances belongs to."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeInputs",
					"description": "Include input values in the result.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeOutputs",
					"description": "Include output values in the result.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "disableBinaryFetching",
					"description": "Disables fetching of byte array input and output values.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "disableCustomObjectDeserialization",
					"description": "Disables deserialization of input and output values that are custom objects.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"evaluationTime",
							"tenantId"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Historic Decision Instance"]
		}},
		"/process-instance/{id}/variables/{varName}/data": {
			"post": {
				"summary": "Update Process Variable (Binary)",
				"requestBody": {
					"description": "For binary variables a multipart form submit with the following parts:",
					"content": {"multipart/form-data": {
						"schema": {"$ref": "#/components/schemas/MultiFormVariableBinaryDto"},
						"examples": {
							"example-3": {
								"summary": "POST `/process-instance/aProcessInstanceId/variables/aVarName/data` (3)",
								"description": "Post a text file.",
								"value": "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"data\"; filename=\"myFile.txt\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: binary\n\n                        <<Byte Stream ommitted>>\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        File\n                        ------------------------------1e838f8f632a--\n                        ```\n                      "
							},
							"example-1": {
								"summary": "POST `/process-instance/aProcessInstanceId/variables/aVarName/data` (1)",
								"description": "Post binary content of a byte array variable.",
								"value": "\n                        ```\n                        ------------------------------354ddb6baeff\n                        Content-Disposition: form-data; name=\"data\"; filename=\"image.png\"\n                        Content-Type: application/octet-stream\n                        Content-Transfer-Encoding: binary\n\n                        <<Byte Stream ommitted>>\n                        ------------------------------354ddb6baeff\n                        Content-Disposition: form-data; name=\"valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        Bytes\n                        ------------------------------1e838f8f632a--\n                        ```\n                      "
							},
							"example-2": {
								"summary": "POST `/process-instance/aProcessInstanceId/variables/aVarName/data` (2)",
								"description": "Post the JSON serialization of a Java Class (**deprecated**).",
								"value": "\n                        ```\n                        ------------------------------1e838f8f632a\n                        Content-Disposition: form-data; name=\"type\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        java.util.ArrayList<java.lang.Object>\n                        ------------------------------1e838f8f632a\n                        Content-Disposition: form-data; name=\"data\"\n                        Content-Type: application/json; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        [\"foo\",\"bar\"]\n                        ------------------------------1e838f8f632a--\n                        ```\n                      "
							}
						}
					}}
				},
				"operationId": "setProcessInstanceVariableBinary",
				"description": "Sets the serialized value for a binary variable or the binary value for a file variable.",
				"responses": {
					"400": {
						"description": "Bad Request\nThe variable value or type is invalid, for example if no filename is set.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the process instance to retrieve the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to retrieve.",
						"required": true
					}
				],
				"tags": ["Process Instance"]
			},
			"get": {
				"summary": "Get Process Variable (Binary)",
				"operationId": "getProcessInstanceVariableBinary",
				"description": "Retrieves the content of a Process Variable by the Process Instance id and the Process Variable name.\nApplicable for byte array or file Process Variables.",
				"responses": {
					"200": {
						"description": "Request successful.\n        For binary variables or files without any MIME type information, a byte stream is returned.\n        File variables with MIME type information are returned as the saved type.\n        Additionally, for file variables the Content-Disposition header will be set.",
						"content": {
							"application/octet-stream": {
								"schema": {
									"format": "binary",
									"description": "For binary variables or files without any MIME type information, a byte stream is returned.",
									"type": "string"
								},
								"examples": {"example-1": {
									"summary": "binary variable: Status 200",
									"value": "Content-Type: application/octet-stream"
								}}
							},
							"text/plain": {
								"schema": {
									"format": "binary",
									"description": "File variables with MIME type information are returned as the saved type.\n            Additionally, for file variables the Content-Disposition header will be set.",
									"type": "string"
								},
								"examples": {"example-1": {
									"summary": "file variable: Status 200",
									"value": "Content-Type: text/plain; charset=UTF-8. Content-Disposition: attachment; filename=\"someFile.txt\""
								}}
							}
						}
					},
					"400": {
						"description": "Bad Request\nA Process Variable with the given id exists but does not serialize as binary data.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "Not Found\nA Process Variable with the given id does not exist. ",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the process instance to retrieve the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to retrieve.",
						"required": true
					}
				],
				"tags": ["Process Instance"]
			}
		},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/rendered-form": {"get": {
			"summary": "Get Rendered Start Form",
			"operationId": "getRenderedStartFormByKeyAndTenantId",
			"description": "Retrieves  the rendered form for the latest version of the process definition for a tenant.\nThis method can be used to get the HTML rendering of a\n[Generated Task Form](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/xhtml+xml": {
						"schema": {
							"format": "binary",
							"description": "For `application/xhtml+xml` Responses, a byte stream is returned.",
							"type": "string"
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "A `/process-definition/key/anKey/tenand-id/aTenantId/rendered-form` HTML\n                                       GET response body providing the rendered (generated) form content.",
							"value": "<form class=\"form-horizontal\">\n                                  <div class=\"control-group\">\n                                    <label class=\"control-label\">Customer ID<\/label>\n                                    <div class=\"controls\">\n                                      <input form-field type=\"string\" name=\"customerId\"><\/input>\n                                    <\/div>\n                                  <\/div>\n                                  <div class=\"control-group\">\n                                    <label class=\"control-label\">Amount<\/label>\n                                    <div class=\"controls\">\n                                      <input form-field type=\"number\" name=\"amount\"><\/input>\n                                    <\/div>\n                                  <\/div>\n                                <\/form>"
						}}
					}}
				},
				"400": {
					"description": "Process definition has no form field metadata defined. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given key does not exist.  See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definition belongs to.",
					"required": true
				}
			],
			"tags": ["Process Definition"]
		}},
		"/process-instance/{id}/modification-async": {"post": {
			"summary": "Modify Process Instance Execution State Async",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ProcessInstanceModificationDto"},
				"examples": {"example-1": {
					"summary": "POST `/process-instance/aProcessInstanceId/modification-async`",
					"value": {
						"annotation": "Modified to resolve an error.",
						"instructions": [
							{
								"activityId": "activityId",
								"type": "startBeforeActivity"
							},
							{
								"activityInstanceId": "anActivityInstanceId",
								"type": "cancel"
							}
						],
						"skipIoMappings": true,
						"skipCustomListeners": true
					}
				}}
			}}},
			"operationId": "modifyProcessInstanceAsyncOperation",
			"description": "Submits a list of modification instructions to change a process instance's execution state async.\nA modification instruction is one of the following:\n\n* Starting execution before an activity\n* Starting execution after an activity on its single outgoing sequence flow\n* Starting execution on a specific sequence flow\n* Cancelling an activity instance, transition instance, or all instances (activity or transition) for an activity\n\nInstructions are executed asynchronous and in the order they are provided in this request's body.\nVariables can be provided with every starting instruction.\n\nThe exact semantics of modification can be read about in the\n[User guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-instance-modification/).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"createUserId": "demo",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"jobsCreated": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "Bad Request\nAt least one modification instruction misses required parameters.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The modification cannot be performed, for example because it starts a failing activity.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "Forbidden\nIf the user is not allowed to execute batches. See the Introduction for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process instance to modify.",
				"required": true
			}],
			"tags": ["Process Instance"]
		}},
		"/task/{id}/bpmnError": {"post": {
			"summary": "Handle BPMN Error",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/TaskBpmnErrorDto"},
				"examples": {"example-1": {
					"summary": "Request Body",
					"description": "POST `/task/aTaskId/bpmnError`",
					"value": {
						"variables": {
							"aVariable": {
								"type": "String",
								"value": "aStringValue"
							},
							"anotherVariable": {
								"type": "Boolean",
								"value": true
							}
						},
						"errorMessage": "anErrorMessage",
						"errorCode": "bpmn-error-543"
					}
				}}
			}}},
			"operationId": "handleBpmnError",
			"description": "Reports a business error in the context of a running task by id. The error code must\nbe specified to identify the BPMN error handler. See the documentation for\n[Reporting Bpmn Error](https://docs.camunda.org/manual/7.19/reference/bpmn20/tasks/user-task/#reporting-bpmn-error)\nin User Tasks.",
			"responses": {
				"400": {
					"description": "Returned if the `errorCode` or `id` are not present in the request. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"403": {
					"description": "If the authenticated user is unauthorized to update the task. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				},
				"404": {
					"description": "Returned if the task does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task a BPMN error is reported for.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/history/process-definition/cleanable-process-instance-report": {"get": {
			"summary": "Get Cleanable Process Instance Report",
			"operationId": "getCleanableHistoricProcessInstanceReport",
			"description": "Retrieves a report about a process definition and finished process instances\nrelevant to history cleanup (see\n[History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)) \nso that you can tune the history time to live.\nThese reports include the count of the finished historic process\ninstances, cleanable process instances and basic process definition\ndata - id, key, name and version.\nThe size of the result set can be retrieved by using the\n[Get Cleanable Process Instance Report Count](https://docs.camunda.org/manual/7.19/reference/rest/history/process-definition/get-cleanable-process-instance-report-count/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/CleanableHistoricProcessInstanceReportResultDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/history/process-definition/cleanable-process-instance-report`",
							"description": "GET `/history/process-definition/cleanable-process-instance-report`",
							"value": [
								{
									"processDefinitionId": "invoice:1:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e",
									"cleanableProcessInstanceCount": 53,
									"tenantId": "aTenantId",
									"historyTimeToLive": 5,
									"finishedProcessInstanceCount": 100,
									"processDefinitionName": "Invoice Receipt",
									"processDefinitionVersion": 1,
									"processDefinitionKey": "invoice"
								},
								{
									"processDefinitionId": "invoice:2:7bf79f13-ef95-11e6-b6e6-34f39ab71d4e",
									"cleanableProcessInstanceCount": 13,
									"tenantId": "aTenantId",
									"historyTimeToLive": 5,
									"finishedProcessInstanceCount": 1000,
									"processDefinitionName": "Invoice Receipt v2.0",
									"processDefinitionVersion": 2,
									"processDefinitionKey": "invoice"
								}
							]
						}}
					}}
				},
				"500": {
					"description": "See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionIdIn",
					"description": "Filter by process definition ids. Must be a comma-separated list of process definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKeyIn",
					"description": "Filter by process definition keys. Must be a comma-separated list of process definition keys."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A process definition must have one of the given \ntenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include process definitions which belong to no tenant. Value may only be `true`, as\n`false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "compact",
					"description": "Only include process instances which have more than zero finished instances. Value may\nonly be `true`, as `false` is the default behavior."
				},
				{
					"schema": {
						"type": "string",
						"enum": ["finished"]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Historic Process Definition"]
		}},
		"/task/{id}/resolve": {"post": {
			"summary": "Resolve",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/CompleteTaskDto"},
				"examples": {"example-1": {
					"summary": "Request Body",
					"description": "POST `/task/anId/resolve`",
					"value": {"variables": {
						"aVariable": {"value": "aStringValue"},
						"anotherVariable": {"value": 42},
						"aThirdVariable": {"value": true}
					}}
				}}
			}}},
			"operationId": "resolve",
			"description": "Resolves a task and updates execution variables.\n\nResolving a task marks that the assignee is done with the task delegated to them, and\nthat it can be sent back to the owner. Can only be executed when the task has been\ndelegated. The assignee will be set to the owner, who performed the delegation.",
			"responses": {
				"400": {
					"description": "The variable value or type is invalid, for example if the value could not be parsed\nto an Integer value or the passed variable type is not supported. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "If the task does not exist or the corresponding process instance could not be\nresumed successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to resolve.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/user/{id}/unlock": {"post": {
			"summary": "Unlock User",
			"operationId": "unlockUser",
			"description": "Unlocks a user by id.",
			"responses": {
				"204": {"description": "Request successful."},
				"403": {
					"description": "The user who performed the operation is not a Camunda admin user.",
					"content": {"application/json": {"schema": {}}}
				},
				"404": {
					"description": "User cannot be found. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the user to be unlocked.",
				"required": true
			}],
			"tags": ["User"]
		}},
		"/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}": {"get": {
			"summary": "Get Decision Requirements Definition by Key and Tenant ID",
			"operationId": "getDecisionRequirementsDefinitionByKeyAndTenantId",
			"description": "Retrieves a decision requirements definition according to the\n`DecisionRequirementsDefinition` interface in the engine.\nReturns the latest version of the decision requirements definition \nfor a tenant.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionRequirementsDefinitionDto"},
						"examples": {"example-1": {
							"summary": "GET `/decision-requirements-definition/key/invoiceKey`/tenant-id/tenantA",
							"description": "GET `/decision-requirements-definition/key/invoiceKey/tenant-id/tenantA`",
							"value": {
								"resource": "invoice.dmn",
								"deploymentId": "c627175e-41b7-11e6-b0ef-00aa004d0001",
								"name": "receiptInvoice",
								"tenantId": "tenantA",
								"id": "invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c",
								"category": "invoice",
								"version": 2,
								"key": "invoiceKey"
							}
						}}
					}}
				},
				"404": {
					"description": "Decision requirements definition with given id or key does not\nexist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the decision requirements definition (the latest version thereof) to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant to which the decision requirements definition belongs to.",
					"required": true
				}
			],
			"tags": ["Decision Requirements Definition"]
		}},
		"/history/batch": {"get": {
			"summary": "Get Historic Batches",
			"operationId": "getHistoricBatches",
			"description": "Queries for historic batches that fulfill given parameters. Parameters may be\nthe properties of batches, such as the id or type. The\nsize of the result set can be retrieved by using the\n[Get Historic Batch Count](https://docs.camunda.org/manual/7.19/reference/rest/history/batch/get-query-count/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/HistoricBatchDto"}
						},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "GET `/history/batch?type=aBatchType&completed=true&sortBy=batchId&sortOrder=asc`",
							"value": [{
								"createUserId": "aUserId",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"type": "aBatchType",
								"removalTime": "2016-04-15T16:23:34.000+0200",
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"tenantId": "aTenantId",
								"startTime": "2016-04-12T15:29:33.000+0200",
								"id": "aBatchId",
								"endTime": "2016-04-12T16:23:34.000+0200",
								"batchJobDefinitionId": "aBatchJobDefinitionId"
							}]
						}}
					}}
				},
				"400": {
					"description": "\nReturned if some of the query parameters are invalid, for example if\na `sortOrder` parameter is supplied, but no `sortBy`.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "batchId",
					"description": "Filter by batch id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "type",
					"description": "Filter by batch type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/batch/#creating-a-batch)\nfor more information about batch types."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "completed",
					"description": "\nFilter completed or not completed batches. If the value is\n`true`, only completed batches, i.e., end time is set, are\nreturned. Otherwise, if the value is `false`, only running\nbatches, i.e., end time is null, are returned."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A batch matches if it has one of the given\ntenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include batches which belong to no tenant. Value can effectively only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"batchId",
							"startTime",
							"endTime",
							"tenantId"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Historic Batch"]
		}},
		"/process-definition/{id}/submit-form": {"post": {
			"summary": "Submit Start Form",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/StartProcessInstanceFormDto"},
				"examples": {"example-1": {
					"summary": "POST `/process-definition/aProcessDefinitionId/submit-form`",
					"value": {
						"variables": {
							"aVariable": {
								"type": "String",
								"value": "aStringValue"
							},
							"anotherVariable": {
								"type": "Boolean",
								"value": true
							}
						},
						"businessKey": "myBusinessKey"
					}
				}}
			}}},
			"operationId": "submitForm",
			"description": "Starts a process instance using a set of process variables and the business key.\nIf the start event has Form Field Metadata defined, the process engine will perform backend validation\nfor any form fields which have validators defined.\nSee [Documentation on Generated Task Forms](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ProcessInstanceDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response 1",
							"description": "POST `/process-definition/aProcessDefinitionId/submit-form`",
							"value": {
								"caseInstanceId": null,
								"businessKey": "myBusinessKey",
								"tenantId": null,
								"ended": false,
								"links": [{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:8080/rest-test/process-instance/anId"
								}],
								"id": "anId",
								"suspended": false,
								"definitionId": "aProcessDefinitionId"
							}
						}}
					}}
				},
				"400": {
					"description": "The instance could not be created due to an invalid variable value,\nfor example if the value could not be parsed to an `Integer` value or\nthe passed variable type is not supported.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The instance could not be created successfully.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given id does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition to submit the form for.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/group/count": {
			"post": {
				"summary": "Get List Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/GroupQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/group/count`",
						"value": {"name": "Sales"}
					}}
				}}},
				"operationId": "queryGroupCount",
				"description": "Queries for groups using a list of parameters and retrieves the count.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "POST `/group/count`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response\nformat.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Group"]
			},
			"get": {
				"summary": "Get List Count",
				"operationId": "getGroupCount",
				"description": "Queries for groups using a list of parameters and retrieves the count.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "GET `/group/count?name=Sales`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response\nformat.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "id",
						"description": "Filter by the id of the group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "idIn",
						"description": "Filter by a comma seperated list of group ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "name",
						"description": "Filter by the name of the group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "nameLike",
						"description": "Filter by the name that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "type",
						"description": "Filter by the type of the group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "member",
						"description": "Only retrieve groups where the given user id is a member of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "memberOfTenant",
						"description": "Only retrieve groups which are members of the given tenant."
					}
				],
				"tags": ["Group"]
			}
		},
		"/external-task/{id}/unlock": {"post": {
			"summary": "Unlock",
			"operationId": "unlock",
			"description": "Unlocks an external task by id. Clears the task's lock expiration time and worker id.",
			"responses": {
				"204": {"description": "Request successful."},
				"404": {
					"description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,\ne.g., due to a caught BPMN boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the external task to unlock.",
				"required": true
			}],
			"tags": ["External Task"]
		}},
		"/job/{id}/suspended": {"put": {
			"summary": "Activate/Suspend Job By Id",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SuspensionStateDto"},
				"examples": {"example-1": {
					"summary": "PUT `/job/aJobId/suspended`",
					"value": {"suspended": true}
				}}
			}}},
			"operationId": "updateJobSuspensionState",
			"description": "Activates or suspends a given job by id.",
			"responses": {"204": {"description": "Request successful. This method returns no content."}},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the job to activate or suspend.",
				"required": true
			}],
			"tags": ["Job"]
		}},
		"/task/{id}/identity-links": {
			"post": {
				"summary": "Add",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/IdentityLinkDto"},
					"examples": {"example-1": {
						"summary": "POST `/task/anId/identity-links`",
						"value": {
							"groupId": "aNewGroupId",
							"type": "candidate"
						}
					}}
				}}},
				"operationId": "addIdentityLink",
				"description": "Adds an identity link to a task by id. Can be used to link any user or group to a task\nand specify a relation.",
				"responses": {
					"400": {
						"description": "Task with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the task to add a link to.",
					"required": true
				}],
				"tags": ["Task Identity Link"]
			},
			"get": {
				"summary": "Get List",
				"operationId": "getIdentityLinks",
				"description": "Gets the identity links for a task by id, which are the users and groups that are in\n*some* relation to it (including assignee and owner).",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/IdentityLinkDto"}
							},
							"examples": {"example-1": {
								"summary": "GET /task/anId/identityLinks",
								"value": [
									{
										"groupId": null,
										"type": "assignee",
										"userId": "userId"
									},
									{
										"groupId": "groupId1",
										"type": "candidate",
										"userId": null
									},
									{
										"groupId": "groupId2",
										"type": "candidate",
										"userId": null
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Task with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to retrieve the identity links for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "type",
						"description": "Filter by the type of links to include."
					}
				],
				"tags": ["Task Identity Link"]
			}
		},
		"/history/process-definition/cleanable-process-instance-report/count": {"get": {
			"summary": "Get Cleanable Process Instance Report Count",
			"operationId": "getCleanableHistoricProcessInstanceReportCount",
			"description": "Queries for the number of report results about a process definition and finished\nprocess instances relevant to history cleanup (see\n[History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)).\nTakes the same parameters as the\n[Get Cleanable Process Instance Report](https://docs.camunda.org/manual/7.19/reference/rest/history/process-definition/get-cleanable-process-instance-report/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/history/process-definition/cleanable-process-instance-report/count`",
							"description": "GET `/history/process-definition/cleanable-process-instance-report/count`",
							"value": {"count": 1}
						}}
					}}
				},
				"500": {
					"description": "See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionIdIn",
					"description": "Filter by process definition ids. Must be a comma-separated list of process definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKeyIn",
					"description": "Filter by process definition keys. Must be a comma-separated list of process definition keys."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A process definition must have one of the given \ntenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include process definitions which belong to no tenant. Value may only be `true`, as\n`false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "compact",
					"description": "Only include process instances which have more than zero finished instances. Value may\nonly be `true`, as `false` is the default behavior."
				}
			],
			"tags": ["Historic Process Definition"]
		}},
		"/decision-requirements-definition/{id}": {"get": {
			"summary": "Get Decision Requirements Definition by ID",
			"operationId": "getDecisionRequirementsDefinitionById",
			"description": "Retrieves a decision requirements definition according to the\n`DecisionRequirementsDefinition` interface in the engine.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/DecisionRequirementsDefinitionDto"},
						"examples": {"example-1": {
							"summary": "GET `/decision-requirements-definition/invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c`",
							"description": "GET `/decision-requirements-definition/invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c`",
							"value": {
								"resource": "invoice.dmn",
								"deploymentId": "c627175e-41b7-11e6-b0ef-00aa004d0001",
								"name": "receiptInvoice",
								"tenantId": null,
								"id": "invoice:1:9f86d61f-9ee5-11e3-be3b-606720b6f99c",
								"category": "invoice",
								"version": 2,
								"key": "invoiceKey"
							}
						}}
					}}
				},
				"404": {
					"description": "Decision requirements definition with given id or key does not\nexist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the decision requirements definition to be retrieved.",
				"required": true
			}],
			"tags": ["Decision Requirements Definition"]
		}},
		"/history/external-task-log/{id}/error-details": {"get": {
			"summary": "Get External Task Log Error Details",
			"operationId": "getErrorDetailsHistoricExternalTaskLog",
			"description": "Retrieves the corresponding error details of the passed historic external task log\nby id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"text/plain": {
						"schema": {},
						"examples": {"example-1": {
							"summary": "GET `history/external-task-log/someId/error-details`",
							"description": "GET `history/external-task-log/someId/error-details`",
							"value": "java.lang.RuntimeException: A exception message!\n                                  at org.camunda.bpm.pa.service.FailingDelegate.execute(FailingDelegate.java:10)\n                                  at org.camunda.bpm.engine.impl.delegate.JavaDelegateInvocation.invoke(JavaDelegateInvocation.java:34)\n                                  at org.camunda.bpm.engine.impl.delegate.DelegateInvocation.proceed(DelegateInvocation.java:37)\n                                  ..."
						}}
					}}
				},
				"404": {
					"description": "Historic external task log with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the historic external task log to get the error details for.",
				"required": true
			}],
			"tags": ["Historic External Task Log"]
		}},
		"/task/{id}/localVariables": {
			"post": {
				"summary": "Update/Delete Local Task Variables",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/PatchVariablesDto"},
					"examples": {"example-1": {
						"summary": "POST `/task/aTaskId/variables`",
						"description": "Status 204 Response: No content.",
						"value": {
							"deletions": [
								"aThirdVariable",
								"FourthVariable"
							],
							"modifications": {
								"aVariable": {
									"type": "String",
									"value": "aValue"
								},
								"anotherVariable": {
									"type": "Integer",
									"value": 42
								}
							}
						}
					}}
				}}},
				"operationId": "modifyTaskLocalVariables",
				"description": "Updates or deletes the variables in the context of a task. Updates precede deletions. So, if a variable is\nupdated AND deleted, the deletion overrides the update.",
				"responses": {
					"400": {
						"description": "The variable value or type is invalid. For example the value could not be parsed to an `Integer` value\nor the passed variable type is not supported. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"500": {
						"description": "Update or delete could not be executed because the task is `null` or does not exist.. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the task to set variables for.",
					"required": true
				}],
				"tags": ["Task Local Variable"]
			},
			"get": {
				"summary": "Get Local Task Variables",
				"operationId": "getTaskLocalVariables",
				"description": "Retrieves all variables of a given task by id.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
								"type": "object"
							},
							"examples": {
								"example-1": {
									"summary": "GET `/task/aTaskId/variables`",
									"value": {"aVariableKey": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": {
											"prop2": "b",
											"prop1": "a"
										}
									}}
								},
								"example-2": {
									"summary": "GET `/task/aTaskId/variables?deserializeValue=false`",
									"value": {"aVariableKey": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": "ab"
									}}
								}
							}
						}}
					},
					"500": {
						"description": "Task id is `null` or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to retrieve the variables from.",
						"required": true
					},
					{
						"schema": {
							"default": true,
							"type": "boolean"
						},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically variables that store custom Java objects)\nshould be deserialized on the server side (default `true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side and transformed to JSON\nusing [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.\nNote that this requires the Java classes of the variable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of backward compatibility, we recommend setting this\nparameter to `false` when developing web applications that are independent of the Java process\napplications deployed to the engine."
					}
				],
				"tags": ["Task Local Variable"]
			}
		},
		"/process-definition/key/{key}/tenant-id/{tenant-id}/form-variables": {"get": {
			"summary": "Get Start Form Variables",
			"operationId": "getStartFormVariablesByKeyAndTenantId",
			"description": "Retrieves the start form variables for the latest process definition for a tenant\n(only if they are defined via the \n[Generated Task Form](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms) approach).\nThe start form variables take form data specified on the start event into account.\nIf form fields are defined, the variable types and default values\nof the form fields are taken into account.",
			"responses": {
				"200": {
					"description": "Request successful. A JSON object containing a property for each variable returned.",
					"content": {"application/json": {
						"schema": {
							"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
							"type": "object"
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "GET `/process-definition/anId/form-variables`",
							"value": {
								"firstName": {
									"valueInfo": {},
									"type": "String",
									"value": "Jonny"
								},
								"amount": {
									"valueInfo": {},
									"type": "integer",
									"value": 5
								}
							}
						}}
					}}
				},
				"404": {
					"description": "The key is null or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant the process definition belongs to.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "variableNames",
					"description": "A comma-separated list of variable names. Allows restricting the list of requested\nvariables to the variable names in the list. It is best practice to restrict the\nlist of variables to the variables actually required by the form in order to\nminimize fetching of data. If the query parameter is ommitted all variables are\nfetched. If the query parameter contains non-existent variable names, the variable\nnames are ignored."
				},
				{
					"schema": {
						"default": true,
						"type": "boolean"
					},
					"in": "query",
					"name": "deserializeValues",
					"description": "Determines whether serializable variable values (typically variables that store\ncustom Java objects) should be deserialized on server side (default true).\n\nIf set to true, a serializable variable will be deserialized on server side and\ntransformed to JSON using [Jackson's](http://jackson.codehaus.org/) POJO/bean\nproperty introspection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to false, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string\ncontaining XML.\n\n**Note**: While true is the default value for reasons of backward compatibility, we\nrecommend setting this parameter to false when developing web applications that are\nindependent of the Java process applications deployed to the engine."
				}
			],
			"tags": ["Process Definition"]
		}},
		"/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram": {"get": {
			"summary": "Get Decision Requirements Diagram by Key and Tenant ID",
			"operationId": "getDecisionRequirementsDefinitionDiagramByKeyAndTenantId",
			"description": "Retrieves the diagram of a decision requirements definition.\nReturns the diagram of the latest version of the decision requirements \ndefinition for a tenant.",
			"responses": {
				"200": {
					"description": "The image diagram of the decision requirements definition.",
					"content": {
						"image/*": {
							"schema": {
								"format": "binary",
								"description": "For `image/*` Responses, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "GET `/decision-requirements-definition/key/invoiceKey/tenant-id/tenantA/diagram`",
								"description": "GET `/decision-requirements-definition/key/invoiceKey/tenant-id/tenantA/diagram`",
								"value": ""
							}}
						},
						"application/octet-stream": {
							"schema": {
								"format": "binary",
								"description": "For `application/octet-stream` Responses, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "GET `/decision-requirements-definition/key/invoiceKey/tenant-id/tenantA/diagram`",
								"description": "GET `/decision-requirements-definition/key/invoiceKey/tenant-id/tenantA/diagram`",
								"value": ""
							}}
						}
					}
				},
				"204": {"description": "The decision requirements definition doesn't have an associated diagram. This\nmethod returns no content."},
				"404": {
					"description": "Decision requirements definition with given id or key does not\nexist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the decision requirements definition (the latest version thereof) to be\nretrieved.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "tenant-id",
					"description": "The id of the tenant to which the decision requirements definition belongs to.",
					"required": true
				}
			],
			"tags": ["Decision Requirements Definition"]
		}},
		"/task/{id}/localVariables/{varName}/data": {
			"post": {
				"summary": "Update Local Task Variable (Binary)",
				"requestBody": {
					"description": "For binary variables a multipart form submit with the following parts:",
					"content": {"multipart/form-data": {
						"schema": {"$ref": "#/components/schemas/MultiFormVariableBinaryDto"},
						"examples": {
							"example-3": {
								"summary": "POST `/task/aTaskId/variables/aVarName/data` (3)",
								"description": "Post a text file.",
								"value": "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"data\"; filename=\"myFile.txt\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: binary\n\n                        <<Byte Stream ommitted>>\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        File\n                        ------------------------------1e838f8f632a--\n                        ```\n                      "
							},
							"example-1": {
								"summary": "POST `/task/aTaskId/variables/aVarName/data` (1)",
								"description": "Post binary content of a byte array variable.",
								"value": "\n                        ```\n                        ------------------------------354ddb6baeff\n                        Content-Disposition: form-data; name=\"data\"; filename=\"image.png\"\n                        Content-Type: application/octet-stream\n                        Content-Transfer-Encoding: binary\n\n                        <<Byte Stream ommitted>>\n                        ------------------------------354ddb6baeff\n                        Content-Disposition: form-data; name=\"valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        Bytes\n                        ------------------------------1e838f8f632a--\n                        ```\n                      "
							},
							"example-2": {
								"summary": "POST `/task/aTaskId/variables/aVarName/data` (2)",
								"description": "Post the JSON serialization of a Java Class (**deprecated**).",
								"value": "\n                        ```\n                        ------------------------------1e838f8f632a\n                        Content-Disposition: form-data; name=\"type\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        java.util.ArrayList<java.lang.Object>\n                        ------------------------------1e838f8f632a\n                        Content-Disposition: form-data; name=\"data\"\n                        Content-Type: application/json; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        [\"foo\",\"bar\"]\n                        ------------------------------1e838f8f632a--\n                        ```\n                      "
							}
						}
					}}
				},
				"operationId": "setBinaryTaskLocalVariable",
				"description": "Sets the serialized value for a binary variable or the binary value for a file variable.",
				"responses": {
					"400": {
						"description": "The variable value or type is invalid, for example if no filename is set. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"500": {
						"description": "Variable name is `null`, or the Task id is `null` or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to retrieve the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to retrieve.",
						"required": true
					}
				],
				"tags": ["Task Local Variable"]
			},
			"get": {
				"summary": "Get Local Task Variable (Binary)",
				"operationId": "getTaskLocalVariableBinary",
				"description": "Retrieves a binary variable from the context of a given task by id. Applicable for byte array and file\nvariables.",
				"responses": {
					"200": {
						"description": "Request successful.\n        For binary variables or files without any MIME type information, a byte stream is returned.\n        File variables with MIME type information are returned as the saved type.\n        Additionally, for file variables the Content-Disposition header will be set.",
						"content": {
							"application/octet-stream": {
								"schema": {
									"format": "binary",
									"description": "For binary variables or files without any MIME type information, a byte stream is returned.",
									"type": "string"
								},
								"examples": {"example-1": {
									"summary": "GET /task/aTaskId/variables/aVarName/data",
									"value": "binary variable: Status 200. Content-Type: application/octet-stream"
								}}
							},
							"text/plain": {
								"schema": {
									"format": "binary",
									"description": "File variables with MIME type information are returned as the saved type.\n            Additionally, for file variables the Content-Disposition header will be set.",
									"type": "string"
								},
								"examples": {"example-1": {
									"summary": "GET /task/aTaskId/variables/aVarName/data",
									"value": "file variable: Status 200. Content-Type: text/plain; charset=UTF-8. Content-Disposition: attachment; filename=\"someFile.txt\""
								}}
							}
						}
					},
					"400": {
						"description": "Variable with given id exists but is not a binary variable.See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to retrieve the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to retrieve.",
						"required": true
					}
				],
				"tags": ["Task Local Variable"]
			}
		},
		"/history/variable-instance": {
			"post": {
				"summary": "Get Variable Instances (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricVariableInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/variable-instance`",
						"value": {
							"variableName": "someVariable",
							"variableValue": 42,
							"sorting": [
								{
									"sortOrder": "asc",
									"sortBy": "variableName"
								},
								{
									"sortOrder": "desc",
									"sortBy": "instanceId"
								}
							]
						}
					}}
				}}},
				"operationId": "queryHistoricVariableInstances",
				"description": "Queries for historic variable instances that fulfill the given parameters.\nThis method is slightly more powerful than the\n[Get Variable Instances](https://docs.camunda.org/manual/7.19/reference/rest/history/variable-instance/get-variable-instance-query/)\nmethod because it allows filtering by variable values of the different\ntypes `String`, `Number` or `Boolean`.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricVariableInstanceDto"}
							},
							"examples": {"example-1": {
								"summary": "POST `/history/variable-instance`",
								"description": "POST `/history/variable-instance`",
								"value": [{
									"processDefinitionId": "aProcessDefinitionId",
									"processInstanceId": "aProcInstId",
									"caseExecutionId": null,
									"caseDefinitionId": null,
									"caseDefinitionKey": null,
									"caseInstanceId": null,
									"valueInfo": {},
									"errorMessage": null,
									"activityInstanceId": "aActivityInstId",
									"type": "Integer",
									"processDefinitionKey": "aProcessDefinitionKey",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"variableType": "integer",
									"executionId": "aExecutionId",
									"createTime": "2017-02-10T14:33:19.000+0200",
									"name": "someVariable",
									"tenantId": null,
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "someId",
									"state": "CREATED",
									"value": 5,
									"taskId": null
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically variables that\nstore custom Java objects) should be deserialized on server side (default\n`true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side\nand transformed to JSON using\n[Jackson's](https://github.com/FasterXML/jackson) POJO/bean property\nintrospection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized\nformat. For example, a variable that is serialized as XML will be returned as\na JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of backward\ncompatibility, we recommend setting this parameter to `false` when developing\nweb applications that are independent of the Java process applications\ndeployed to the engine."
					}
				],
				"tags": ["Historic Variable Instance"]
			},
			"get": {
				"summary": "Get Variable Instances",
				"operationId": "getHistoricVariableInstances",
				"description": "Queries for historic variable instances that fulfill the given parameters.\nThe size of the result set can be retrieved by using the\n[Get Variable Instance Count](https://docs.camunda.org/manual/7.19/reference/rest/history/variable-instance/get-variable-instance-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricVariableInstanceDto"}
							},
							"examples": {"example-1": {
								"summary": "GET `/history/variable-instance?variableName=my_variable`",
								"description": "GET `/history/variable-instance?variableName=my_variable`",
								"value": [{
									"processDefinitionId": "aVariableInstanceProcDefId",
									"processInstanceId": "aVariableInstanceProcInstId",
									"caseExecutionId": null,
									"caseDefinitionId": null,
									"caseDefinitionKey": null,
									"caseInstanceId": null,
									"valueInfo": {},
									"errorMessage": null,
									"activityInstanceId": "aVariableInstanceActivityInstId",
									"type": "String",
									"processDefinitionKey": "aVariableInstanceProcDefKey",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"executionId": "aVariableInstanceExecutionId",
									"createTime": "2017-02-10T14:33:19.000+0200",
									"name": "my_variable",
									"tenantId": null,
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "someId",
									"state": "CREATED",
									"value": "my_value",
									"taskId": null
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableName",
						"description": "Filter by variable name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableNameLike",
						"description": "Restrict to variables with a name like the parameter."
					},
					{
						"schema": {"type": "object"},
						"in": "query",
						"name": "variableValue",
						"description": "Filter by variable value. Is treated as a `String` object on server side."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match the variable name provided in `variableName` and `variableNameLike` case-\ninsensitively. If set to `true` **variableName** and **variablename** are\ntreated as equal."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match the variable value provided in `variableValue` case-insensitively. If set to `true`\n**variableValue** and **variablevalue** are treated as equal."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableTypeIn",
						"description": "Only include historic variable instances which belong to one of the passed and comma-\nseparated variable types. A list of all supported variable types can be found\n[here](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#supported-variable-values).\n**Note:** All non-primitive variables are associated with the type\n'serializable'."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "includeDeleted",
						"description": "Include variables that has already been deleted during the execution."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by the process instance the variable belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and comma-separated process instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the process definition the variable belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by a key of the process definition the variable belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and and comma-separated execution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Filter by the case instance the variable belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseExecutionIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseActivityIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and and comma-separated task ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include historic variable instances which belong to one of the passed and comma-\nseparated tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic variable instances that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableNameIn",
						"description": "Only include historic variable instances which belong to one of the passed and comma-separated variable names."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"instanceId",
								"variableName",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically variables that\nstore custom Java objects) should be deserialized on server side (default\n`true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side\nand transformed to JSON using\n[Jackson's](https://github.com/FasterXML/jackson) POJO/bean property\nintrospection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized\nformat. For example, a variable that is serialized as XML will be returned as\na JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of backward\ncompatibility, we recommend setting this parameter to `false` when developing\nweb applications that are independent of the Java process applications\ndeployed to the engine."
					}
				],
				"tags": ["Historic Variable Instance"]
			}
		},
		"/authorization": {
			"get": {
				"summary": "Get Authorizations",
				"operationId": "queryAuthorizations",
				"description": "Queries for a list of authorizations using a list of parameters.\nThe size of the result set can be retrieved by using the\n[Get Authorization Count](https://docs.camunda.org/manual/7.19/reference/rest/authorization/get-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/AuthorizationDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "GET `/authorization?userIdIn=jonny1,jonny2`",
								"value": [
									{
										"resourceId": "*",
										"permissions": ["ALL"],
										"groupId": null,
										"id": "anAuthorizationId",
										"type": 0,
										"userId": "jonny1",
										"resourceType": 1
									},
									{
										"resourceId": "*",
										"permissions": [
											"CREATE",
											"READ"
										],
										"groupId": null,
										"rootProcessInstanceId": "f8259e5d-ab9d-11e8-8449-e4a7a094a9d6",
										"id": "anotherAuthorizationId",
										"type": 0,
										"userId": "jonny2",
										"resourceType": 1,
										"removalTime": "2018-02-10T14:33:19.000+0200"
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy` is specified. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "id",
						"description": "Filter by the id of the authorization."
					},
					{
						"schema": {
							"format": "int32",
							"type": "integer"
						},
						"in": "query",
						"name": "type",
						"description": "Filter by authorization type. (0=global, 1=grant, 2=revoke).\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#authorization-type)\nfor more information about authorization types."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "userIdIn",
						"description": "Filter by a comma-separated list of userIds."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "groupIdIn",
						"description": "Filter by a comma-separated list of groupIds."
					},
					{
						"schema": {
							"format": "int32",
							"type": "integer"
						},
						"in": "query",
						"name": "resourceType",
						"description": "Filter by an integer representation of the resource type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/authorization-service/#resources)\nfor a list of integer representations of resource types."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "resourceId",
						"description": "Filter by resource id."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"resourceType",
								"resourceId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Authorization"]
			},
			"options": {
				"summary": "Authorization Resource Options",
				"operationId": "availableOperationsAuthorization",
				"description": "The OPTIONS request allows you to check for the set of available operations that the currently\nauthenticated user can perform on the `/authorization` resource. Whether the user can perform an operation\nor not may depend on various factors, including the users authorizations to interact with this\nresource and the internal configuration of the process engine.",
				"responses": {"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "OPTIONS `/authorization`",
							"value": {"links": [
								{
									"method": "GET",
									"rel": "list",
									"href": "http://localhost:8080/engine-rest/authorization"
								},
								{
									"method": "GET",
									"rel": "count",
									"href": "http://localhost:8080/engine-rest/authorization/count"
								},
								{
									"method": "POST",
									"rel": "create",
									"href": "http://localhost:8080/engine-rest/authorization/create"
								}
							]}
						}}
					}}
				}},
				"tags": ["Authorization"]
			}
		},
		"/process-definition/key/{key}": {
			"get": {
				"summary": "Get",
				"operationId": "getProcessDefinitionByKey",
				"description": "Retrieves the latest version of the process definition which belongs to no tenant according to the `ProcessDefinition` interface in the engine.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/ProcessDefinitionDto"},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response of GET `/process-definition/key/invoice`",
								"value": {
									"resource": "invoice.v1.bpmn",
									"startableInTasklist": true,
									"description": null,
									"historyTimeToLive": 5,
									"versionTag": null,
									"version": 1,
									"suspended": false,
									"diagram": null,
									"deploymentId": "c398cd26-2046-11e7-8f94-34f39ab71d4e",
									"name": "Invoice Receipt",
									"tenantId": null,
									"id": "invoice:1:c3a63aaa-2046-11e7-8f94-34f39ab71d4e",
									"category": "http://www.omg.org/spec/BPMN/20100524/MODEL",
									"key": "invoice"
								}
							}}
						}}
					},
					"400": {
						"description": "Process definition with given `key` does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) to be retrieved.",
					"required": true
				}],
				"tags": ["Process Definition"]
			},
			"delete": {
				"summary": "Delete By Key",
				"operationId": "deleteProcessDefinitionsByKey",
				"description": "Deletes process definitions by a given key which belong to no tenant id.",
				"responses": {
					"204": {"description": "Request successful."},
					"403": {
						"description": "Forbidden\nThe process definitions with the given `key` cannot be deleted due to missing permissions.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
					},
					"404": {
						"description": "Not found\nProcess definition with given `key` does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "key",
						"description": "The key of the process definitions to be deleted.",
						"required": true
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "cascade",
						"description": "`true`, if all process instances, historic process instances and jobs\nfor this process definition should be deleted."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipCustomListeners",
						"description": "`true`, if only the built-in ExecutionListeners should be notified with the end event."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipIoMappings",
						"description": "A boolean value to control whether input/output mappings should be executed during deletion.\n`true`, if input/output mappings should not be invoked."
					}
				],
				"tags": ["Process Definition"]
			}
		},
		"/history/user-operation/count": {"get": {
			"summary": "Get User Operation Log Count",
			"operationId": "queryUserOperationCount",
			"description": "Queries for the number of user operation log entries that fulfill the given parameters.\nTakes the same parameters as the\n[Get User Operation Log (Historic)](https://docs.camunda.org/manual/7.19/reference/rest/history/user-operation-log/get-user-operation-log-query/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/history/user-operation?operationType=Claim&userId=demo`",
							"description": "GET `/history/user-operation?operationType=Claim&userId=demo`",
							"value": {"count": 1}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "deploymentId",
					"description": "Filter by deployment id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Filter by process definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKey",
					"description": "Filter by process definition key."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Filter by process instance id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "executionId",
					"description": "Filter by execution id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseDefinitionId",
					"description": "Filter by case definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseInstanceId",
					"description": "Filter by case instance id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "caseExecutionId",
					"description": "Filter by case execution id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "taskId",
					"description": "Only include operations on this task."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "externalTaskId",
					"description": "Only include operations on this external task."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "batchId",
					"description": "Only include operations on this batch."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "jobId",
					"description": "Filter by job id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "jobDefinitionId",
					"description": "Filter by job definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "userId",
					"description": "Only include operations of this user."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "operationId",
					"description": "Filter by the id of the operation. This allows fetching of multiple entries which are part\nof a composite operation."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "operationType",
					"description": "Filter by the type of the operation like `Claim` or `Delegate`. See the\n[Javadoc](https://docs.camunda.org/manual/7.19/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html)\nfor a list of available operation types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "entityType",
					"description": "Filter by the type of the entity that was affected by this operation, possible values are\n`Task`, `Attachment` or `IdentityLink`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "entityTypeIn",
					"description": "Filter by a comma-separated list of types of the entities that was affected by this operation,\npossible values are `Task`, `Attachment` or `IdentityLink`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "category",
					"description": "Filter by the category that this operation is associated with, possible values are\n`TaskWorker`, `Admin` or `Operator`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "categoryIn",
					"description": "Filter by a comma-separated list of categories that this operation is associated with, possible values are\n`TaskWorker`, `Admin` or `Operator`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "property",
					"description": "Only include operations that changed this property, e.g., `owner` or `assignee`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "afterTimestamp",
					"description": "Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the\ntimestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., 2013-01-23T14:42:45.000+0200."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "beforeTimestamp",
					"description": "Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the\ntimestamp must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., 2013-01-23T14:42:45.000+0200."
				}
			],
			"tags": ["Historic User Operation Log"]
		}},
		"/external-task/retries": {"put": {
			"summary": "Set Retries Sync",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SetRetriesForExternalTasksDto"},
				"examples": {"example-1": {
					"summary": "PUT /external-task/retries",
					"value": {
						"retries": 123,
						"externalTaskIds": [
							"anExternalTask",
							"anotherExternalTask"
						]
					}
				}}
			}}},
			"operationId": "setExternalTaskRetries",
			"description": "Sets the number of retries left to execute external tasks by id synchronously. If retries are set to 0, \nan incident is created.",
			"responses": {
				"400": {
					"description": "In case the number of retries is negative or null, an exception of type `InvalidRequestException` is\nreturned. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task, \ne.g., due to a caught BPMN boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["External Task"]
		}},
		"/task/{id}/variables/{varName}/data": {
			"post": {
				"summary": "Update Task Variable (Binary)",
				"requestBody": {
					"description": "For binary variables a multipart form submit with the following parts:",
					"content": {"multipart/form-data": {
						"schema": {"$ref": "#/components/schemas/MultiFormVariableBinaryDto"},
						"examples": {
							"example-3": {
								"summary": "POST `/task/aTaskId/variables/aVarName/data` (3)",
								"description": "Post a text file.",
								"value": "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"data\"; filename=\"myFile.txt\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: binary\n\n                        <<Byte Stream ommitted>>\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        File\n                        ------------------------------1e838f8f632a--\n                        ```\n                      "
							},
							"example-1": {
								"summary": "POST `/task/aTaskId/variables/aVarName/data` (1)",
								"description": "Post binary content of a byte array variable.",
								"value": "\n                        ```\n                        ------------------------------354ddb6baeff\n                        Content-Disposition: form-data; name=\"data\"; filename=\"image.png\"\n                        Content-Type: application/octet-stream\n                        Content-Transfer-Encoding: binary\n\n                        <<Byte Stream ommitted>>\n                        ------------------------------354ddb6baeff\n                        Content-Disposition: form-data; name=\"valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        Bytes\n                        ------------------------------1e838f8f632a--\n                        ```\n                      "
							},
							"example-2": {
								"summary": "POST `/task/aTaskId/variables/aVarName/data` (2)",
								"description": "Post the JSON serialization of a Java Class (**deprecated**).",
								"value": "\n                        ```\n                        ------------------------------1e838f8f632a\n                        Content-Disposition: form-data; name=\"type\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        java.util.ArrayList<java.lang.Object>\n                        ------------------------------1e838f8f632a\n                        Content-Disposition: form-data; name=\"data\"\n                        Content-Type: application/json; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        [\"foo\",\"bar\"]\n                        ------------------------------1e838f8f632a--\n                        ```\n                      "
							}
						}
					}}
				},
				"operationId": "setBinaryTaskVariable",
				"description": "Sets the serialized value for a binary variable or the binary value for a file variable visible from the\ntask. A variable is visible from the task if it is a local task variable or declared in a parent scope of\nthe task. See documentation on\n[visiblity of variables](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/).",
				"responses": {
					"400": {
						"description": "The variable value or type is invalid, for example if no filename is set. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"500": {
						"description": "Variable name is `null`, or the Task id is `null` or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to retrieve the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to retrieve.",
						"required": true
					}
				],
				"tags": ["Task Variable"]
			},
			"get": {
				"summary": "Get Task Variable (Binary)",
				"operationId": "getTaskVariableBinary",
				"description": "Retrieves a binary variable from the context of a given task. Applicable for byte array and file\nvariables. The variable must be visible from the task. It is visible from the task if it is a local task\nvariable or declared in a parent scope of the task. See documentation on\n[visiblity of variables](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/).",
				"responses": {
					"200": {
						"description": "Request successful.\n        For binary variables or files without any MIME type information, a byte stream is returned.\n        File variables with MIME type information are returned as the saved type.\n        Additionally, for file variables the Content-Disposition header will be set.",
						"content": {
							"application/octet-stream": {
								"schema": {
									"format": "binary",
									"description": "For binary variables or files without any MIME type information, a byte stream is returned.",
									"type": "string"
								},
								"examples": {"example-1": {
									"summary": "GET /task/aTaskId/variables/aVarName/data",
									"value": "binary variable: Status 200. Content-Type: application/octet-stream"
								}}
							},
							"text/plain": {
								"schema": {
									"format": "binary",
									"description": "File variables with MIME type information are returned as the saved type.\n            Additionally, for file variables the Content-Disposition header will be set.",
									"type": "string"
								},
								"examples": {"example-1": {
									"summary": "GET /task/aTaskId/variables/aVarName/data",
									"value": "file variable: Status 200. Content-Type: text/plain; charset=UTF-8. Content-Disposition: attachment; filename=\"someFile.txt\""
								}}
							}
						}
					},
					"400": {
						"description": "Variable with given id exists but is not a binary variable.See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to retrieve the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to retrieve.",
						"required": true
					}
				],
				"tags": ["Task Variable"]
			}
		},
		"/execution/{id}/localVariables/{varName}/data": {
			"post": {
				"summary": "Post Local Execution Variable (Binary)",
				"requestBody": {"content": {"multipart/form-data": {
					"schema": {"$ref": "#/components/schemas/MultiFormVariableBinaryDto"},
					"examples": {
						"example-3": {
							"summary": "Post a text file",
							"description": "POST /execution/anExecutionId/localVariables/aVarName/data",
							"value": "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"data\"; filename=\"myFile.txt\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: binary\n\n                        <<Byte Stream ommitted>>\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        File\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y--\n                        ```\n                      "
						},
						"example-1": {
							"summary": "Post binary content of a byte array variable",
							"description": "POST /execution/anExecutionId/localVariables/aVarName/data",
							"value": "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"data\"; filename=\"unspecified\"\n                        Content-Type: application/octet-stream\n                        Content-Transfer-Encoding: binary\n\n                        <<Byte Stream ommitted>>\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"valueType\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        Bytes\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y--\n                        ```\n                      "
						},
						"example-2": {
							"summary": "Post the JSON serialization of a Java Class **(deprecated)**",
							"description": "POST /execution/anExecutionId/localVariables/aVarName/data",
							"value": "\n                        ```\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"data\"\n                        Content-Type: application/json; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        [\"foo\", \"bar\"]\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y\n                        Content-Disposition: form-data; name=\"type\"\n                        Content-Type: text/plain; charset=US-ASCII\n                        Content-Transfer-Encoding: 8bit\n\n                        java.util.ArrayList<java.lang.Object>\n                        ---OSQH1f8lzs83iXFHphqfIuitaQfNKFY74Y--\n                        ```\n                      "
						}
					}
				}}},
				"operationId": "setLocalExecutionVariableBinary",
				"description": "Sets the serialized value for a binary variable or the binary value for a file\nvariable in the context of a given execution by id.",
				"responses": {
					"400": {
						"description": "The variable value or type is invalid, for example if no filename is set. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the execution to set the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to set.",
						"required": true
					}
				],
				"tags": ["Execution"]
			},
			"get": {
				"summary": "Get Local Execution Variable (Binary)",
				"operationId": "getLocalExecutionVariableBinary",
				"description": "Retrieves a binary variable from the context of a given execution by id. Does not\ntraverse the parent execution hierarchy. Applicable for byte array and\nfile variables.",
				"responses": {
					"200": {
						"description": "Request successful.\n        For binary variables or files without any MIME type information, a byte stream is returned.\n        File variables with MIME type information are returned as the saved type.\n        Additionally, for file variables the Content-Disposition header will be set.",
						"content": {
							"application/octet-stream": {
								"schema": {
									"format": "binary",
									"description": "For binary variables or files without any MIME type information, a byte stream is returned.",
									"type": "string"
								},
								"examples": {"example-1": {
									"summary": "binary variable: Status 200",
									"value": "Content-Type: application/octet-stream"
								}}
							},
							"text/plain": {
								"schema": {
									"format": "binary",
									"description": "File variables with MIME type information are returned as the saved type.\n            Additionally, for file variables the Content-Disposition header will be set.",
									"type": "string"
								},
								"examples": {"example-1": {
									"summary": "file variable: Status 200",
									"value": "Content-Type: text/plain; charset=UTF-8. Content-Disposition: attachment; filename=\"someFile.txt\""
								}}
							}
						}
					},
					"400": {
						"description": "Variable instance with given id exists but is not a binary variable. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "Variable instance with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the execution to retrieve the variable from.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to get.",
						"required": true
					}
				],
				"tags": ["Execution"]
			}
		},
		"/process-instance/{id}/suspended": {"put": {
			"summary": "Activate/Suspend Process Instance By Id",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SuspensionStateDto"},
				"examples": {"example-1": {
					"summary": "PUT `/process-instance/aProcessInstanceId/suspended`",
					"value": {"suspended": true}
				}}
			}}},
			"operationId": "updateSuspensionStateById",
			"description": "Activates or suspends a given process instance by id.",
			"responses": {"204": {"description": "Request successful."}},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process instance to activate or suspend.",
				"required": true
			}],
			"tags": ["Process Instance"]
		}},
		"/external-task/{id}": {"get": {
			"summary": "Get",
			"operationId": "getExternalTask",
			"description": "Retrieves an external task by id, corresponding to the `ExternalTask` interface in the engine.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ExternalTaskDto"},
						"examples": {"example-1": {
							"summary": "GET /external-task/anExternalTaskId",
							"value": {
								"processDefinitionId": "aProcessDefinitionId",
								"processInstanceId": "aProcessInstanceId",
								"workerId": "aWorkerId",
								"lockExpirationTime": "2015-10-06T16:34:42.000+0200",
								"errorMessage": "anErrorMessage",
								"activityInstanceId": "anActivityInstanceId",
								"priority": 0,
								"suspended": false,
								"processDefinitionKey": "aProcessDefinitionKey",
								"activityId": "anActivityId",
								"executionId": "anExecutionId",
								"retries": 3,
								"tenantId": null,
								"businessKey": "aBusinessKey",
								"topicName": "aTopic",
								"id": "anExternalTaskId"
							}
						}}
					}}
				},
				"404": {
					"description": "External task with the given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the external task to be retrieved.",
				"required": true
			}],
			"tags": ["External Task"]
		}},
		"/group/create": {"post": {
			"summary": "Create Group",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/GroupDto"},
				"examples": {"example-1": {
					"summary": "POST `/group/create`",
					"value": {
						"name": "Sales",
						"id": "sales",
						"type": "Organizational Unit"
					}
				}}
			}}},
			"operationId": "createGroup",
			"description": "Creates a new group.",
			"responses": {
				"500": {
					"description": "The group could not be created due to an internal server error. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the\nerror response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."},
				"403": {
					"description": "Identity service is read-only (Cannot modify users / groups / memberships).",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Group"]
		}},
		"/task/{id}/rendered-form": {"get": {
			"summary": "Get Rendered Form",
			"operationId": "getRenderedForm",
			"description": "Retrieves the rendered form for a task. This method can be used to get the HTML\nrendering of a\n[Generated Task Form](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#generated-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/xhtml+xml": {
						"schema": {
							"format": "binary",
							"description": "For `application/xhtml+xml` Responses, a byte stream is returned.",
							"type": "string"
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "A `/task/anId/rendered-form` HTML GET response body providing the rendered (generated) form content.",
							"value": "<form class=\"form-horizontal\">\n                                  <div class=\"control-group\">\n                                    <label class=\"control-label\">Customer ID<\/label>\n                                    <div class=\"controls\">\n                                      <input form-field type=\"string\" name=\"customerId\"><\/input>\n                                    <\/div>\n                                  <\/div>\n                                  <div class=\"control-group\">\n                                    <label class=\"control-label\">Amount<\/label>\n                                    <div class=\"controls\">\n                                      <input form-field type=\"number\" name=\"amount\"><\/input>\n                                    <\/div>\n                                  <\/div>\n                                <\/form>"
						}}
					}}
				},
				"400": {
					"description": "The task with the given id does not exist or has no form field metadata defined for\nthis task. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to get the rendered form for.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/batch/statistics": {"get": {
			"summary": "Get Statistics",
			"operationId": "getBatchStatistics",
			"description": "Queries for batch statistics that fulfill given parameters.\nParameters may be the properties of batches, such as the id or type.\nThe size of the result set can be retrieved by using the \n[Get Batch Statistics Count](https://docs.camunda.org/manual/7.19/reference/rest/batch/get-statistics-query-count/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/BatchStatisticsDto"}
						},
						"examples": {"example-1": {
							"description": "Response for GET `/batch/statistics?type=aBatchType&sortBy=batchId&sortOrder=asc`",
							"value": [{
								"createUserId": "aUserId",
								"remainingJobs": 3,
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"type": "aBatchType",
								"suspended": false,
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"jobsCreated": 10,
								"failedJobs": 1,
								"tenantId": "aTenantId",
								"id": "aBatchId",
								"completedJobs": 7,
								"batchJobDefinitionId": "aBatchJobDefinitionId"
							}]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid,\nfor example if a `sortOrder` parameter is supplied, but no `sortBy`.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {
						"type": "string",
						"enum": [
							"batchId",
							"tenantId"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "batchId",
					"description": "Filter by batch id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "type",
					"description": "Filter by batch type.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/batch/#creating-a-batch)\nfor more information about batch types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of `Strings`. A batch matches if it has one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include batches which belong to no tenant.\nValue can effectively only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "suspended",
					"description": "A `Boolean` value which indicates whether only active or suspended batches should be included.\nWhen the value is set to `true`, only suspended batches will be returned and\nwhen the value is set to `false`, only active batches will be returned."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "createdBy",
					"description": "Only include batches that were started by this user id."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedBefore",
					"description": "Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedAfter",
					"description": "Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withFailures",
					"description": "Only include batches having jobs with failures.\nValue can only be `true`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutFailures",
					"description": "Only include batches having jobs without failures.\nValue can only be `true`."
				}
			],
			"tags": ["Batch"]
		}},
		"/telemetry/configuration": {
			"post": {
				"summary": "Configure Telemetry",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/TelemetryConfigurationDto"},
					"examples": {"examle-1": {
						"summary": "POST /telemetry/configuration",
						"description": "The content of the Request Body",
						"value": {"enableTelemetry": true}
					}}
				}}},
				"operationId": "configureTelemetry",
				"description": "Configures whether Camunda receives data collection of the process engine setup and usage.",
				"responses": {
					"401": {
						"description": "If the user who perform the operation is not a <b>camunda-admin<\/b> user.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [],
				"tags": ["Telemetry"]
			},
			"get": {
				"summary": "Fetch Telemetry Configuration",
				"operationId": "getTelemetryConfiguration",
				"description": "Fetches Telemetry Configuration.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/TelemetryConfigurationDto"},
							"examples": {"example-1": {
								"summary": "Status 200 Response",
								"description": "The Response content of a status 200",
								"value": {"enableTelemetry": true}
							}}
						}}
					},
					"401": {
						"description": "If the user who perform the operation is not a <b>camunda-admin<\/b> user.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [],
				"tags": ["Telemetry"]
			}
		},
		"/decision-definition/key/{key}/diagram": {"get": {
			"summary": "Get Diagram By Key",
			"operationId": "getDecisionDefinitionDiagramByKey",
			"description": "Returns the diagram for the latest version of the decision definition which belongs to no tenant",
			"responses": {
				"200": {
					"description": "Request successful. The image diagram of this process.",
					"content": {
						"application/octet-stream": {"schema": {
							"format": "binary",
							"description": "defaults to `application/octet-stream` if the file suffix is unknown",
							"type": "string"
						}},
						"*/*": {"schema": {
							"format": "binary",
							"description": "Files with MIME type information image/png, image/gif, ... ",
							"type": "string"
						}}
					}
				},
				"204": {"description": "The decision definition doesn't have an associated diagram."},
				"404": {
					"description": "Decision definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the decision definition (the latest version thereof) to be retrieved.",
				"required": true
			}],
			"tags": ["Decision Definition"]
		}},
		"/job/{id}/duedate": {"put": {
			"summary": "Set Job Due Date",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/JobDuedateDto"},
				"examples": {"example-1": {
					"summary": "PUT `/job/aJobId/duedate`",
					"value": {
						"duedate": "2013-08-13T18:43:28.000+0200",
						"cascade": false
					}
				}}
			}}},
			"operationId": "setJobDuedate",
			"description": "Updates the due date of a job by id.",
			"responses": {
				"500": {
					"description": "The due date could not be set successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."},
				"404": {
					"description": "Job with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the job to be updated.",
				"required": true
			}],
			"tags": ["Job"]
		}},
		"/deployment": {"get": {
			"summary": "Get List",
			"operationId": "getDeployments",
			"description": "Queries for deployments that fulfill given parameters. Parameters may be the properties of deployments,\nsuch as the id or name or a range of the deployment time. The size of the result set can be retrieved by\nusing the [Get Deployment count](https://docs.camunda.org/manual/7.19/reference/rest/deployment/get-query-count/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/DeploymentDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/deployment?name=deploymentName`",
							"value": [{
								"name": "deploymentName",
								"tenantId": null,
								"id": "someId",
								"source": "process application",
								"deploymentTime": "2013-04-23T13:42:43.000+0200"
							}]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,\nbut no `sortBy`, or if an invalid operator for variable comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "id",
					"description": "Filter by deployment id"
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "name",
					"description": "Filter by the deployment name. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "nameLike",
					"description": "Filter by the deployment name that the parameter is a substring of. The parameter can include the\nwildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains\n(`%`name`%`)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "source",
					"description": "Filter by the deployment source."
				},
				{
					"schema": {
						"default": false,
						"type": "boolean"
					},
					"in": "query",
					"name": "withoutSource",
					"description": "Filter by the deployment source whereby source is equal to `null`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A deployment must have one of the given tenant ids."
				},
				{
					"schema": {
						"default": false,
						"type": "boolean"
					},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include deployments which belong to no tenant. Value may only be `true`, as `false` is the default\nbehavior."
				},
				{
					"schema": {
						"default": false,
						"type": "boolean"
					},
					"in": "query",
					"name": "includeDeploymentsWithoutTenantId",
					"description": "Include deployments which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may\nonly be `true`, as `false` is the default behavior."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "after",
					"description": "Restricts to all deployments after the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "before",
					"description": "Restricts to all deployments before the given date.\nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"id",
							"name",
							"deploymentTime",
							"tenantId"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Deployment"]
		}},
		"/event-subscription/count": {"get": {
			"summary": "Get List Count",
			"operationId": "getEventSubscriptionsCount",
			"description": "Queries for the number of event subscriptions that fulfill given parameters.\nTakes the same parameters as the\n[Get Event Subscriptions](https://docs.camunda.org/manual/7.19/reference/rest/event-subscription/get-query/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/event-subscription/count`",
							"value": {"count": 1}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "eventSubscriptionId",
					"description": "Only select subscription with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "eventName",
					"description": "Only select subscriptions for events with the given name."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"message",
							"signal",
							"compensate",
							"conditional"
						]
					},
					"in": "query",
					"name": "eventType",
					"description": "Only select subscriptions for events with the given type.\nValid values: `message`, `signal`, `compensate` and `conditional`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "executionId",
					"description": "Only select subscriptions that belong to an execution with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Only select subscriptions that belong to a process instance with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityId",
					"description": "Only select subscriptions that belong to an activity with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids.\nOnly select subscriptions that belong to one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only select subscriptions which have no tenant id.\nValue may only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeEventSubscriptionsWithoutTenantId",
					"description": "Select event subscriptions which have no tenant id.\nCan be used in combination with tenantIdIn parameter.\nValue may only be `true`, as `false` is the default behavior."
				}
			],
			"tags": ["Event Subscription"]
		}},
		"/group": {
			"post": {
				"summary": "Get List (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/GroupQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/group`",
						"value": {"name": "Sales"}
					}}
				}}},
				"operationId": "postQueryGroups",
				"description": "Queries for a list of groups using a list of parameters.\nThe size of the result set can be retrieved by using the\n[Get Group Count (POST)](https://docs.camunda.org/manual/7.19/reference/rest/group/post-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/GroupDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "POST `/group`",
								"value": [{
									"name": "Sales",
									"id": "sales",
									"type": "Organizational Unit"
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,\nbut no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Group"]
			},
			"get": {
				"summary": "Get List",
				"operationId": "getQueryGroups",
				"description": "Queries for a list of groups using a list of parameters. The size of the result set can be retrieved\nby using the [Get Group Count](https://docs.camunda.org/manual/7.19/reference/rest/group/get-query-count) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/GroupDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "GET `/group?name=Sales`",
								"value": [{
									"name": "Sales",
									"id": "sales",
									"type": "Organizational Unit"
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,\nbut no `sortBy` is specified. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {
							"type": "string",
							"enum": [
								"id",
								"name",
								"type"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "id",
						"description": "Filter by the id of the group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "idIn",
						"description": "Filter by a comma seperated list of group ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "name",
						"description": "Filter by the name of the group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "nameLike",
						"description": "Filter by the name that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "type",
						"description": "Filter by the type of the group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "member",
						"description": "Only retrieve groups where the given user id is a member of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "memberOfTenant",
						"description": "Only retrieve groups which are members of the given tenant."
					}
				],
				"tags": ["Group"]
			},
			"options": {
				"summary": "Group Resource Options",
				"operationId": "availableGroupOperations",
				"description": "The `/group` resource supports two custom OPTIONS requests, this one for the resource as such and one for\nindividual group instances. The OPTIONS request allows checking for the set of available operations that\nthe currently authenticated user can perform on the `/group` resource. If the user can perform an operation\nor not may depend on various things, including the users authorizations to interact with this resource and\nthe internal configuration of the process engine.",
				"responses": {"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "OPTIONS `/group`",
							"value": {"links": [
								{
									"method": "GET",
									"rel": "list",
									"href": "http://localhost:8080/engine-rest/group"
								},
								{
									"method": "GET",
									"rel": "count",
									"href": "http://localhost:8080/engine-rest/group/count"
								},
								{
									"method": "POST",
									"rel": "create",
									"href": "http://localhost:8080/engine-rest/group/create"
								}
							]}
						}}
					}}
				}},
				"tags": ["Group"]
			}
		},
		"/job-definition/suspended": {"put": {
			"summary": "Activate/Suspend Job Definitions",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/JobDefinitionsSuspensionStateDto"},
				"examples": {
					"example-1": {
						"summary": "suspend by process definition id",
						"description": "PUT `/job-definition/suspended`",
						"value": {
							"processDefinitionId": "aProcessDefinitionId",
							"executionDate": "2013-11-21T10:49:45.000+0200",
							"includeJobs": true,
							"suspended": true
						}
					},
					"example-2": {
						"summary": "suspend by process definition key",
						"description": "PUT `/job-definition/suspended`",
						"value": {
							"executionDate": "2013-11-21T10:49:45.000+0200",
							"includeJobs": true,
							"suspended": true,
							"processDefinitionKey": "aProcessDefinitionKey"
						}
					}
				}
			}}},
			"operationId": "updateSuspensionStateJobDefinitions",
			"description": "Activates or suspends job definitions with the given process definition id or process definition key.",
			"responses": {
				"400": {
					"description": "Returned if some of the request parameters are invalid, for example if the provided\n`executionDate` parameter doesn't have the expected format. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."}
			},
			"tags": ["Job Definition"]
		}},
		"/task/{id}/comment/create": {"post": {
			"summary": "Create",
			"requestBody": {
				"description": "**Note:** Only the `message` and `processInstanceId` properties will be used. Every other property passed to this endpoint will be ignored.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/CommentDto"},
					"examples": {"example-1": {
						"summary": "POST /task/aTaskId/comment/create",
						"value": {
							"processInstanceId": "96dc383f-23eb-11e6-8e4a-f6aefe19b687",
							"message": "a task comment"
						}
					}}
				}}
			},
			"operationId": "createComment",
			"description": "Creates a comment for a task by id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CommentDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"value": {
								"processInstanceId": "96dc383f-23eb-11e6-8e4a-f6aefe19b687",
								"links": [{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:38080/rest-test/task/aTaskId/comment/aTaskCommentId"
								}],
								"rootProcessInstanceId": "aRootProcessInstanceId",
								"id": "aTaskCommentId",
								"time": "2013-01-02T21:37:03.887+0200",
								"message": "comment message",
								"userId": "userId",
								"taskId": "aTaskId",
								"removalTime": "2018-02-10T14:33:19.000+0200"
							}
						}}
					}}
				},
				"400": {
					"description": "The task does not exist or no comment message was submitted. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "The history of the engine is disabled. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to add the comment to.",
				"required": true
			}],
			"tags": ["Task Comment"]
		}},
		"/deployment/{id}": {
			"get": {
				"summary": "Get",
				"operationId": "getDeployment",
				"description": "Retrieves a deployment by id, according to the `Deployment` interface of the engine.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/DeploymentDto"},
							"examples": {"example-1": {
								"summary": "GET `/deployments/someDeploymentId`",
								"value": {
									"name": "deploymentName",
									"id": "someDeploymentId",
									"source": "process application",
									"deploymentTime": "2013-04-23T13:42:43.000+0200"
								}
							}}
						}}
					},
					"404": {
						"description": "Deployment with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the deployment.",
					"required": true
				}],
				"tags": ["Deployment"]
			},
			"delete": {
				"summary": "Delete",
				"operationId": "deleteDeployment",
				"description": "Deletes a deployment by id.",
				"responses": {
					"204": {"description": "Request successful."},
					"404": {
						"description": "A Deployment with the provided id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the deployment to be deleted.",
						"required": true
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "cascade",
						"description": "`true`, if all process instances, historic process instances and jobs for this deployment\nshould be deleted."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipCustomListeners",
						"description": "`true`, if only the built-in ExecutionListeners should be notified with the end event."
					},
					{
						"schema": {
							"default": false,
							"type": "boolean"
						},
						"in": "query",
						"name": "skipIoMappings",
						"description": "`true`, if all input/output mappings should not be invoked."
					}
				],
				"tags": ["Deployment"]
			}
		},
		"/process-instance/job-retries-historic-query-based": {"post": {
			"summary": "Set Job Retries Async Historic Query Based (POST)",
			"requestBody": {
				"description": "Please note that if both processInstances and historicProcessInstanceQuery are provided,\nthen the resulting execution will be performed on the union of these sets.\n**Unallowed property**: `processInstanceQuery`",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/SetJobRetriesByProcessDto"},
					"examples": {"example-1": {
						"summary": "POST `/process-instance/job-retries-historic-query-based` Request Body 1",
						"value": {
							"retries": 5,
							"processInstances": [
								"aProcess",
								"secondProcess"
							],
							"dueDate": "2017-04-06T13:57:45.000+0200",
							"historicProcessInstanceQuery": {"startedBefore": "2017-04-28T11:24:37.769+0200"}
						}
					}}
				}}
			},
			"operationId": "setRetriesByProcessHistoricQueryBased",
			"description": "Create a batch to set retries of jobs asynchronously based on a historic process instance query.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"createUserId": "demo",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"jobsCreated": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "Bad Request\nReturned if some of the query parameters are invalid, for example if neither processInstanceIds, nor historicProcessInstanceQuery is present.\nOr if the retry count is not specified.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Process Instance"]
		}},
		"/history/activity-instance/count": {
			"post": {
				"summary": "Get List Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricActivityInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/activity-instance/count`",
						"value": {"activityType": "userTask"}
					}}
				}}},
				"operationId": "queryHistoricActivityInstancesCount",
				"description": "Queries for the number of historic activity instances that fulfill the given parameters.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200 Response 1",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Historic Activity Instance"]
			},
			"get": {
				"summary": "Get List Count",
				"operationId": "getHistoricActivityInstancesCount",
				"description": "Queries for the number of historic activity instances that fulfill the given parameters.\nTakes the same parameters as the [Get Historic Activity Instance](https://docs.camunda.org/manual/7.19/reference/rest/history/activity-instance/get-activity-instance-query/)  method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "Status 200 response",
								"description": "Response for GET `/history/activity-instance/count?activityType=userTask`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Bad Request\nReturned if some of the query parameters are invalid.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceId",
						"description": "Filter by activity instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by process definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Filter by the id of the execution that executed the activity instance."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityId",
						"description": "Filter by the activity id (according to BPMN 2.0 XML)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityName",
						"description": "Filter by the activity name (according to BPMN 2.0 XML)."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityType",
						"description": "Filter by activity type."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskAssignee",
						"description": "Only include activity instances that are user tasks and assigned to a given user."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "finished",
						"description": "Only include finished activity instances.\nValue may only be `true`, as `false` behaves the same as when the property is not set."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "unfinished",
						"description": "Only include unfinished activity instances.\nValue may only be `true`, as `false` behaves the same as when the property is not set."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "canceled",
						"description": "Only include canceled activity instances.\nValue may only be `true`, as `false` behaves the same as when the property is not set."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "completeScope",
						"description": "Only include activity instances which completed a scope.\nValue may only be `true`, as `false` behaves the same as when the property is not set."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedBefore",
						"description": "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedAfter",
						"description": "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedBefore",
						"description": "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedAfter",
						"description": "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of ids. An activity instance must have one of the given tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior."
					}
				],
				"tags": ["Historic Activity Instance"]
			}
		},
		"/batch": {"get": {
			"summary": "Get List",
			"operationId": "getBatches",
			"description": "Queries for batches that fulfill given parameters. Parameters may be the properties of batches, such as the id or type.\nThe size of the result set can be retrieved by using the\n[Get Batch Count](https://docs.camunda.org/manual/7.19/reference/rest/batch/get-query-count/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/BatchDto"}
						},
						"examples": {"example-1": {
							"description": "Response for GET `/batch?type=aBatchType&sortBy=batchId&sortOrder=asc`",
							"value": [{
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"createUserId": "aUserId",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"jobsCreated": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId",
								"suspended": false
							}]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid,\nfor example if a `sortOrder` parameter is supplied, but no `sortBy`.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {
						"type": "string",
						"enum": [
							"batchId",
							"tenantId"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "batchId",
					"description": "Filter by batch id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "type",
					"description": "Filter by batch type.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/batch/#creating-a-batch)\nfor more information about batch types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of `Strings`. A batch matches if it has one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include batches which belong to no tenant.\nValue can effectively only be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "suspended",
					"description": "A `Boolean` value which indicates whether only active or suspended batches should be included.\nWhen the value is set to `true`, only suspended batches will be returned and\nwhen the value is set to `false`, only active batches will be returned."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "createdBy",
					"description": "Only include batches that were started by this user id."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedBefore",
					"description": "Only include batches that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedAfter",
					"description": "Only include batches that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withFailures",
					"description": "Only include batches having jobs with failures.\nValue can only be `true`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutFailures",
					"description": "Only include batches having jobs without failures.\nValue can only be `true`."
				}
			],
			"tags": ["Batch"]
		}},
		"/task/{id}/identity-links/delete": {"post": {
			"summary": "Delete",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/IdentityLinkDto"},
				"examples": {"example-1": {
					"summary": "POST `/task/anId/identityLinks/delete`",
					"value": {
						"groupId": "theOldGroupId",
						"type": "candidate"
					}
				}}
			}}},
			"operationId": "deleteIdentityLink",
			"description": "Removes an identity link from a task by id",
			"responses": {
				"400": {
					"description": "Task with given id does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for\nthe error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to remove a link from.",
				"required": true
			}],
			"tags": ["Task Identity Link"]
		}},
		"/history/job-log": {
			"post": {
				"summary": "Get Job Logs (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricJobLogQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/job-log`",
						"value": {"jobId": "aJobId"}
					}}
				}}},
				"operationId": "queryHistoricJobLogs",
				"description": "Queries for historic job logs that fulfill the given parameters.\nThis method is slightly more powerful than the\n[Get Job Logs](https://docs.camunda.org/manual/7.19/reference/rest/history/job-log/get-job-log-query/)\nmethod because it allows filtering by historic job logs values of the\ndifferent types `String`, `Number` or `Boolean`.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricJobLogDto"}
							},
							"examples": {"example-1": {
								"summary": "POST `/history/job-log`",
								"description": "POST `/history/job-log`",
								"value": [{
									"deletionLog": false,
									"jobDueDate": null,
									"successLog": false,
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"processDefinitionKey": "aProcessDefinitionKey",
									"failureLog": false,
									"activityId": "serviceTask",
									"hostname": "aHostname",
									"deploymentId": "aDeploymentId",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "someId",
									"jobType": "message",
									"jobPriority": 15,
									"timestamp": "2015-01-15T15:22:20.000+0200",
									"processInstanceId": "aProcessInstanceId",
									"processDefinitionId": "aProcessDefinitionId",
									"jobDefinitionId": "aJobDefinitionId",
									"creationLog": true,
									"jobExceptionMessage": null,
									"jobId": "aJobId",
									"jobRetries": 3,
									"executionId": "anExecutionId",
									"jobHandlerType": "async-continuation",
									"tenantId": null,
									"failedActivityId": null
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Historic Job Log"]
			},
			"get": {
				"summary": "Get Job Logs",
				"operationId": "getHistoricJobLogs",
				"description": "Queries for historic job logs that fulfill the given parameters.\nThe size of the result set can be retrieved by using the\n[Get Job Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/job-log/get-job-log-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricJobLogDto"}
							},
							"examples": {"example-1": {
								"summary": "GET `/history/job-log?jobId=aJobId`",
								"description": "GET `/history/job-log?jobId=aJobId`",
								"value": [{
									"deletionLog": false,
									"jobDueDate": null,
									"successLog": false,
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"processDefinitionKey": "aProcessDefinitionKey",
									"failureLog": false,
									"activityId": "serviceTask",
									"hostname": "aHostname",
									"deploymentId": "aDeploymentId",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "someId",
									"jobType": "message",
									"jobPriority": 15,
									"timestamp": "2015-01-15T15:22:20.000+0200",
									"processInstanceId": "aProcessInstanceId",
									"processDefinitionId": "aProcessDefinitionId",
									"jobDefinitionId": "aJobDefinitionId",
									"creationLog": true,
									"jobExceptionMessage": null,
									"jobId": "aJobId",
									"jobRetries": 3,
									"executionId": "anExecutionId",
									"jobHandlerType": "async-continuation",
									"tenantId": null,
									"failedActivityId": null
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "logId",
						"description": "Filter by historic job log id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobId",
						"description": "Filter by job id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobExceptionMessage",
						"description": "Filter by job exception message."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobDefinitionId",
						"description": "Filter by job definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobDefinitionType",
						"description": "Filter by job definition type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/the-job-executor/#job-creation)\nfor more information about job definition types."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "jobDefinitionConfiguration",
						"description": "Filter by job definition configuration."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityIdIn",
						"description": "Only include historic job logs which belong to one of the passed activity ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "failedActivityIdIn",
						"description": "Only include historic job logs which belong to failures of one of the passed activity ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionIdIn",
						"description": "Only include historic job logs which belong to one of the passed execution ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by process definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by process definition key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "deploymentId",
						"description": "Filter by deployment id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Only include historic job log entries which belong to one of the passed and comma-\nseparated tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic job log entries that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "hostname",
						"description": "Filter by hostname."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "jobPriorityLowerThanOrEquals",
						"description": "Only include logs for which the associated job had a priority lower than or equal to the\ngiven value. Value must be a valid `long` value."
					},
					{
						"schema": {
							"format": "int64",
							"type": "integer"
						},
						"in": "query",
						"name": "jobPriorityHigherThanOrEquals",
						"description": "Only include logs for which the associated job had a priority higher than or equal to the\ngiven value. Value must be a valid `long` value."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "creationLog",
						"description": "Only include creation logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "failureLog",
						"description": "Only include failure logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "successLog",
						"description": "Only include success logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deletionLog",
						"description": "Only include deletion logs. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"timestamp",
								"jobId",
								"jobDefinitionId",
								"jobDueDate",
								"jobRetries",
								"jobPriority",
								"activityId",
								"executionId",
								"processInstanceId",
								"processDefinitionId",
								"processDefinitionKey",
								"deploymentId",
								"hostname",
								"occurrence",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Historic Job Log"]
			}
		},
		"/history/process-instance/{id}/variable-instances": {"delete": {
			"summary": "Delete Variable Instances",
			"operationId": "deleteHistoricVariableInstancesOfHistoricProcessInstance",
			"description": "Deletes all variables of a process instance from the history by id.",
			"responses": {
				"204": {"description": "Request successful."},
				"404": {
					"description": "Not found\nHistoric process instance with given id does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#parse-exceptions) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process instance for which all historic variables are to be deleted.",
				"required": true
			}],
			"tags": ["Historic Process Instance"]
		}},
		"/job/{id}/execute": {"post": {
			"summary": "Execute Job",
			"operationId": "executeJob",
			"description": "Executes a job by id. **Note:** The execution of the job happens synchronously in\nthe same thread.",
			"responses": {
				"500": {
					"description": "The job could not be executed successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."},
				"404": {
					"description": "Job with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the job to be executed.",
				"required": true
			}],
			"tags": ["Job"]
		}},
		"/task/create": {"post": {
			"summary": "Create",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/TaskDto"},
				"examples": {"example-1": {
					"summary": "POST /task/create",
					"value": {
						"owner": "mary",
						"delegationState": "PENDING",
						"followUp": "2014-08-25T10:00:00.000+0200",
						"due": "2014-08-30T10:00:00.000+0200",
						"parentTaskId": "aParentTaskId",
						"caseInstanceId": "aCaseInstanceId",
						"name": "My Task",
						"tenantId": null,
						"description": "This have to be done very urgent",
						"id": "aTaskId",
						"assignee": "peter",
						"priority": 30
					}
				}}
			}}},
			"operationId": "createTask",
			"description": "Creates a new task.",
			"responses": {
				"400": {
					"description": "Returned if a not valid `delegationState` is supplied. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."}
			},
			"tags": ["Task"]
		}},
		"/execution/{id}/create-incident": {"post": {
			"summary": "Create Incident",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/CreateIncidentDto"},
				"examples": {"example-1": {
					"summary": "POST `/execution/anExecutionId/create-incident`",
					"value": {
						"configuration": "aConfiguration",
						"incidentType": "aType"
					}
				}}
			}}},
			"operationId": "createIncident",
			"description": "Creates a custom incident with given properties.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/IncidentDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "POST `/execution/anExecutionId/create-incident`",
							"value": {
								"processDefinitionId": "aProcDefId",
								"processInstanceId": "aProcInstId",
								"jobDefinitionId": "aJobDefinitionId",
								"incidentMessage": "anIncidentMessage",
								"configuration": "aConfiguration",
								"causeIncidentId": "aCauseIncidentId",
								"incidentType": "failedJob",
								"executionId": "anExecutionId",
								"activityId": "serviceTask",
								"incidentTimestamp": "2014-03-01T08:00:00.000+0200",
								"rootCauseIncidentId": "aRootCauseIncidentId",
								"tenantId": null,
								"id": "anIncidentId",
								"failedActivityId": "serviceTask"
							}
						}}
					}}
				},
				"400": {
					"description": "Returned if the incident type is null, the execution does not exist or the\nexecution is not related to any activity.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the execution to create a new incident for.",
				"required": true
			}],
			"tags": ["Execution"]
		}},
		"/task/{id}/attachment/create": {"post": {
			"summary": "Create",
			"requestBody": {"content": {"multipart/form-data": {
				"schema": {"$ref": "#/components/schemas/MultiFormAttachmentDto"},
				"examples": {"example-1": {
					"summary": "POST /task/aTaskId/attachment/create",
					"description": "Post data for a new task attachment.",
					"value": "------------------------------925df49a954b\n                        Content-Disposition: form-data; name=\"url\"\n\n                        http://my-attachment-content-url.de\n                        ------------------------------925df49a954b\n                        Content-Disposition: form-data; name=\"attachment-name\"\n\n                        attachmentName\n                        ------------------------------925df49a954b\n                        Content-Disposition: form-data; name=\"attachment-description\"\n\n                        attachmentDescription\n                        ------------------------------925df49a954b\n                        Content-Disposition: form-data; name=\"attachment-type\"\n\n                        attachmentType\n                        ------------------------------925df49a954b--"
				}}
			}}},
			"operationId": "addAttachment",
			"description": "Creates an attachment for a task.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/AttachmentDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"value": {
								"createTime": "2017-02-10T14:33:19.000+0200",
								"name": "attachmentName",
								"description": "attachmentDescription",
								"rootProcessInstanceId": "aRootProcessInstanceId",
								"links": [{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:38080/rest-test/task/aTaskId/attachment/aTaskAttachmentId"
								}],
								"id": "attachmentId",
								"type": "attachmentType",
								"taskId": "aTaskId",
								"url": "http://my-attachment-content-url.de",
								"removalTime": "2018-02-10T14:33:19.000+0200"
							}
						}}
					}}
				},
				"400": {
					"description": "The task does not exists or task id is null. No content or url to remote content exists. See the\n[Introduction](/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "The history of the engine is disabled. See the [Introduction](/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to add the attachment to.",
				"required": true
			}],
			"tags": ["Task Attachment"]
		}},
		"/history/activity-instance/{id}": {"get": {
			"summary": "Get",
			"operationId": "getHistoricActivityInstance",
			"description": "Retrieves a historic activity instance by id, according to the `HistoricActivityInstance` interface in the engine.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/HistoricActivityInstanceDto"},
						"examples": {"example-1": {
							"summary": "GET `/history/activity-instance/aActivityInstId`",
							"value": {
								"processDefinitionId": "aProcDefId",
								"processInstanceId": "aProcInstId",
								"durationInMillis": 2000,
								"activityName": "anActivityName",
								"completeScope": false,
								"removalTime": "2018-02-10T14:33:19.000+0200",
								"activityId": "anActivity",
								"canceled": true,
								"executionId": "anExecutionId",
								"calledCaseInstanceId": null,
								"tenantId": null,
								"startTime": "2013-04-23T11:20:43.000+0200",
								"rootProcessInstanceId": "aRootProcessInstanceId",
								"id": "aActivityInstId",
								"assignee": "peter",
								"endTime": "2013-04-23T18:42:43.000+0200",
								"activityType": "userTask",
								"calledProcessInstanceId": "aHistoricCalledProcessInstanceId",
								"taskId": "aTaskId",
								"parentActivityInstanceId": "aHistoricParentActivityInstanceId"
							}
						}}
					}}
				},
				"404": {
					"description": "Not Found\nHistoric activity instance with given id does not exist.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the historic activity instance to be retrieved.",
				"required": true
			}],
			"tags": ["Historic Activity Instance"]
		}},
		"/history/task": {
			"post": {
				"summary": "Get Tasks (Historic) (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricTaskInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/task`",
						"value": {
							"taskVariables": [
								{
									"name": "varName",
									"value": "varValue",
									"operator": "eq"
								},
								{
									"name": "anotherVarName",
									"value": 30,
									"operator": "neq"
								}
							],
							"sorting": [
								{
									"sortOrder": "asc",
									"sortBy": "priority"
								},
								{
									"sortOrder": "desc",
									"sortBy": "duration"
								}
							],
							"priority": 10
						}
					}}
				}}},
				"operationId": "queryHistoricTaskInstances",
				"description": "Queries for historic tasks that fulfill the given parameters. This method is slightly more powerful\nthan the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.19/reference/rest/history/task/get-task-query/) method because\nit allows filtering by multiple process or task variables of types `String`, `Number` or `Boolean`.\nThe size of the result set can be retrieved by using the\n[Get Task Count (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/task/post-task-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricTaskInstanceDto"}
							},
							"examples": {"example-1": {
								"summary": "POST `/history/task`",
								"description": "POST `/history/task`",
								"value": [{
									"owner": "anOwner",
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"caseExecutionId": "aCaseExecution",
									"caseDefinitionId": "aCaseDefId",
									"parentTaskId": "aParentId",
									"caseInstanceId": "aCaseInstId",
									"followUp:": "2013-01-23T13:44:42.000+0200",
									"description": "aDescription",
									"activityInstanceId": "anActInstId",
									"priority": 10,
									"deleteReason": "aDeleteReason",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"duration": 2000,
									"executionId": "anExecution",
									"taskDefinitionKey": "aTaskDefinitionKey",
									"due": "2013-01-23T13:49:42.000+0200",
									"name": "aName",
									"tenantId": null,
									"startTime": "2013-01-23T13:42:42.000+0200",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "anId",
									"assignee": "anAssignee",
									"endTime": "2013-01-23T13:45:42.000+0200"
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Historic Task Instance"]
			},
			"get": {
				"summary": "Get Tasks (Historic)",
				"operationId": "getHistoricTaskInstances",
				"description": "Queries for historic tasks that fulfill the given parameters. The size of the result\nset can be retrieved by using the\n[Get Task Count](https://docs.camunda.org/manual/7.19/reference/rest/history/task/get-task-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricTaskInstanceDto"}
							},
							"examples": {"example-1": {
								"summary": "GET `/history/task?taskAssignee=anAssignee&priority=42`",
								"description": "GET `/history/task?taskAssignee=anAssignee&priority=42`",
								"value": [{
									"owner": "anOwner",
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"caseExecutionId": "aCaseExecution",
									"caseDefinitionId": "aCaseDefId",
									"parentTaskId": "aParentId",
									"caseInstanceId": "aCaseInstId",
									"followUp:": "2013-01-23T13:44:42.000+0200",
									"description": "aDescription",
									"activityInstanceId": "anActInstId",
									"priority": 42,
									"deleteReason": "aDeleteReason",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"duration": 2000,
									"executionId": "anExecution",
									"taskDefinitionKey": "aTaskDefinitionKey",
									"due": "2013-01-23T13:49:42.000+0200",
									"name": "aName",
									"tenantId": null,
									"startTime": "2013-01-23T13:42:42.000+0200",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "anId",
									"assignee": "anAssignee",
									"endTime": "2013-01-23T13:45:42.000+0200"
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskId",
						"description": "Filter by task id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskParentTaskId",
						"description": "Filter by parent task id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKey",
						"description": "Filter by process instance business key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyIn",
						"description": "Filter by process instances with one of the give business keys.\nThe keys need to be in a comma-separated list."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyLike",
						"description": "Filter by  process instance business key that has the parameter value as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Filter by the id of the execution that executed the task."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by process definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Restrict to tasks that belong to a process definition with the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionName",
						"description": "Restrict to tasks that belong to a process definition with the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Filter by case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseExecutionId",
						"description": "Filter by the id of the case execution that executed the task."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionId",
						"description": "Filter by case definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionKey",
						"description": "Restrict to tasks that belong to a case definition with the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionName",
						"description": "Restrict to tasks that belong to a case definition with the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceIdIn",
						"description": "Only include tasks which belong to one of the passed comma-separated activity instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskName",
						"description": "Restrict to tasks that have the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskNameLike",
						"description": "Restrict to tasks that have a name with the given parameter value as substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDescription",
						"description": "Restrict to tasks that have the given description."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDescriptionLike",
						"description": "Restrict to tasks that have a description that has the parameter value as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDefinitionKey",
						"description": "Restrict to tasks that have the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDefinitionKeyIn",
						"description": "Restrict to tasks that have one of the passed comma-separated task definition keys."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDeleteReason",
						"description": "Restrict to tasks that have the given delete reason."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDeleteReasonLike",
						"description": "Restrict to tasks that have a delete reason that has the parameter value as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskAssignee",
						"description": "Restrict to tasks that the given user is assigned to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskAssigneeLike",
						"description": "Restrict to tasks that are assigned to users with the parameter value as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskOwner",
						"description": "Restrict to tasks that the given user owns."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskOwnerLike",
						"description": "Restrict to tasks that are owned by users with the parameter value as a substring."
					},
					{
						"schema": {
							"format": "int32",
							"type": "integer"
						},
						"in": "query",
						"name": "taskPriority",
						"description": "Restrict to tasks that have the given priority."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "assigned",
						"description": "If set to `true`, restricts the query to all tasks that are assigned."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "unassigned",
						"description": "If set to `true`, restricts the query to all tasks that are unassigned."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "finished",
						"description": "Only include finished tasks. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "unfinished",
						"description": "Only include unfinished tasks. Value may only be `true`, as `false` is the default\nbehavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "processFinished",
						"description": "Only include tasks of finished processes. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "processUnfinished",
						"description": "Only include tasks of unfinished processes. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskDueDate",
						"description": "Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskDueDateBefore",
						"description": "Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskDueDateAfter",
						"description": "Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTaskDueDate",
						"description": "Only include tasks which have no due date. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskFollowUpDate",
						"description": "Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskFollowUpDateBefore",
						"description": "Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskFollowUpDateAfter",
						"description": "Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedBefore",
						"description": "Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedAfter",
						"description": "Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedBefore",
						"description": "Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedAfter",
						"description": "Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of tenant ids. A task instance must have one of the given\ntenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic task instances that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskVariables",
						"description": "Only include tasks that have variables with certain values. Variable filtering expressions are\ncomma-separated and are structured as follows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n**Note:** Values are always treated as `String` objects on server side.\n\n\nValid operator values are:\n* `eq` - equal to;\n* `neq` - not equal to;\n* `gt` - greater than;\n* `gteq` - greater than or equal to;\n* `lt` - lower than;\n* `lteq` - lower than or equal to;\n* `like`.\n\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processVariables",
						"description": "Only include tasks that belong to process instances that have variables with certain\nvalues. Variable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n**Note:** Values are always treated as `String` objects on server side.\n\n\nValid operator values are:\n* `eq` - equal to;\n* `neq` - not equal to;\n* `gt` - greater than;\n* `gteq` - greater than or equal to;\n* `lt` - lower than;\n* `lteq` - lower than or equal to;\n* `like`;\n* `notLike`.\n\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match the variable name provided in `taskVariables` and `processVariables` case-\ninsensitively. If set to `true` **variableName** and **variablename** are\ntreated as equal."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match the variable value provided in `taskVariables` and `processVariables` case-\ninsensitively. If set to `true` **variableValue** and **variablevalue** are\ntreated as equal."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskInvolvedUser",
						"description": "Restrict to tasks with a historic identity link to the given user."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskInvolvedGroup",
						"description": "Restrict to tasks with a historic identity link to the given group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskHadCandidateUser",
						"description": "Restrict to tasks with a historic identity link to the given candidate user."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskHadCandidateGroup",
						"description": "Restrict to tasks with a historic identity link to the given candidate group."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withCandidateGroups",
						"description": "Only include tasks which have a candidate group. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutCandidateGroups",
						"description": "Only include tasks which have no candidate group. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"taskId",
								"activityInstanceId",
								"processDefinitionId",
								"processInstanceId",
								"executionId",
								"duration",
								"endTime",
								"startTime",
								"taskName",
								"taskDescription",
								"assignee",
								"owner",
								"dueDate",
								"followUpDate",
								"deleteReason",
								"taskDefinitionKey",
								"priority",
								"caseDefinitionId",
								"caseInstanceId",
								"caseExecutionId",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Historic Task Instance"]
			}
		},
		"/user/count": {"get": {
			"summary": "Get List Count",
			"operationId": "getUserCount",
			"description": "Queries for the number of deployments that fulfill given parameters. Takes the same parameters as the\n[Get Users](https://docs.camunda.org/manual/7.19/reference/rest/user/get-query/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/user/count?firstName=John`",
							"value": {"count": 2}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example, if an invalid operator for variable\ncomparison is used. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "id",
					"description": "Filter by user id"
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "idIn",
					"description": "Filter by a comma-separated list of user ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "firstName",
					"description": "Filter by the first name of the user. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "firstNameLike",
					"description": "Filter by the first name that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "lastName",
					"description": "Filter by the last name of the user. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "lastNameLike",
					"description": "Filter by the last name that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "email",
					"description": "Filter by the email of the user. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "emailLike",
					"description": "Filter by the email that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "memberOfGroup",
					"description": "Filter for users which are members of the given group."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "memberOfTenant",
					"description": "Filter for users which are members of the given tenant."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "potentialStarter",
					"description": "Only select Users that are potential starter for the given process definition."
				}
			],
			"tags": ["User"]
		}},
		"/message": {"post": {
			"summary": "Correlate",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/CorrelationMessageDto"},
				"examples": {
					"example-3": {
						"summary": "POST /condition",
						"description": "Correlate with result and variables",
						"value": {
							"messageName": "aMessage",
							"businessKey": "aBusinessKey",
							"correlationKeys": {"aVariable": {
								"type": "String",
								"value": "aValue"
							}},
							"processVariables": {
								"aVariable": {
									"valueInfo": {"transient": true},
									"type": "String",
									"value": "aNewValue"
								},
								"anotherVariable": {
									"type": "Boolean",
									"value": true
								}
							},
							"resultEnabled": true,
							"variablesInResultEnabled": true
						}
					},
					"example-1": {
						"summary": "POST /condition",
						"description": "Correlate without result",
						"value": {
							"messageName": "aMessage",
							"businessKey": "aBusinessKey",
							"correlationKeys": {"aVariable": {
								"type": "String",
								"value": "aValue"
							}},
							"processVariables": {
								"aVariable": {
									"valueInfo": {"transient": true},
									"type": "String",
									"value": "aNewValue"
								},
								"anotherVariable": {
									"type": "Boolean",
									"value": true
								}
							}
						}
					},
					"example-2": {
						"summary": "POST /condition",
						"description": "Correlate with result",
						"value": {
							"messageName": "aMessage",
							"businessKey": "aBusinessKey",
							"correlationKeys": {"aVariable": {
								"type": "String",
								"value": "aValue"
							}},
							"processVariables": {
								"aVariable": {
									"valueInfo": {"transient": true},
									"type": "String",
									"value": "aNewValue"
								},
								"anotherVariable": {
									"type": "Boolean",
									"value": true
								}
							},
							"resultEnabled": true
						}
					}
				}
			}}},
			"operationId": "deliverMessage",
			"description": "Correlates a message to the process engine to either trigger a message start event or an intermediate message \ncatching event. Internally this maps to the engine's message correlation builder methods\n`MessageCorrelationBuilder#correlateWithResult()` and `MessageCorrelationBuilder#correlateAllWithResult()`.\nFor more information about the correlation behavior, see the [Message Events](https://docs.camunda.org/manual/7.19/bpmn20/events/message-events/)\nsection of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.19/reference/bpmn20/).",
			"responses": {
				"200": {
					"description": "Request successful. The property `resultEnabled` in the request body was `true`.\nThe `variables` property is only returned, if the property variablesInResultEnable`\nwas set to `true` in the request.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/MessageCorrelationResultWithVariableDto"}
						},
						"examples": {
							"example-1": {
								"summary": "Status 200 Response.",
								"description": "The Response content of a status 200. The property `variablesInResultEnabled` in the request body was `false` (Default).",
								"value": [{
									"execution": null,
									"processInstance": {
										"caseInstanceId": "aCaseInstId",
										"businessKey": "aKey",
										"ended": false,
										"tenantId": "aTenantId",
										"links": [],
										"id": "aProcInstId",
										"suspended": false,
										"definitionId": "aProcDefId"
									},
									"resultType": "ProcessDefinition"
								}]
							},
							"example-2": {
								"summary": "Status 200 Response.",
								"description": "The Response content of a status 200. The property `variablesInResultEnabled` in the request body was `true`.",
								"value": [{
									"execution": {
										"processInstanceId": "aProcInstId",
										"ended": false,
										"tenantId": "aTenantId",
										"id": "anExecutionId"
									},
									"variables": {
										"aVariable": {
											"valueInfo": {"transient": true},
											"type": "String",
											"value": "aNewValue"
										},
										"anotherVariable": {
											"type": "Boolean",
											"value": true
										}
									},
									"processInstance": null,
									"resultType": "Execution"
								}]
							}
						}
					}}
				},
				"400": {
					"description": "Returned if:\n* no `messageName` was supplied\n* both `tenantId` and `withoutTenantId` are supplied\n* the message has not been correlated to exactly one entity (execution or process definition)\n* the variable value or type is invalid, for example if the value could not be parsed to an Integer value or the passed variable type is not supported.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. The property `resultEnabled` in the request body was `false` (Default)."}
			},
			"tags": ["Message"]
		}},
		"/decision-requirements-definition": {"get": {
			"summary": "Get Decision Requirements Definitions",
			"operationId": "getDecisionRequirementsDefinitions",
			"description": "Queries for decision requirements definitions that fulfill given parameters.\nParameters may be the properties of decision requirements definitions, such as the name,\nkey or version.  The size of the result set can be retrieved by using the\n[Get Decision Requirements Definition Count](https://docs.camunda.org/manual/7.19/reference/rest/decision-requirements-definition/get-query-count/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/DecisionRequirementsDefinitionDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/decision-requirements-definition?key=dish&sortBy=version&sortOrder=asc`",
							"description": "GET `/decision-requirements-definition?key=dish&sortBy=version&sortOrder=asc`",
							"value": [{
								"resource": "dish.dmn",
								"deploymentId": "c627175e-41b7-11e6-b0ef-00aa004d0001",
								"name": "Dish",
								"tenantId": null,
								"id": "dish:1:c633c195-41b7-11e6-b0ef-00aa004d0001",
								"category": "drd-test",
								"version": 1,
								"key": "dish"
							}]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if\na `sortOrder` parameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionId",
					"description": "Filter by decision requirements definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionIdIn",
					"description": "Filter by decision requirements definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "name",
					"description": "Filter by decision requirements definition name."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "nameLike",
					"description": "Filter by decision requirements definition names that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "deploymentId",
					"description": "Filter by the id of the deployment a decision requirement definition belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "key",
					"description": "Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact\nmatch."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "keyLike",
					"description": "Filter by decision requirements definition keys that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "category",
					"description": "Filter by decision requirements definition category. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "categoryLike",
					"description": "Filter by decision requirements definition categories that the parameter is a substring\nof."
				},
				{
					"schema": {
						"format": "int32",
						"type": "integer"
					},
					"in": "query",
					"name": "version",
					"description": "Filter by decision requirements definition version."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "latestVersion",
					"description": "Only include those decision requirements definitions that are latest versions. Value may\nonly be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceName",
					"description": "Filter by the name of the decision requirements definition resource. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceNameLike",
					"description": "Filter by names of those decision requirements definition resources that the parameter is\na substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A decision requirements definition must\nhave one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include decision requirements definitions which belong to no tenant. Value may only\nbe `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeDecisionRequirementsDefinitionsWithoutTenantId",
					"description": "Include decision requirements definitions which belong to no tenant. Can be used in\ncombination with `tenantIdIn`. Value may only be `true`, as `false` is the\ndefault behavior."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"id",
							"key",
							"name",
							"version",
							"deploymentId",
							"category",
							"tenantId"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Decision Requirements Definition"]
		}},
		"/execution": {
			"post": {
				"summary": "Get Executions (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ExecutionQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/execution`",
						"value": {
							"processDefinitionId": "aProcessDefinitionId",
							"variables": [
								{
									"name": "myVariable",
									"value": "camunda",
									"operator": "eq"
								},
								{
									"name": "mySecondVariable",
									"value": 124,
									"operator": "neq"
								}
							],
							"sorting": [
								{
									"sortOrder": "asc",
									"sortBy": "definitionKey"
								},
								{
									"sortOrder": "desc",
									"sortBy": "instanceId"
								}
							]
						}
					}}
				}}},
				"operationId": "queryExecutions",
				"description": "Queries for executions that fulfill given parameters through a JSON object.\nThis method is slightly more powerful than the [Get\nExecutions](https://docs.camunda.org/manual/7.19/reference/rest/execution/get-query/) method\nbecause it allows\nto filter by multiple instance and execution variables of types\n`String`, `Number` or `Boolean`.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/ExecutionDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "POST `/execution`",
								"value": [{
									"processInstanceId": "aProcInstId",
									"ended": false,
									"tenantId": null,
									"id": "anId"
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`, or if an invalid operator\nfor variable comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Execution"]
			},
			"get": {
				"summary": "Get Executions",
				"operationId": "getExecutions",
				"description": "Queries for the executions that fulfill given parameters.\nParameters may be static as well as dynamic runtime properties of\nexecutions.\nThe size of the result set can be retrieved by using the [Get\nExecution Count](https://docs.camunda.org/manual/7.19/reference/rest/execution/get-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/ExecutionDto"}
							},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "GET `/execution?variables=myVariable_eq_camunda`",
								"value": [{
									"processInstanceId": "aProcInstId",
									"ended": false,
									"tenantId": null,
									"id": "anId"
								}]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`, or if an invalid operator\nfor variable comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "businessKey",
						"description": "Filter by the business key of the process instances the executions belong to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by the process definition the executions run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Filter by the key of the process definition the executions run on."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by the id of the process instance the execution belongs to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityId",
						"description": "Filter by the id of the activity the execution currently executes."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "signalEventSubscriptionName",
						"description": "Select only those executions that expect a signal of the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "messageEventSubscriptionName",
						"description": "Select only those executions that expect a message of the given name."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "active",
						"description": "Only include active executions. Value may only be `true`, as `false` is the default\nbehavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "suspended",
						"description": "Only include suspended executions. Value may only be `true`, as `false` is the default\nbehavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentId",
						"description": "Filter by the incident id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentType",
						"description": "Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessage",
						"description": "Filter by the incident message. Exact match."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "incidentMessageLike",
						"description": "Filter by the incident message that the parameter is a substring of."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of tenant ids. An execution must have one of the given\ntenant ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variables",
						"description": "Only include executions that have variables with certain values.\nVariable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n**Note:** Values are always treated as `String` objects on server side.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to; `gt` -\ngreater than;\n`gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or\nequal to;\n`like`.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processVariables",
						"description": "Only include executions that belong to a process instance with variables with certain\nvalues.\nVariable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n**Note:** Values are always treated as `String` objects on server side.\n\nValid operator values are: `eq` - equal to; `neq` - not equal to.\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match all variable names provided in `variables` and `processVariables` case-\ninsensitively. If set to `true` **variableName** and **variablename** are\ntreated as equal."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match all variable values provided in `variables` and `processVariables` case-\ninsensitively. If set to `true` **variableValue** and **variablevalue** are\ntreated as equal."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"instanceId",
								"definitionKey",
								"definitionId",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					}
				],
				"tags": ["Execution"]
			}
		},
		"/filter/count": {"get": {
			"summary": "Get Filter Count",
			"operationId": "getFilterCount",
			"description": "Retrieves the number of filters that fulfill a provided query. Corresponds to the\nsize of the result set when using the \n[Get Filters](https://docs.camunda.org/manual/7.19/reference/rest/filter/get-query/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "request",
							"description": "GET `/filter/count?resourceType=Task&owner=aUserId`",
							"value": {"count": 3}
						}}
					}}
				},
				"400": {
					"description": "\nReturned if some of the query parameters are invalid, for example if\na `sortOrder`parameter is supplied, but no `sortBy`, or if an invalid operator\nfor variable comparison is used. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "filterId",
					"description": "Filter by the id of the filter."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceType",
					"description": "Filter by the resource type of the filter, e.g., `Task`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "name",
					"description": "Filter by the name of the filter."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "nameLike",
					"description": "Filter by the name that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "owner",
					"description": "Filter by the user id of the owner of the filter."
				}
			],
			"tags": ["Filter"]
		}},
		"/incident": {"get": {
			"summary": "Get List",
			"operationId": "getIncidents",
			"description": "Queries for incidents that fulfill given parameters. The size of the result set can be retrieved by using\nthe [Get Incident Count](https://docs.camunda.org/manual/7.19/reference/rest/incident/get-query-count/) method.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/IncidentDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/incident/anIncidentId`",
							"value": [
								{
									"annotation": "an annotation",
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"jobDefinitionId": "aJobDefinitionId",
									"incidentMessage": "anIncidentMessage",
									"configuration": "aConfiguration",
									"causeIncidentId": "aCauseIncidentId",
									"incidentType": "failedJob",
									"executionId": "anExecutionId",
									"activityId": "serviceTask",
									"incidentTimestamp": "2014-03-01T08:00:00.000+0200",
									"rootCauseIncidentId": "aRootCauseIncidentId",
									"tenantId": null,
									"id": "anIncidentId",
									"failedActivityId": "serviceTask"
								},
								{
									"annotation": "another annotation",
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"jobDefinitionId": null,
									"incidentMessage": "anotherIncidentMessage",
									"configuration": "anotherConfiguration",
									"causeIncidentId": "anotherCauseIncidentId",
									"incidentType": "customIncidentType",
									"executionId": "anotherExecutionId",
									"activityId": "userTask",
									"incidentTimestamp": "2014-03-01T09:00:00.000+0200",
									"rootCauseIncidentId": "anotherRootCauseIncidentId",
									"tenantId": null,
									"id": "anIncidentId",
									"failedActivityId": "userTask"
								}
							]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder` parameter is supplied,\nbut no `sortBy`. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error\nresponse format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentId",
					"description": "Restricts to incidents that have the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentType",
					"description": "Restricts to incidents that belong to the given incident type. See the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types) for a list of incident\ntypes."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessage",
					"description": "Restricts to incidents that have the given incident message."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessageLike",
					"description": "Restricts to incidents that incidents message is a substring of the given value. The string can include\nthe wildcard character '%' to express like-strategy: starts with (`string%`), ends with (`%string`) or\ncontains (`%string%`)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Restricts to incidents that belong to a process definition with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKeyIn",
					"description": "Restricts to incidents that belong to a process definition with the given keys. Must be a\ncomma-separated list."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Restricts to incidents that belong to a process instance with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "executionId",
					"description": "Restricts to incidents that belong to an execution with the given id."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "incidentTimestampBefore",
					"description": "Restricts to incidents that have an incidentTimestamp date before the given date. \nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date\nmust have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "incidentTimestampAfter",
					"description": "Restricts to incidents that have an incidentTimestamp date after the given date. \nBy [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date\nmust have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityId",
					"description": "Restricts to incidents that belong to an activity with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "failedActivityId",
					"description": "Restricts to incidents that were created due to the failure of an activity with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "causeIncidentId",
					"description": "Restricts to incidents that have the given incident id as cause incident."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "rootCauseIncidentId",
					"description": "Restricts to incidents that have the given incident id as root cause incident."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "configuration",
					"description": "Restricts to incidents that have the given parameter set as configuration."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Restricts to incidents that have one of the given comma-separated tenant ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "jobDefinitionIdIn",
					"description": "Restricts to incidents that have one of the given comma-separated job definition ids."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"incidentId",
							"incidentMessage",
							"incidentTimestamp",
							"incidentType",
							"executionId",
							"activityId",
							"processInstanceId",
							"processDefinitionId",
							"causeIncidentId",
							"rootCauseIncidentId",
							"configuration",
							"tenantId"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Incident"]
		}},
		"/process-definition/{id}/restart-async": {"post": {
			"summary": "Restart Process Instance Async",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/RestartProcessInstanceDto"},
				"examples": {
					"example-1": {
						"summary": "Restarting one or more Process Instances with known processInstanceIds",
						"value": {
							"instructions": [{
								"activityId": "aUserTask",
								"type": "startAfterActivity"
							}],
							"withoutBusinessKey": true,
							"initialVariables": true,
							"processInstanceIds": [
								"aProcessInstance",
								"anotherProcessInstance"
							],
							"skipCustomListeners": true
						}
					},
					"example-2": {
						"summary": "Restarting one or more Process Instances using a historicProcessInstanceQuery",
						"value": {
							"instructions": [{
								"activityId": "aUserTask",
								"type": "startAfterActivity"
							}],
							"withoutBusinessKey": true,
							"initialVariables": true,
							"historicProcessInstanceQuery": {
								"processDefinitionId": "aProcessDefinitionId",
								"processInstanceBusinessKey": "businessKey"
							},
							"skipCustomListeners": true
						}
					}
				}
			}}},
			"operationId": "restartProcessInstanceAsyncOperation",
			"description": "Restarts process instances that were canceled or terminated asynchronously.\nCan also restart completed process instances.\nIt will create a new instance using the original instance information.\nTo execute the restart asynchronously, use the\n[Restart Process Instance](https://docs.camunda.org/manual/7.19/reference/rest/process-definition/post-restart-process-instance-sync/) method.\n\nFor more information about the difference between synchronous and asynchronous execution,\nplease refer to the related section of the\n[User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/process-instance-restart/#execution).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/BatchDto"},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"value": {
								"monitorJobDefinitionId": "aMonitorJobDefinitionId",
								"createUserId": "demo",
								"invocationsPerBatchJob": 1,
								"totalJobs": 10,
								"jobsCreated": 10,
								"tenantId": "aTenantId",
								"batchJobsPerSeed": 100,
								"seedJobDefinitionId": "aSeedJobDefinitionId",
								"id": "aBatchId",
								"type": "aBatchType",
								"batchJobDefinitionId": "aBatchJobDefinitionId",
								"suspended": false
							}
						}}
					}}
				},
				"400": {
					"description": "In case following parameters are missing: `instructions`, `activityId` or `transitionId`,\n`processInstanceIds` or `historicProcessInstanceQuery`,\nan exception of type `InvalidRequestException` is returned. \nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition of the process instances to restart.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/history/user-operation/{operationId}/set-annotation": {"put": {
			"summary": "Set Annotation to an User Operation Log (Historic)",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/AnnotationDto"},
				"examples": {"example-1": {
					"summary": "PUT `/history/user-operation/a02a5890-ad41-11e9-8609-c6bbb7c7e9e3/set-annotation`",
					"value": {"annotation": "Instances restarted due to wrong turn"}
				}}
			}}},
			"operationId": "setAnnotationUserOperationLog",
			"description": "Set an annotation for auditing reasons.",
			"responses": {
				"400": {
					"description": "Returned if some of the request parameters are invalid, for example if the\n`operationId` path parameter value does not exists. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "operationId",
				"description": "The operation id of the operation log to be updated.",
				"required": true
			}],
			"tags": ["Historic User Operation Log"]
		}},
		"/history/cleanup": {"post": {
			"summary": "Clean up history (POST)",
			"operationId": "cleanupAsync",
			"description": "Schedules asynchronous history cleanup (See\n[History cleanup](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#history-cleanup)).\n\n**Note:** This endpoint will return at most a single history cleanup job.\nSince version `7.9.0` it is possible to configure multiple\n[parallel history cleanup jobs](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#parallel-execution). Use\n[`GET /history/cleanup/jobs`](https://docs.camunda.org/manual/7.19/reference/rest/history/history-cleanup/get-history-cleanup-jobs)\nto find all the available history cleanup jobs.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/JobDto"},
						"examples": {"example-1": {
							"summary": "POST `/history/cleanup?immediatelyDue=false`",
							"description": "POST `/history/cleanup?immediatelyDue=false`",
							"value": {
								"processInstanceId": null,
								"processDefinitionId": null,
								"jobDefinitionId": null,
								"dueDate": "2017-04-06T13:57:45.000+0200",
								"priority": 0,
								"suspended": false,
								"processDefinitionKey": null,
								"executionId": null,
								"retries": 3,
								"createTime": "2017-04-01T09:45:15.039+0100",
								"tenantId": null,
								"id": "074bd92a-1a95-11e7-8ceb-34f39ab71d4e",
								"exceptionMessage": null
							}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid or the engine\ndoes not participate in history cleanup. See\n[Cleanup Execution Participation per Node](https://docs.camunda.org/manual/7.19/user-guide/process-engine/history/#cleanup-execution-participation-per-node).",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "boolean"},
				"in": "query",
				"name": "immediatelyDue",
				"description": "When true the job will be scheduled for nearest future. When `false`, the job will be\nscheduled for next batch window start time. Default is `true`."
			}],
			"tags": ["History Cleanup"]
		}},
		"/job/suspended": {"put": {
			"summary": "Activate/Suspend Jobs",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/JobSuspensionStateDto"},
				"examples": {
					"example-3": {
						"summary": "Activates or suspends jobs with the given process instance id. PUT `/job/suspended`",
						"value": {
							"processInstanceId": "aProcessInstanceId",
							"suspended": true
						}
					},
					"example-4": {
						"summary": "Activates or suspends jobs with the given process definition key. PUT `/job/suspended`",
						"value": {
							"suspended": true,
							"processDefinitionKey": "aProcessDefinitionKey"
						}
					},
					"example-1": {
						"summary": "Activates or suspends jobs with the given job definition id. PUT `/job/suspended`",
						"value": {
							"jobDefinitionId": "aJobDefinitionId",
							"suspended": true
						}
					},
					"example-2": {
						"summary": "Activates or suspends jobs with the given process definition id. PUT `/job/suspended`",
						"value": {
							"processDefinitionId": "aProcessDefinitionId",
							"suspended": true
						}
					}
				}
			}}},
			"operationId": "updateSuspensionStateBy",
			"description": "Activates or suspends jobs matching the given criterion.\nThis can only be on of:\n* `jobDefinitionId`\n* `processDefinitionId`\n* `processInstanceId`\n* `processDefinitionKey`",
			"responses": {
				"400": {
					"description": "Returned if the request parameters are invalid, for example, if `jobDefinitionId` and\n`processDefinitionId` are both specified.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."}
			},
			"tags": ["Job"]
		}},
		"/task/{id}/complete": {"post": {
			"summary": "Complete",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/CompleteTaskDto"},
				"examples": {
					"example-1": {
						"summary": "POST `/task/anId/complete`",
						"description": "Complete Task with variables in return",
						"value": {
							"variables": {
								"aVariable": {"value": "aStringValue"},
								"anotherVariable": {"value": 42},
								"aThirdVariable": {"value": true}
							},
							"withVariablesInReturn": true
						}
					},
					"example-2": {
						"summary": "POST `/task/anId/complete`",
						"description": "Complete Task without variables in return",
						"value": {"variables": {
							"aVariable": {"value": "aStringValue"},
							"anotherVariable": {"value": 42},
							"aThirdVariable": {"value": true}
						}}
					}
				}
			}}},
			"operationId": "complete",
			"description": "Completes a task and updates process variables.",
			"responses": {
				"200": {
					"description": "Request successful. The response contains the process variables.",
					"content": {"application/json": {
						"schema": {
							"additionalProperties": {"$ref": "#/components/schemas/VariableValueDto"},
							"type": "object"
						},
						"examples": {"example-1": {
							"summary": "POST `/task/anId/complete`",
							"description": "Response Body",
							"value": {
								"aVariable": {"value": "aStringValue"},
								"anotherVariable": {"value": 42},
								"aThirdVariable": {"value": true}
							}
						}}
					}}
				},
				"400": {
					"description": "The variable value or type is invalid, for example if the value could not be parsed\nto an Integer value or the passed variable type is not supported. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "If the task does not exist or the corresponding process instance could not be\nresumed successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. The response contains no variables."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to complete.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/user/{id}": {
			"options": {
				"summary": "Options",
				"operationId": "availableUserOperations",
				"description": "The `/user` resource supports two custom `OPTIONS` requests, one for the resource as such\nand one for individual user instances. The `OPTIONS` request allows checking for the set of\navailable operations that the currently authenticated user can perform on the /user resource.\nIf the user can perform an operation or not may depend on various things, including the user's\nauthorizations to interact with this resource and the internal configuration of the process\nengine. `OPTIONS /user/{id}` returns available interactions on a resource instance.",
				"responses": {"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
						"examples": {"example-1": {
							"summary": "GET `/user/peter`",
							"value": {"links": [
								{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:8080/engine-rest/user/peter/profile"
								},
								{
									"method": "DELETE",
									"rel": "delete",
									"href": "http://localhost:8080/engine-rest/user/peter"
								},
								{
									"method": "PUT",
									"rel": "update",
									"href": "http://localhost:8080/engine-rest/user/peter/profile"
								}
							]}
						}}
					}}
				}},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the user to be deleted.",
					"required": true
				}],
				"tags": ["User"]
			},
			"delete": {
				"summary": "Delete",
				"operationId": "deleteUser",
				"description": "Deletes a user by id.",
				"responses": {
					"204": {"description": "Request successful."},
					"403": {
						"description": "Identity service is read-only (Cannot modify users / groups / memberships).",
						"content": {"application/json": {"schema": {}}}
					},
					"404": {
						"description": "A Deployment with the provided id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the user to be deleted.",
					"required": true
				}],
				"tags": ["User"]
			}
		},
		"/external-task/{id}/extendLock": {"post": {
			"summary": "Extend Lock",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ExtendLockOnExternalTaskDto"},
				"examples": {"example-1": {
					"summary": "POST /external-task/anId/extendLock",
					"value": {
						"workerId": "anId",
						"newDuration": 100000
					}
				}}
			}}},
			"operationId": "extendLock",
			"description": "Extends the timeout of the lock by a given amount of time.",
			"responses": {
				"400": {
					"description": "In case the new lock duration is negative or the external task is not locked by the given worker or not \nlocked at all, an exception of type `InvalidRequestException` is returned. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,\ne.g., due to a caught BPMN boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the external task.",
				"required": true
			}],
			"tags": ["External Task"]
		}},
		"/process-definition/statistics": {"get": {
			"summary": "Get Process Instance Statistics",
			"operationId": "getProcessDefinitionStatistics",
			"description": "Retrieves runtime statistics of the process engine, grouped by process definitions.\nThese statistics include the number of running process instances, optionally the number of failed jobs\nand also optionally the number of incidents either grouped by incident types or\nfor a specific incident type.\n**Note**: This does not include historic data.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/ProcessDefinitionStatisticsResultDto"}
						},
						"examples": {
							"example-3": {
								"summary": "GET /process-definition/statistics?incidentsForType=anIncident",
								"description": "Request with Query Parameter `incidentsForType=anIncident`",
								"value": [{
									"@class": "org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionStatisticsResultDto",
									"instances": 123,
									"failedJobs": 0,
									"incidents": [{
										"incidentCount": 20,
										"incidentType": "anIncident"
									}],
									"definition": {
										"resource": null,
										"startableInTasklist": false,
										"description": null,
										"historyTimeToLive": null,
										"versionTag": "1.0.0",
										"version": 0,
										"suspended": false,
										"diagram": null,
										"deploymentId": null,
										"name": "aName",
										"tenantId": null,
										"id": "aProcessDefinitionId",
										"category": null,
										"key": "aKey"
									},
									"id": "aProcessDefinitionId"
								}]
							},
							"example-4": {
								"summary": "GET /process-definition/statistics?rootIncidents=true",
								"description": "Request with Query Parameter `rootIncidents=true`",
								"value": [{
									"@class": "org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionStatisticsResultDto",
									"instances": 123,
									"failedJobs": 0,
									"incidents": [
										{
											"incidentCount": 62,
											"incidentType": "failedJob"
										},
										{
											"incidentCount": 20,
											"incidentType": "anIncident"
										}
									],
									"definition": {
										"resource": null,
										"startableInTasklist": false,
										"description": null,
										"historyTimeToLive": null,
										"versionTag": "1.0.0",
										"version": 0,
										"suspended": false,
										"diagram": null,
										"deploymentId": null,
										"name": "aName",
										"tenantId": null,
										"id": "aProcessDefinitionId",
										"category": null,
										"key": "aKey"
									},
									"id": "aProcessDefinitionId"
								}]
							},
							"example-1": {
								"summary": "GET /process-definition/statistics?failedJobs=true",
								"description": "Request with Query Parameter `failedJobs=true`",
								"value": [
									{
										"@class": "org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionStatisticsResultDto",
										"instances": 123,
										"failedJobs": 42,
										"incidents": [],
										"definition": {
											"resource": null,
											"startableInTasklist": false,
											"description": null,
											"historyTimeToLive": null,
											"versionTag": "1.0.0",
											"version": 0,
											"suspended": false,
											"diagram": null,
											"deploymentId": null,
											"name": "aName",
											"tenantId": null,
											"id": "aProcessDefinitionId",
											"category": null,
											"key": "aKey"
										},
										"id": "aProcessDefinitionId"
									},
									{
										"@class": "org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionStatisticsResultDto",
										"instances": 124,
										"failedJobs": 43,
										"incidents": [],
										"definition": {
											"resource": null,
											"startableInTasklist": false,
											"description": null,
											"historyTimeToLive": null,
											"versionTag": null,
											"version": 0,
											"suspended": false,
											"diagram": null,
											"deploymentId": null,
											"name": "aName",
											"tenantId": null,
											"id": "aProcessDefinitionId:2",
											"category": null,
											"key": "aKey"
										},
										"id": "aProcessDefinitionId:2"
									}
								]
							},
							"example-2": {
								"summary": "GET /process-definition/statistics?incidents=true",
								"description": "Request with Query Parameter `incidents=true`",
								"value": [
									{
										"@class": "org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionStatisticsResultDto",
										"instances": 123,
										"failedJobs": 0,
										"incidents": [
											{
												"incidentCount": 42,
												"incidentType": "failedJob"
											},
											{
												"incidentCount": 20,
												"incidentType": "anIncident"
											}
										],
										"definition": {
											"resource": null,
											"startableInTasklist": false,
											"description": null,
											"historyTimeToLive": null,
											"versionTag": "1.0.0",
											"version": 0,
											"suspended": false,
											"diagram": null,
											"deploymentId": null,
											"name": "aName",
											"tenantId": null,
											"id": "aProcessDefinitionId",
											"category": null,
											"key": "aKey"
										},
										"id": "aProcessDefinitionId"
									},
									{
										"@class": "org.camunda.bpm.engine.rest.dto.repository.ProcessDefinitionStatisticsResultDto",
										"instances": 124,
										"failedJobs": 0,
										"incidents": [
											{
												"incidentCount": 43,
												"incidentType": "failedJob"
											},
											{
												"incidentCount": 22,
												"incidentType": "anIncident"
											},
											{
												"incidentCount": 15,
												"incidentType": "anotherIncident"
											}
										],
										"definition": {
											"resource": null,
											"startableInTasklist": false,
											"description": null,
											"historyTimeToLive": null,
											"versionTag": null,
											"version": 0,
											"suspended": false,
											"diagram": null,
											"deploymentId": null,
											"name": "aName",
											"tenantId": null,
											"id": "aProcessDefinitionId:2",
											"category": null,
											"key": "aKey"
										},
										"id": "aProcessDefinitionId:2"
									}
								]
							}
						}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "failedJobs",
					"description": "Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "incidents",
					"description": "Valid values for this property are `true` or `false`.\nIf this property has been set to `true` the result will include the corresponding number of incidents\nfor each occurred incident type.\nIf it is set to `false`, the incidents will not be included in the result.\nCannot be used in combination with `incidentsForType`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentsForType",
					"description": "If this property has been set with any incident type (i.e., a string value) the result\nwill only include the number of incidents for the assigned incident type.\nCannot be used in combination with `incidents`.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types)\nfor a list of incident types."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "rootIncidents",
					"description": "Valid values for this property are `true` or `false`.\nIf this property has been set to `true` the result will include the corresponding number of\nroot incidents for each occurred incident type.\nIf it is set to `false`, the incidents will not be included in the result.\nCannot be used in combination with `incidentsForType` or `incidents`."
				}
			],
			"tags": ["Process Definition"]
		}},
		"/task/{id}/attachment/{attachmentId}": {
			"get": {
				"summary": "Get",
				"operationId": "getAttachment",
				"description": "Retrieves a task attachment by task id and attachment id.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/AttachmentDto"},
							"examples": {"example-1": {
								"summary": "GET /task/aTaskId/attachment/aTaskAttachmentId",
								"value": {
									"createTime": "2017-02-10T14:33:19.000+0200",
									"name": "attachmentName",
									"description": "attachmentDescription",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"links": [{
										"method": "GET",
										"rel": "self",
										"href": "http://localhost:38080/rest-test/task/aTaskId/attachment/aTaskAttachmentId"
									}],
									"id": "attachmentId",
									"type": "attachmentType",
									"taskId": "aTaskId",
									"url": "http://my-attachment-content-url.de",
									"removalTime": "2018-02-10T14:33:19.000+0200"
								}
							}}
						}}
					},
					"404": {
						"description": "The attachment for the given task and attachment id does not exist or the history of the engine is\ndisabled.\n\nSee the [Introduction](/reference/rest/overview/#error-handling) for the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "attachmentId",
						"description": "The id of the attachment to be retrieved.",
						"required": true
					}
				],
				"tags": ["Task Attachment"]
			},
			"delete": {
				"summary": "Delete",
				"operationId": "deleteAttachment",
				"description": "Removes an attachment from a task by id.",
				"responses": {
					"204": {"description": "Request successful."},
					"403": {
						"description": "The history of the engine is disabled. See the [Introduction](/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
					},
					"404": {
						"description": "A Task Attachment for the given task id and attachment id does not exist. See the\n[Introduction](/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "attachmentId",
						"description": "The id of the attachment to be removed.",
						"required": true
					}
				],
				"tags": ["Task Attachment"]
			}
		},
		"/metrics/task-worker": {"delete": {
			"summary": "Delete Task Worker Metrics",
			"operationId": "deleteTaskMetrics",
			"description": "Deletes all task worker metrics prior to the given date or all if no date is provided.",
			"responses": {
				"204": {"description": "Request successful."},
				"403": {
					"description": "If the user who performs the operation is not a <b>camunda-admin<\/b> user.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {
					"format": "date-time",
					"type": "string"
				},
				"in": "query",
				"name": "date",
				"description": "The date prior to which all task worker metrics should be deleted."
			}],
			"tags": ["Metrics"]
		}},
		"/history/external-task-log/{id}": {"get": {
			"summary": "Get External Task Log",
			"operationId": "getHistoricExternalTaskLog",
			"description": "Retrieves a historic external task log by id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/HistoricExternalTaskLogDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "GET `/history/external-task-log/someId`",
							"value": {
								"processInstanceId": "aProcessInstanceId",
								"processDefinitionId": "aProcessDefinitionId",
								"workerId": "aWorkerId",
								"deletionLog": false,
								"creationLog": false,
								"successLog": false,
								"errorMessage": "An error occured!",
								"activityInstanceId": "externalServiceTask:15",
								"priority": 5,
								"processDefinitionKey": "aProcessDefinitionKey",
								"removalTime": "2018-02-10T14:33:19.000+0200",
								"failureLog": true,
								"retries": 3,
								"activityId": "externalServiceTask",
								"executionId": "anExecutionId",
								"tenantId": null,
								"topicName": "aTopicName",
								"rootProcessInstanceId": "aRootProcessInstanceId",
								"id": "someId",
								"externalTaskId": "anExternalTaskId",
								"timestamp": "2017-01-15T15:22:20.000+0200"
							}
						}}
					}}
				},
				"404": {
					"description": "Historic external task log with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the log entry.",
				"required": true
			}],
			"tags": ["Historic External Task Log"]
		}},
		"/tenant/{id}/user-members": {"options": {
			"summary": "Tenant User Membership Resource Options",
			"operationId": "availableTenantUserMembersOperations",
			"description": "The OPTIONS request allows checking for the set of available operations that the\ncurrently authenticated user can perform on the resource. If the user\ncan perform an operation or not may depend on various things,\nincluding the users authorizations to interact with this resource and\nthe internal configuration of the process engine.",
			"responses": {"200": {
				"description": "Request successful.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
					"examples": {"example-1": {
						"summary": "Status 200.",
						"description": "OPTIONS `/tenant/tenantOne/user-members`",
						"value": {"links": [
							{
								"method": "DELETE",
								"rel": "delete",
								"href": "http://localhost:8080/engine-rest/tenant/tenantOne/user-members"
							},
							{
								"method": "PUT",
								"rel": "create",
								"href": "http://localhost:8080/engine-rest/tenant/tenantOne/user-members"
							}
						]}
					}}
				}}
			}},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the tenant",
				"required": true
			}],
			"tags": ["Tenant"]
		}},
		"/process-definition/{id}/start": {"post": {
			"summary": "Start Instance",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/StartProcessInstanceDto"},
				"examples": {
					"example-3": {
						"summary": "Starting a process instance at two specific activities",
						"value": {
							"variables": {"aProcessVariable": {
								"type": "String",
								"value": "aStringValue"
							}},
							"businessKey": "myBusinessKey",
							"startInstructions": [
								{
									"activityId": "activityId",
									"variables": {"var": {
										"type": "String",
										"value": "aVariableValue",
										"local": false
									}},
									"type": "startBeforeActivity"
								},
								{
									"activityId": "anotherActivityId",
									"variables": {"varLocal": {
										"type": "String",
										"value": "anotherVariableValue",
										"local": true
									}},
									"type": "startAfterActivity"
								}
							],
							"skipCustomListeners": true
						}
					},
					"example-1": {
						"summary": "Starting a process instance at its default initial activity",
						"value": {
							"variables": {
								"aVariable": {
									"type": "String",
									"value": "aStringValue"
								},
								"anotherVariable": {
									"type": "Boolean",
									"value": true
								}
							},
							"businessKey": "myBusinessKey"
						}
					},
					"example-2": {
						"summary": "Starting a process instance with variables in return",
						"value": {
							"variables": {
								"aVariable": {
									"type": "String",
									"value": "aStringValue"
								},
								"anotherVariable": {
									"type": "Boolean",
									"value": true
								}
							},
							"withVariablesInReturn": true,
							"businessKey": "myBusinessKey"
						}
					}
				}
			}}},
			"operationId": "startProcessInstance",
			"description": "Instantiates a given process definition.\nProcess variables and business key may be supplied in the request body.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ProcessInstanceWithVariablesDto"},
						"examples": {
							"example-3": {
								"summary": "Status 200 Response 3",
								"description": "Response for starting a process instance at two specific activities",
								"value": {
									"caseInstanceId": null,
									"businessKey": "myBusinessKey",
									"tenantId": null,
									"ended": false,
									"links": [{
										"method": "GET",
										"rel": "self",
										"href": "http://localhost:8080/rest-test/process-instance/anId"
									}],
									"id": "anId",
									"suspended": false,
									"definitionId": "aProcessDefinitionId"
								}
							},
							"example-1": {
								"summary": "Status 200 Response 1",
								"description": "Response for starting a process instance at its default initial activity",
								"value": {
									"caseInstanceId": null,
									"businessKey": "myBusinessKey",
									"tenantId": null,
									"ended": false,
									"links": [{
										"method": "GET",
										"rel": "self",
										"href": "http://localhost:8080/rest-test/process-instance/anId"
									}],
									"id": "anId",
									"suspended": false,
									"definitionId": "aProcessDefinitionId"
								}
							},
							"example-2": {
								"summary": "Status 200 Response 2",
								"description": "Response for starting a process instance with variables in return",
								"value": {
									"variables": {
										"aVariable": {
											"valueInfo": {},
											"type": "String",
											"value": "aStringValue"
										},
										"anotherVariable": {
											"valueInfo": {"transient": true},
											"type": "Boolean",
											"value": true
										}
									},
									"caseInstanceId": null,
									"businessKey": "myBusinessKey",
									"ended": false,
									"tenantId": null,
									"links": [{
										"method": "GET",
										"rel": "self",
										"href": "http://localhost:8080/rest-test/process-instance/aProcInstId"
									}],
									"id": "aProcInstId",
									"suspended": false,
									"definitionId": "aProcessDefinitionId"
								}
							}
						}
					}}
				},
				"400": {
					"description": "The instance could not be created due to an invalid variable value,\nfor example if the value could not be parsed to an `Integer` value or\nthe passed variable type is not supported.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The instance could not be created successfully.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition to be retrieved.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/filter/create": {"post": {
			"summary": "Create Filter",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/CreateFilterDto"},
				"examples": {"example-1": {
					"summary": "request",
					"description": "POST `/filter/create`",
					"value": {
						"owner": "jonny1",
						"query": {"candidateGroup": "accounting"},
						"name": "Accounting Tasks",
						"properties": {
							"color": "#3e4d2f",
							"description": "Tasks assigned to group accounting",
							"priority": 5
						},
						"resourceType": "Task"
					}
				}}
			}}},
			"operationId": "createFilter",
			"description": "Creates a new filter.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/FilterDto"},
						"examples": {"example-1": {
							"summary": "request",
							"description": "POST `/filter/create`",
							"value": {
								"owner": "jonny1",
								"query": {"candidateGroup": "accounting"},
								"name": "Accounting Tasks",
								"id": "aFilterId",
								"properties": {
									"color": "#3e4d2f",
									"description": "Tasks assigned to group accounting",
									"priority": 5
								},
								"resourceType": "Task"
							}
						}}
					}}
				},
				"400": {
					"description": "\nFilter was invalid. See\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "\nThe authenticated user is unauthorized to create a new filter. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Filter"]
		}},
		"/decision-requirements-definition/key/{key}/diagram": {"get": {
			"summary": "Get Decision Requirements Diagram by Key",
			"operationId": "getDecisionRequirementsDefinitionDiagramByKey",
			"description": "Retrieves the diagram of a decision requirements definition.\nReturns the diagram for the latest version of the decision requirements \ndefinition which belongs to no tenant.",
			"responses": {
				"200": {
					"description": "The image diagram of the decision requirements definition.",
					"content": {
						"image/*": {
							"schema": {
								"format": "binary",
								"description": "For `image/*` Responses, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "GET `/decision-requirements-definition/key/invoiceKey/diagram`",
								"description": "GET `/decision-requirements-definition/key/invoiceKey/diagram`",
								"value": ""
							}}
						},
						"application/octet-stream": {
							"schema": {
								"format": "binary",
								"description": "For `application/octet-stream` Responses, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "GET `/decision-requirements-definition/key/invoiceKey/diagram`",
								"description": "GET `/decision-requirements-definition/key/invoiceKey/diagram`",
								"value": ""
							}}
						}
					}
				},
				"204": {"description": "The decision requirements definition doesn't have an associated diagram. This\nmethod returns no content."},
				"404": {
					"description": "Decision requirements definition with given id or key does not\nexist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the decision requirements definition (the latest version thereof) to be\nretrieved.",
				"required": true
			}],
			"tags": ["Decision Requirements Definition"]
		}},
		"/history/incident": {"get": {
			"summary": "Get Incidents",
			"operationId": "getHistoricIncidents",
			"description": "Queries for historic incidents that fulfill given parameters.\nThe size of the result set can be retrieved by using the\n[Get Incident Count](https://docs.camunda.org/manual/7.19/reference/rest/history/incident/get-incident-query-count/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/HistoricIncidentDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/history/incident?processInstanceId=aProcInstId`",
							"description": "GET `/history/incident?processInstanceId=aProcInstId`",
							"value": [
								{
									"annotation": "an annotation",
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"jobDefinitionId": "aJobDefinitionId",
									"incidentMessage": "anIncidentMessage",
									"configuration": "aConfiguration",
									"causeIncidentId": "aCauseIncidentId",
									"incidentType": "failedJob",
									"removalTime": null,
									"executionId": "anExecutionId",
									"activityId": "serviceTask",
									"deleted": false,
									"createTime": "2014-03-01T08:00:00.000+0200",
									"rootCauseIncidentId": "aRootCauseIncidentId",
									"tenantId": null,
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "anIncidentId",
									"endTime": null,
									"failedActivityId": "serviceTask",
									"open": true,
									"resolved": false
								},
								{
									"annotation": "another annotation",
									"processDefinitionId": "aProcDefId",
									"processInstanceId": "aProcInstId",
									"jobDefinitionId": null,
									"incidentMessage": "anotherIncidentMessage",
									"configuration": "anotherConfiguration",
									"causeIncidentId": "anotherCauseIncidentId",
									"incidentType": "customIncidentType",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"executionId": "anotherExecutionId",
									"activityId": "userTask",
									"deleted": false,
									"createTime": "2014-03-01T08:00:00.000+0200",
									"rootCauseIncidentId": "anotherRootCauseIncidentId",
									"tenantId": null,
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "anIncidentId",
									"endTime": "2014-03-10T12:00:00.000+0200",
									"failedActivityId": "userTask",
									"open": false,
									"resolved": true
								}
							]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentId",
					"description": "Restricts to incidents that have the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentType",
					"description": "Restricts to incidents that belong to the given incident type. See the [User\nGuide](/manual/develop/user-guide/process-engine/incidents/#incident-types)\nfor a list of incident types."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessage",
					"description": "Restricts to incidents that have the given incident message."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentMessageLike",
					"description": "Restricts to incidents that incidents message is a substring of the given value.\nThe string can include the wildcard character '%' to express\nlike-strategy: starts with (string%), ends with (%string) or contains\n(%string%).\n"
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Restricts to incidents that belong to a process definition with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKey",
					"description": "Restricts to incidents that have the given processDefinitionKey."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKeyIn",
					"description": "Restricts to incidents that have one of the given process definition keys."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceId",
					"description": "Restricts to incidents that belong to a process instance with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "executionId",
					"description": "Restricts to incidents that belong to an execution with the given id."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "createTimeBefore",
					"description": "Restricts to incidents that have a createTime date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "createTimeAfter",
					"description": "Restricts to incidents that have a createTime date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "endTimeBefore",
					"description": "Restricts to incidents that have an endTimeBefore date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "endTimeAfter",
					"description": "Restricts to incidents that have an endTimeAfter date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), the date must have the format\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "activityId",
					"description": "Restricts to incidents that belong to an activity with the given id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "failedActivityId",
					"description": "Restricts to incidents that were created due to the failure of an activity with the given\nid."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "causeIncidentId",
					"description": "Restricts to incidents that have the given incident id as cause incident."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "rootCauseIncidentId",
					"description": "Restricts to incidents that have the given incident id as root cause incident."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "configuration",
					"description": "Restricts to incidents that have the given parameter set as configuration."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "historyConfiguration",
					"description": "Restricts to incidents that have the given parameter set as history configuration."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "open",
					"description": "Restricts to incidents that are open."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "resolved",
					"description": "Restricts to incidents that are resolved."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "deleted",
					"description": "Restricts to incidents that are deleted."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Restricts to incidents that have one of the given comma-separated tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include historic incidents that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "jobDefinitionIdIn",
					"description": "Restricts to incidents that have one of the given comma-separated job definition ids."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"incidentId",
							"incidentMessage",
							"createTime",
							"endTime",
							"incidentType",
							"executionId",
							"activityId",
							"processInstanceId",
							"processDefinitionId",
							"processDefinitionKey",
							"causeIncidentId",
							"rootCauseIncidentId",
							"configuration",
							"historyConfiguration",
							"tenantId",
							"incidentState"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				}
			],
			"tags": ["Historic Incident"]
		}},
		"/history/task/count": {
			"post": {
				"summary": "Get Task Count (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricTaskInstanceQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/task/count`",
						"value": {
							"taskVariables": [
								{
									"name": "varName",
									"value": "varValue",
									"operator": "eq"
								},
								{
									"name": "anotherVarName",
									"value": 30,
									"operator": "neq"
								}
							],
							"priority": 10
						}
					}}
				}}},
				"operationId": "queryHistoricTaskInstancesCount",
				"description": "Queries for the number of historic tasks that fulfill the given parameters. Takes the\nsame parameters as the [Get Tasks (Historic)](https://docs.camunda.org/manual/7.19/reference/rest/history/task/get-task-query/)\nmethod. Corresponds to the size of the result set of the\n[Get Tasks (Historic) (POST)](https://docs.camunda.org/manual/7.19/reference/rest/history/task/post-task-query/)\nmethod and takes the same parameters.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "POST `/history/task/count`",
								"description": "POST `/history/task/count`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"tags": ["Historic Task Instance"]
			},
			"get": {
				"summary": "Get Task Count",
				"operationId": "getHistoricTaskInstancesCount",
				"description": "Queries for the number of historic tasks that fulfill the given parameters.\nTakes the same parameters as the\n[Get Tasks (Historic)](https://docs.camunda.org/manual/7.19/reference/rest/history/task/get-task-query/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/CountResultDto"},
							"examples": {"example-1": {
								"summary": "GET `/history/task/count?taskAssginee=anAssignee&taskPriority=50`",
								"description": "GET `/history/task/count?taskAssginee=anAssignee&taskPriority=50`",
								"value": {"count": 1}
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskId",
						"description": "Filter by task id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskParentTaskId",
						"description": "Filter by parent task id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKey",
						"description": "Filter by process instance business key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyIn",
						"description": "Filter by process instances with one of the give business keys.\nThe keys need to be in a comma-separated list."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceBusinessKeyLike",
						"description": "Filter by  process instance business key that has the parameter value as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Filter by the id of the execution that executed the task."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionId",
						"description": "Filter by process definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionKey",
						"description": "Restrict to tasks that belong to a process definition with the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processDefinitionName",
						"description": "Restrict to tasks that belong to a process definition with the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Filter by case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseExecutionId",
						"description": "Filter by the id of the case execution that executed the task."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionId",
						"description": "Filter by case definition id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionKey",
						"description": "Restrict to tasks that belong to a case definition with the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseDefinitionName",
						"description": "Restrict to tasks that belong to a case definition with the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceIdIn",
						"description": "Only include tasks which belong to one of the passed comma-separated activity instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskName",
						"description": "Restrict to tasks that have the given name."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskNameLike",
						"description": "Restrict to tasks that have a name with the given parameter value as substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDescription",
						"description": "Restrict to tasks that have the given description."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDescriptionLike",
						"description": "Restrict to tasks that have a description that has the parameter value as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDefinitionKey",
						"description": "Restrict to tasks that have the given key."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDefinitionKeyIn",
						"description": "Restrict to tasks that have one of the passed comma-separated task definition keys."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDeleteReason",
						"description": "Restrict to tasks that have the given delete reason."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskDeleteReasonLike",
						"description": "Restrict to tasks that have a delete reason that has the parameter value as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskAssignee",
						"description": "Restrict to tasks that the given user is assigned to."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskAssigneeLike",
						"description": "Restrict to tasks that are assigned to users with the parameter value as a substring."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskOwner",
						"description": "Restrict to tasks that the given user owns."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskOwnerLike",
						"description": "Restrict to tasks that are owned by users with the parameter value as a substring."
					},
					{
						"schema": {
							"format": "int32",
							"type": "integer"
						},
						"in": "query",
						"name": "taskPriority",
						"description": "Restrict to tasks that have the given priority."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "assigned",
						"description": "If set to `true`, restricts the query to all tasks that are assigned."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "unassigned",
						"description": "If set to `true`, restricts the query to all tasks that are unassigned."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "finished",
						"description": "Only include finished tasks. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "unfinished",
						"description": "Only include unfinished tasks. Value may only be `true`, as `false` is the default\nbehavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "processFinished",
						"description": "Only include tasks of finished processes. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "processUnfinished",
						"description": "Only include tasks of unfinished processes. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskDueDate",
						"description": "Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskDueDateBefore",
						"description": "Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskDueDateAfter",
						"description": "Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTaskDueDate",
						"description": "Only include tasks which have no due date. Value may only be `true`, as `false` is the\ndefault behavior."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskFollowUpDate",
						"description": "Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskFollowUpDateBefore",
						"description": "Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "taskFollowUpDateAfter",
						"description": "Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedBefore",
						"description": "Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "startedAfter",
						"description": "Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedBefore",
						"description": "Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "finishedAfter",
						"description": "Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/),\nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`,\ne.g., `2013-01-23T14:42:45.000+0200`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of tenant ids. A task instance must have one of the given\ntenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic task instances that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskVariables",
						"description": "Only include tasks that have variables with certain values. Variable filtering expressions are\ncomma-separated and are structured as follows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n**Note:** Values are always treated as `String` objects on server side.\n\n\nValid operator values are:\n* `eq` - equal to;\n* `neq` - not equal to;\n* `gt` - greater than;\n* `gteq` - greater than or equal to;\n* `lt` - lower than;\n* `lteq` - lower than or equal to;\n* `like`.\n\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processVariables",
						"description": "Only include tasks that belong to process instances that have variables with certain\nvalues. Variable filtering expressions are comma-separated and are structured as\nfollows:\n\nA valid parameter value has the form `key_operator_value`.\n`key` is the variable name, `operator` is the comparison operator to be used\nand `value` the variable value.\n**Note:** Values are always treated as `String` objects on server side.\n\n\nValid operator values are:\n* `eq` - equal to;\n* `neq` - not equal to;\n* `gt` - greater than;\n* `gteq` - greater than or equal to;\n* `lt` - lower than;\n* `lteq` - lower than or equal to;\n* `like`;\n* `notLike`.\n\n`key` and `value` may not contain underscore or comma characters."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableNamesIgnoreCase",
						"description": "Match the variable name provided in `taskVariables` and `processVariables` case-\ninsensitively. If set to `true` **variableName** and **variablename** are\ntreated as equal."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableValuesIgnoreCase",
						"description": "Match the variable value provided in `taskVariables` and `processVariables` case-\ninsensitively. If set to `true` **variableValue** and **variablevalue** are\ntreated as equal."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskInvolvedUser",
						"description": "Restrict to tasks with a historic identity link to the given user."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskInvolvedGroup",
						"description": "Restrict to tasks with a historic identity link to the given group."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskHadCandidateUser",
						"description": "Restrict to tasks with a historic identity link to the given candidate user."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskHadCandidateGroup",
						"description": "Restrict to tasks with a historic identity link to the given candidate group."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withCandidateGroups",
						"description": "Only include tasks which have a candidate group. Value may only be `true`,\nas `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutCandidateGroups",
						"description": "Only include tasks which have no candidate group. Value may only be `true`,\nas `false` is the default behavior."
					}
				],
				"tags": ["Historic Task Instance"]
			}
		},
		"/identity/verify": {"post": {
			"summary": "Verify User",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/BasicUserCredentialsDto"},
				"examples": {"example-1": {
					"summary": "POST `/identity/verify`",
					"value": {
						"password": "testPassword",
						"username": "testUser"
					}
				}}
			}}},
			"operationId": "verifyUser",
			"description": "Verifies that user credentials are valid.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/AuthenticationResult"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "POST `/identity/verify`",
							"value": {
								"authenticated": true,
								"authenticatedUser": "testUser"
							}
						}}
					}}
				},
				"400": {
					"description": "If body does not contain username or password.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Identity"]
		}},
		"/process-definition/key/{key}/suspended": {"put": {
			"summary": "Activate/Suspend by Id",
			"requestBody": {
				"description": "**Note**: Unallowed properties are `processDefinitionId` and `processDefinitionKey`.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/ProcessDefinitionSuspensionStateDto"},
					"examples": {"example-1": {
						"summary": "PUT `/process-definition/key/aProcessDefinitionKey/suspended`",
						"value": {
							"executionDate": "2013-11-21T10:49:45T14:42:45",
							"includeProcessInstances": true,
							"suspended": true
						}
					}}
				}}
			},
			"operationId": "updateProcessDefinitionSuspensionStateByKey",
			"description": "Activates or suspends a given process definition by latest version of process definition key\nwhich belongs to no tenant.",
			"responses": {
				"400": {
					"description": "Returned if some of the query parameters are invalid,\nfor example if the provided `executionDate` parameter doesn't have the expected format or\nif the `processDefinitionKey` parameter is `null`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Process definition with given key does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "key",
				"description": "The key of the process definition (the latest version thereof) to be activated/suspended.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/history/batch/{id}": {
			"get": {
				"summary": "Get Historic Batch",
				"operationId": "getHistoricBatch",
				"description": "Retrieves a historic batch by id, according to the `HistoricBatch` interface in the\nengine.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/HistoricBatchDto"},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "GET `/history/batch/aBatchId`",
								"value": {
									"createUserId": "aUserId",
									"invocationsPerBatchJob": 1,
									"batchJobsPerSeed": 100,
									"seedJobDefinitionId": "aSeedJobDefinitionId",
									"type": "aBatchType",
									"removalTime": "2016-04-15T16:23:34.000+0200",
									"monitorJobDefinitionId": "aMonitorJobDefinitionId",
									"size": 10,
									"tenantId": "aTenantId",
									"startTime": "2016-04-12T15:29:33.000+0200",
									"id": "aBatchId",
									"endTime": "2016-04-12T16:23:34.000+0200",
									"batchJobDefinitionId": "aBatchJobDefinitionId"
								}
							}}
						}}
					},
					"404": {
						"description": "\nHistoric batch with given id does not exist.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the historic batch to be retrieved.",
					"required": true
				}],
				"tags": ["Historic Batch"]
			},
			"delete": {
				"summary": "Delete Historic Batch",
				"operationId": "deleteHistoricBatch",
				"description": "Deletes a historic batch by id, including related historic job logs.",
				"responses": {
					"204": {"description": "Request successful. This method returns no content."},
					"404": {
						"description": "Historic batch with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the batch to be deleted.",
					"required": true
				}],
				"tags": ["Historic Batch"]
			}
		},
		"/history/variable-instance/{id}/data": {"get": {
			"summary": "Get Variable Instance (Binary)",
			"operationId": "getHistoricVariableInstanceBinary",
			"description": "Retrieves the content of a historic variable by id. Applicable for variables that\nare serialized as binary data.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {
						"application/octet-stream": {
							"schema": {
								"format": "binary",
								"description": "For `application/octet-stream` Responses, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "GET `/history/variable-instance/someId/data`",
								"description": "For binary variables or files without any MIME type information, a byte stream is returned.",
								"value": ""
							}}
						},
						"*/*": {
							"schema": {
								"format": "binary",
								"description": "For `*/*` Responses, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "GET `/history/variable-instance/someId/data`",
								"description": "File variables with MIME type information are returned as the saved type. Additionally,\n                            for file variables the Content-Disposition header will be set.",
								"value": ""
							}}
						}
					}
				},
				"400": {
					"description": "Variable with given id exists but is not a binary variable. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the variable instance.",
				"required": true
			}],
			"tags": ["Historic Variable Instance"]
		}},
		"/decision-definition/{id}/diagram": {"get": {
			"summary": "Get Diagram",
			"operationId": "getDecisionDefinitionDiagram",
			"description": "Retrieves the diagram of a decision definition.",
			"responses": {
				"200": {
					"description": "Request successful. The image diagram of this process.",
					"content": {
						"application/octet-stream": {"schema": {
							"format": "binary",
							"description": "defaults to `application/octet-stream` if the file suffix is unknown",
							"type": "string"
						}},
						"*/*": {"schema": {
							"format": "binary",
							"description": "Files with MIME type information image/png, image/gif, ... ",
							"type": "string"
						}}
					}
				},
				"204": {"description": "The decision definition doesn't have an associated diagram."},
				"404": {
					"description": "Decision definition with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition.",
				"required": true
			}],
			"tags": ["Decision Definition"]
		}},
		"/task/{id}/variables/{varName}": {
			"get": {
				"summary": "Get Task Variable",
				"operationId": "getTaskVariable",
				"description": "Retrieves a variable from the context of a given task.\nThe variable must be visible from the task. It is visible from the task if it is a local task variable or\ndeclared in a parent scope of the task. See documentation on\n[visiblity of variables](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/).",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/VariableValueDto"},
							"examples": {
								"example-1": {
									"summary": "GET `/task/aTaskId/variables/myObject123`",
									"value": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": {
											"prop2": "b",
											"prop1": "a"
										}
									}
								},
								"example-2": {
									"summary": "GET `/task/aTaskId/variables/myObject123?deserializeValue=false`",
									"value": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": "ab"
									}
								}
							}
						}}
					},
					"500": {
						"description": "Task id is `null` or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to retrieve the variable from.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to get.",
						"required": true
					},
					{
						"schema": {
							"default": true,
							"type": "boolean"
						},
						"in": "query",
						"name": "deserializeValue",
						"description": "Determines whether serializable variable values (typically variables that store custom Java objects)\nshould be deserialized on the server side (default `true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side and transformed to JSON\nusing [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.\nNote that this requires the Java classes of the variable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string containing XML.\n\nNote: While `true` is the default value for reasons of backward compatibility, we recommend setting this\nparameter to `false` when developing web applications that are independent of the Java process\napplications deployed to the engine."
					}
				],
				"tags": ["Task Variable"]
			},
			"delete": {
				"summary": "Delete Task Variable",
				"operationId": "deleteTaskVariable",
				"description": "Removes a variable that is visible to a task. A variable is visible to a task if it is a local task\nvariable or declared in a parent scope of the task. See documentation on\n[visiblity of variables](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/).",
				"responses": {
					"500": {
						"description": "Task id is null or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to delete the variable from.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to be removed.",
						"required": true
					}
				],
				"tags": ["Task Variable"]
			},
			"put": {
				"summary": "Update Task Variable",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/VariableValueDto"},
					"examples": {
						"example-1": {
							"summary": "PUT /task/aTaskId/variables/aVarName",
							"description": "Status 204. No content.",
							"value": {
								"type": "String",
								"value": "someValue"
							}
						},
						"example-2": {
							"summary": "PUT /task/aTaskId/variables/aVarName",
							"description": "Status 204. No content.",
							"value": {
								"valueInfo": {
									"objectTypeName": "com.example.MyObject",
									"serializationDataFormat": "application/xml"
								},
								"type": "Object",
								"value": "ab"
							}
						}
					}
				}}},
				"operationId": "putTaskVariable",
				"description": "Updates a process variable that is visible from the Task scope. A variable is visible from the task if it\nis a local task variable, or declared in a parent scope of the task. See the documentation on\n[variable scopes and visibility](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables#variable-scopes-and-variable-visibility).\n\n**Note**: If a variable doesn't exist, the variable is created in the top-most scope\nvisible from the task.",
				"responses": {
					"400": {
						"description": "The variable name, value or type is invalid, for example if the value could not be parsed to an `Integer`\nvalue or the passed variable type is not supported or a new transient variable has the name that is\nalready persisted. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"500": {
						"description": "The variable name is `null`, or the Task id is `null` or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to set the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to set.",
						"required": true
					}
				],
				"tags": ["Task Variable"]
			}
		},
		"/history/detail": {
			"post": {
				"summary": "Get Historic Details (POST)",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/HistoricDetailQueryDto"},
					"examples": {"example-1": {
						"summary": "POST `/history/detail?firstResult=1&maxResults=10`",
						"description": "POST `/history/detail?firstResult=1&maxResults=10`",
						"value": {
							"processInstanceId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
							"occurredAfter": "2018-01-29T10:15:45.000+0100",
							"sorting": [{
								"sortOrder": "asc",
								"sortBy": "processInstanceId"
							}]
						}
					}}
				}}},
				"operationId": "queryHistoricDetails",
				"description": "Queries for historic details that fulfill the given parameters. This method is slightly more\npowerful than the [Get Historic Details](https://docs.camunda.org/manual/7.19/reference/rest/history/detail/get-detail-query/)\nmethod because it allows sorting by multiple parameters. The size of the result set can be retrieved by\nusing the [Get Historic Detail Count](https://docs.camunda.org/manual/7.19/reference/rest/history/detail/get-detail-query-count/)\nmethod.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricDetailDto"}
							},
							"examples": {"example-1": {
								"summary": "POST `/history/detail?firstResult=1&maxResults=10`",
								"description": "POST `/history/detail?firstResult=1&maxResults=10`",
								"value": [
									{
										"caseDefinitionKey": null,
										"activityInstanceId": "StartEvent_1:3cd7456e-001a-11e7-8c6b-34f39ab71d4e",
										"type": "variableUpdate",
										"userOperationId": "3cd76c7f-001a-11e7-8c6b-34f39ab71d4e",
										"processDefinitionKey": "invoice",
										"removalTime": "2018-02-10T14:33:19.000+0200",
										"variableType": "Double",
										"rootProcessInstanceId": "aRootProcessInstanceId",
										"id": "3cd79390-001a-11e7-8c6b-34f39ab71d4e",
										"value": 30,
										"processDefinitionId": "invoice:1:3c59899b-001a-11e7-8c6b-34f39ab71d4e",
										"processInstanceId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
										"caseExecutionId": null,
										"variableName": "amount",
										"caseDefinitionId": null,
										"initial": true,
										"caseInstanceId": null,
										"valueInfo": {},
										"errorMessage": null,
										"variableInstanceId": "3cd65b08-001a-11e7-8c6b-34f39ab71d4e",
										"revision": 0,
										"executionId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
										"tenantId": null,
										"time": "2017-03-03T15:03:54.000+0200",
										"taskId": null
									},
									{
										"caseDefinitionKey": null,
										"activityInstanceId": "StartEvent_1:3cd7456e-001a-11e7-8c6b-34f39ab71d4e",
										"type": "variableUpdate",
										"userOperationId": "3cd76c7f-001a-11e7-8c6b-34f39ab71d4e",
										"processDefinitionKey": "invoice",
										"removalTime": "2018-02-10T14:33:19.000+0200",
										"variableType": "File",
										"rootProcessInstanceId": "aRootProcessInstanceId",
										"id": "3cd79392-001a-11e7-8c6b-34f39ab71d4e",
										"value": null,
										"processDefinitionId": "invoice:1:3c59899b-001a-11e7-8c6b-34f39ab71d4e",
										"processInstanceId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
										"caseExecutionId": null,
										"variableName": "invoiceDocument",
										"caseDefinitionId": null,
										"initial": true,
										"caseInstanceId": null,
										"valueInfo": {
											"filename": "invoice.pdf",
											"mimeType": "application/pdf"
										},
										"errorMessage": null,
										"variableInstanceId": "3cd65b0a-001a-11e7-8c6b-34f39ab71d4e",
										"revision": 0,
										"executionId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
										"tenantId": null,
										"time": "2017-03-03T15:03:54.000+0200",
										"taskId": null
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically variables that\nstore custom Java objects) should be deserialized on server side (default\n`true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side\nand transformed to JSON using\n[Jackson's](https://github.com/FasterXML/jackson) POJO/bean property\nintrospection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized\nformat. For example, a variable that is serialized as XML will be returned as\na JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of backward\ncompatibility, we recommend setting this parameter to `false` when developing\nweb applications that are independent of the Java process applications\ndeployed to the engine."
					}
				],
				"tags": ["Historic Detail"]
			},
			"get": {
				"summary": "Get Historic Details",
				"operationId": "getHistoricDetails",
				"description": "Queries for historic details that fulfill the given parameters.\nThe size of the result set can be retrieved by using the\n[Get Historic Detail Count](https://docs.camunda.org/manual/7.19/reference/rest/history/detail/get-detail-query-count/) method.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {
								"type": "array",
								"items": {"$ref": "#/components/schemas/HistoricDetailDto"}
							},
							"examples": {"example-1": {
								"summary": "GET `/history/detail?processInstanceId=3cd597b7-001a-11e7-8c6b-34f39ab71d4e`",
								"description": "GET `/history/detail?processInstanceId=3cd597b7-001a-11e7-8c6b-34f39ab71d4e`",
								"value": [
									{
										"caseDefinitionKey": null,
										"activityInstanceId": "StartEvent_1:3cd7456e-001a-11e7-8c6b-34f39ab71d4e",
										"type": "variableUpdate",
										"userOperationId": "3cd76c7f-001a-11e7-8c6b-34f39ab71d4e",
										"processDefinitionKey": "invoice",
										"removalTime": "2018-02-10T14:33:19.000+0200",
										"variableType": "Double",
										"rootProcessInstanceId": "aRootProcessInstanceId",
										"id": "3cd79390-001a-11e7-8c6b-34f39ab71d4e",
										"value": 30,
										"processDefinitionId": "invoice:1:3c59899b-001a-11e7-8c6b-34f39ab71d4e",
										"processInstanceId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
										"caseExecutionId": null,
										"variableName": "amount",
										"caseDefinitionId": null,
										"initial": true,
										"caseInstanceId": null,
										"valueInfo": {},
										"errorMessage": null,
										"variableInstanceId": "3cd65b08-001a-11e7-8c6b-34f39ab71d4e",
										"revision": 0,
										"executionId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
										"tenantId": null,
										"time": "2017-03-03T15:03:54.000+0200",
										"taskId": null
									},
									{
										"caseDefinitionKey": null,
										"activityInstanceId": "StartEvent_1:3cd7456e-001a-11e7-8c6b-34f39ab71d4e",
										"type": "variableUpdate",
										"userOperationId": "3cd76c7f-001a-11e7-8c6b-34f39ab71d4e",
										"processDefinitionKey": "invoice",
										"removalTime": "2018-02-10T14:33:19.000+0200",
										"variableType": "File",
										"rootProcessInstanceId": "aRootProcessInstanceId",
										"id": "3cd79392-001a-11e7-8c6b-34f39ab71d4e",
										"value": null,
										"processDefinitionId": "invoice:1:3c59899b-001a-11e7-8c6b-34f39ab71d4e",
										"processInstanceId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
										"caseExecutionId": null,
										"variableName": "invoiceDocument",
										"caseDefinitionId": null,
										"initial": true,
										"caseInstanceId": null,
										"valueInfo": {
											"filename": "invoice.pdf",
											"mimeType": "application/pdf"
										},
										"errorMessage": null,
										"variableInstanceId": "3cd65b0a-001a-11e7-8c6b-34f39ab71d4e",
										"revision": 0,
										"executionId": "3cd597b7-001a-11e7-8c6b-34f39ab71d4e",
										"tenantId": null,
										"time": "2017-03-03T15:03:54.000+0200",
										"taskId": null
									}
								]
							}}
						}}
					},
					"400": {
						"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceId",
						"description": "Filter by process instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "processInstanceIdIn",
						"description": "Only include historic details which belong to one of the passed comma-separated process instance ids."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "executionId",
						"description": "Filter by execution id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "taskId",
						"description": "Filter by task id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "activityInstanceId",
						"description": "Filter by activity instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseInstanceId",
						"description": "Filter by case instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "caseExecutionId",
						"description": "Filter by case execution id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableInstanceId",
						"description": "Filter by variable instance id."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "variableTypeIn",
						"description": "Only include historic details where the variable updates belong to one of the passed comma-separated\nlist of variable types. A list of all supported variable types can be found\n[here](https://docs.camunda.org/manual/7.19/user-guide/process-engine/variables/#supported-variable-values).\n**Note:** All non-primitive variables are associated with the type `serializable`."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "tenantIdIn",
						"description": "Filter by a comma-separated list of tenant ids."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "withoutTenantId",
						"description": "Only include historic details that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "string"},
						"in": "query",
						"name": "userOperationId",
						"description": "Filter by a user operation id."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "formFields",
						"description": "Only include `HistoricFormFields`. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "variableUpdates",
						"description": "Only include `HistoricVariableUpdates`. Value may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "excludeTaskDetails",
						"description": "Excludes all task-related `HistoricDetails`, so only items which have no task id set will be selected.\nWhen this parameter is used together with `taskId`, this call is ignored and task details are not excluded.\nValue may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "initial",
						"description": "Restrict to historic variable updates that contain only initial variable values.\nValue may only be `true`, as `false` is the default behavior."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "occurredBefore",
						"description": "Restrict to historic details that occured before the given date (including the date).\nDefault [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200."
					},
					{
						"schema": {
							"format": "date-time",
							"type": "string"
						},
						"in": "query",
						"name": "occurredAfter",
						"description": "Restrict to historic details that occured after the given date (including the date).\nDefault [format](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/)\n`yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"processInstanceId",
								"variableName",
								"variableType",
								"variableRevision",
								"formPropertyId",
								"time",
								"occurrence",
								"tenantId"
							]
						},
						"in": "query",
						"name": "sortBy",
						"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
					},
					{
						"schema": {
							"type": "string",
							"enum": [
								"asc",
								"desc"
							]
						},
						"in": "query",
						"name": "sortOrder",
						"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "firstResult",
						"description": "Pagination of results. Specifies the index of the first result to return."
					},
					{
						"schema": {"type": "integer"},
						"in": "query",
						"name": "maxResults",
						"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
					},
					{
						"schema": {"type": "boolean"},
						"in": "query",
						"name": "deserializeValues",
						"description": "Determines whether serializable variable values (typically variables that\nstore custom Java objects) should be deserialized on server side (default\n`true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side\nand transformed to JSON using\n[Jackson's](https://github.com/FasterXML/jackson) POJO/bean property\nintrospection feature. Note that this requires the Java classes of the\nvariable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized\nformat. For example, a variable that is serialized as XML will be returned as\na JSON string containing XML.\n\n**Note:** While `true` is the default value for reasons of backward\ncompatibility, we recommend setting this parameter to `false` when developing\nweb applications that are independent of the Java process applications\ndeployed to the engine."
					}
				],
				"tags": ["Historic Detail"]
			}
		},
		"/task/{id}/assignee": {"post": {
			"summary": "Set Assignee",
			"requestBody": {
				"description": "Provide the id of the user that will be the assignee of the task.",
				"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/UserIdDto"},
					"examples": {"example-1": {
						"summary": "Request Body",
						"description": "POST `/task/anId/assignee`",
						"value": {"userId": "aUserId"}
					}}
				}}
			},
			"operationId": "setAssignee",
			"description": "Changes the assignee of a task to a specific user.\n\n**Note:** The difference with the [Claim Task](https://docs.camunda.org/manual/7.19/reference/rest/task/post-claim/)\nmethod is that this method does not check if the task already has a user\nassigned to it.",
			"responses": {
				"500": {
					"description": "Task with given id does not exist or setting the assignee was not successful.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the task to set the assignee for.",
				"required": true
			}],
			"tags": ["Task"]
		}},
		"/condition": {"post": {
			"summary": "Evaluate",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/EvaluationConditionDto"},
				"examples": {"example-1": {
					"summary": "POST /condition",
					"description": "The content of the Request Body",
					"value": {
						"variables": {
							"city": {
								"type": "String",
								"value": "Parma"
							},
							"temperature": {
								"valueInfo": {"transient": true},
								"type": "Integer",
								"value": 24
							}
						},
						"businessKey": "aBusinessKey",
						"tenantId": "aTenantId"
					}
				}}
			}}},
			"operationId": "evaluateCondition",
			"description": "Triggers evaluation of conditions for conditional start event(s). \nInternally this maps to the engines condition evaluation builder method ConditionEvaluationBuilder#evaluateStartConditions(). \nFor more information see the [Conditional Start Events](https://docs.camunda.org/manual/7.19/reference/bpmn20/events/conditional-events/#conditional-start-event)\nsection of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.19/reference/bpmn20/).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/ProcessInstanceDto"}
						},
						"examples": {"example-1": {
							"summary": "Status 200 Response",
							"description": "The Response content of a status 200",
							"value": [
								{
									"caseInstanceId": null,
									"businessKey": "aBusinessKey",
									"ended": false,
									"tenantId": "aTenantId",
									"links": [],
									"id": "aProcInstId",
									"suspended": false,
									"definitionId": "aProcDefId"
								},
								{
									"caseInstanceId": null,
									"businessKey": "aBusinessKey",
									"ended": false,
									"tenantId": "aTenantId",
									"links": [],
									"id": "anotherId",
									"suspended": false,
									"definitionId": "aProcDefId"
								}
							]
						}}
					}}
				},
				"400": {
					"description": "If both tenantId and withoutTenantId are supplied.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "If the user is not allowed to start the process instance of the process definition, which start condition was evaluated to `true`.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				}
			},
			"tags": ["Condition"]
		}},
		"/migration/generate": {"post": {
			"summary": "Generate Migration Plan",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/MigrationPlanGenerationDto"},
				"examples": {"example-1": {
					"summary": "POST `/migration/generate`",
					"value": {
						"targetProcessDefinitionId": "aProcessDefinitionId2",
						"updateEventTriggers": true,
						"variables": {"foo": {
							"valueInfo": {
								"objectTypeName": "java.util.ArrayList",
								"serializationDataFormat": "application/json"
							},
							"type": "Object",
							"value": "[5,6]"
						}},
						"sourceProcessDefinitionId": "aProcessDefinitionId1"
					}
				}}
			}}},
			"operationId": "generateMigrationPlan",
			"description": "Generates a migration plan for two process definitions. The generated migration\nplan contains migration instructions which map equal activities\nbetween the\ntwo process definitions.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/MigrationPlanDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "POST `/migration/generate`",
							"value": {
								"targetProcessDefinitionId": "aProcessDefinitionId2",
								"instructions": [
									{
										"targetActivityIds": ["aUserTask"],
										"sourceActivityIds": ["aUserTask"],
										"updateEventTrigger": false
									},
									{
										"targetActivityIds": ["anotherEvent"],
										"sourceActivityIds": ["anEvent"],
										"updateEventTrigger": true
									}
								],
								"variables": {"foo": {
									"valueInfo": {
										"objectTypeName": "java.util.ArrayList",
										"serializationDataFormat": "application/json"
									},
									"type": "Object",
									"value": "[5,6]"
								}},
								"sourceProcessDefinitionId": "aProcessDefinitionId1"
							}
						}}
					}}
				},
				"400": {
					"description": "\nThe requested migration was invalid. See\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.\n",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"tags": ["Migration"]
		}},
		"/variable-instance/{id}/data": {"get": {
			"summary": "Get Variable Instance (Binary)",
			"operationId": "getVariableInstanceBinary",
			"description": "Retrieves the content of a variable by id. Applicable for byte array and file\nvariables.",
			"responses": {
				"200": {
					"description": "Request successful. For binary variables or files without any MIME type information, a byte stream is returned.\n                      File variables with MIME type information are returned as the saved type. Additionally, for file\n                      variables the Content-Disposition header will be set.",
					"content": {
						"application/octet-stream": {"schema": {
							"format": "binary",
							"description": "For files without any MIME type information, a byte stream is returned.",
							"type": "string"
						}},
						"*/*": {"schema": {
							"format": "binary",
							"description": "Files with MIME type information are returned as the saved type. Additionally, for file\n                            responses, the Content-Disposition header will be set.",
							"type": "string"
						}}
					}
				},
				"400": {
					"description": "Variable with given id exists but does not serialize as binary data. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the variable instance.",
				"required": true
			}],
			"tags": ["Variable Instance"]
		}},
		"/decision-requirements-definition/count": {"get": {
			"summary": "Get Decision Requirements Definition Count",
			"operationId": "getDecisionRequirementsDefinitionsCount",
			"description": "Requests the number of decision requirements definitions that fulfill the query\ncriteria.\nTakes the same filtering parameters as the\n[Get Decision Requirements Definitions](https://docs.camunda.org/manual/7.19/reference/rest/decision-requirements-definition/get-query/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/CountResultDto"},
						"examples": {"example-1": {
							"summary": "GET `/decision-requirements-definition/count?key=dish`",
							"description": "GET `/decision-requirements-definition/count?key=dish`",
							"value": {"count": 1}
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if\na `sortOrder` parameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionId",
					"description": "Filter by decision requirements definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "decisionRequirementsDefinitionIdIn",
					"description": "Filter by decision requirements definition ids."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "name",
					"description": "Filter by decision requirements definition name."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "nameLike",
					"description": "Filter by decision requirements definition names that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "deploymentId",
					"description": "Filter by the id of the deployment a decision requirement definition belongs to."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "key",
					"description": "Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact\nmatch."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "keyLike",
					"description": "Filter by decision requirements definition keys that the parameter is a substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "category",
					"description": "Filter by decision requirements definition category. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "categoryLike",
					"description": "Filter by decision requirements definition categories that the parameter is a substring\nof."
				},
				{
					"schema": {
						"format": "int32",
						"type": "integer"
					},
					"in": "query",
					"name": "version",
					"description": "Filter by decision requirements definition version."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "latestVersion",
					"description": "Only include those decision requirements definitions that are latest versions. Value may\nonly be `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceName",
					"description": "Filter by the name of the decision requirements definition resource. Exact match."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "resourceNameLike",
					"description": "Filter by names of those decision requirements definition resources that the parameter is\na substring of."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids. A decision requirements definition must\nhave one of the given tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include decision requirements definitions which belong to no tenant. Value may only\nbe `true`, as `false` is the default behavior."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "includeDecisionRequirementsDefinitionsWithoutTenantId",
					"description": "Include decision requirements definitions which belong to no tenant. Can be used in\ncombination with `tenantIdIn`. Value may only be `true`, as `false` is the\ndefault behavior."
				}
			],
			"tags": ["Decision Requirements Definition"]
		}},
		"/engine": {"get": {
			"summary": "Get List",
			"operationId": "getProcessEngineNames",
			"description": "Retrieves the names of all process engines available on your platform.\n**Note**: You cannot prepend `/engine/{name}` to this method.",
			"responses": {"200": {
				"description": "Request successful.",
				"content": {"application/json": {
					"schema": {
						"type": "array",
						"items": {"$ref": "#/components/schemas/ProcessEngineDto"}
					},
					"examples": {"example-1": {"value": [
						{"name": "default"},
						{"name": "anotherEngineName"}
					]}}
				}}
			}},
			"tags": ["Engine"]
		}},
		"/signal": {"post": {
			"summary": "Event",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/SignalDto"},
				"examples": {"examle-1": {
					"summary": "POST /signal",
					"description": "The content of the Request Body",
					"value": {
						"variables": {"newTimePeriodInMonth": {"value": 24}},
						"name": "policy_conditions_changed"
					}
				}}
			}}},
			"operationId": "throwSignal",
			"description": "A signal is an event of global scope (broadcast semantics) and is delivered to all\nactive handlers. Internally this maps to the engine's signal event received builder\nmethod `RuntimeService#createSignalEvent()`. For more information about the signal\nbehavior, see the [Signal Events](https://docs.camunda.org/manual/7.19/reference/bpmn20/events/signal-events/)\nsection of the [BPMN 2.0 Implementation Reference](https://docs.camunda.org/manual/7.19/reference/bpmn20/).",
			"responses": {
				"400": {
					"description": "Returned if:\n\n* no name was given\n* the variable value or type is invalid, for example if the value could not be\nparsed to an integer value or the passed variable type is not supported\n* a tenant id and an execution id is specified.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the\nerror response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "Returned if a single execution is specified and no such execution exists or has not\nsubscribed to the signal.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the\nerror response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"403": {
					"description": "Returned if the user is not allowed to throw a signal event.\n\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the\nerror response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				}
			},
			"parameters": [],
			"tags": ["Signal"]
		}},
		"/process-definition/key/{key}/statistics": {"get": {
			"summary": "Get Activity Instance Statistics",
			"operationId": "getActivityStatisticsByProcessDefinitionKey",
			"description": "Retrieves runtime statistics of the latest version of the given process definition\nwhich belongs to no tenant, grouped by activities.\nThese statistics include the number of running activity instances, optionally the number of failed jobs\nand also optionally the number of incidents either grouped by incident types or\nfor a specific incident type.\n**Note**: This does not include historic data.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/ActivityStatisticsResultDto"}
						},
						"examples": {
							"example-3": {
								"summary": "GET /process-definition/key/aProcessDefinitionKey/statistics?incidentsForType=anIncident",
								"description": "Request with Query Parameter `incidentsForType=anIncident`",
								"value": [{
									"instances": 123,
									"failedJobs": 0,
									"incidents": [{
										"incidentCount": 20,
										"incidentType": "anIncident"
									}],
									"id": "anActivity"
								}]
							},
							"example-1": {
								"summary": "GET /process-definition/key/aProcessDefinitionKey/statistics?failedJobs=true",
								"description": "Request with Query Parameter `failedJobs=true`",
								"value": [
									{
										"instances": 123,
										"failedJobs": 42,
										"incidents": [],
										"id": "anActivity"
									},
									{
										"instances": 124,
										"failedJobs": 43,
										"incidents": [],
										"id": "anotherActivity"
									}
								]
							},
							"example-2": {
								"summary": "GET /process-definition/key/aProcessDefinitionKey/statistics?incidents=true",
								"description": "Request with Query Parameter `incidents=true`",
								"value": [
									{
										"instances": 123,
										"failedJobs": 0,
										"incidents": [
											{
												"incidentCount": 42,
												"incidentType": "failedJob"
											},
											{
												"incidentCount": 20,
												"incidentType": "anIncident"
											}
										],
										"id": "anActivity"
									},
									{
										"instances": 124,
										"failedJobs": 0,
										"incidents": [
											{
												"incidentCount": 43,
												"incidentType": "failedJob"
											},
											{
												"incidentCount": 22,
												"incidentType": "anIncident"
											},
											{
												"incidentCount": 15,
												"incidentType": "anotherIncident"
											}
										],
										"id": "anotherActivity"
									}
								]
							}
						}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"404": {
					"description": "Process definition with given key does not exist.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "key",
					"description": "The key of the process definition (the latest version thereof) to be retrieved.",
					"required": true
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "failedJobs",
					"description": "Whether to include the number of failed jobs in the result or not. Valid values are `true` or `false`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "incidents",
					"description": "Valid values for this property are `true` or `false`.\nIf this property has been set to `true` the result will include the corresponding number of incidents\nfor each occurred incident type.\nIf it is set to `false`, the incidents will not be included in the result.\nCannot be used in combination with `incidentsForType`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "incidentsForType",
					"description": "If this property has been set with any incident type (i.e., a string value) the result\nwill only include the number of incidents for the assigned incident type.\nCannot be used in combination with `incidents`.\nSee the [User Guide](https://docs.camunda.org/manual/7.19/user-guide/process-engine/incidents/#incident-types)\nfor a list of incident types."
				}
			],
			"tags": ["Process Definition"]
		}},
		"/execution/{id}": {"get": {
			"summary": "Get Execution",
			"operationId": "getExecution",
			"description": "Retrieves an execution by id, according to the `Execution` interface in the\nengine.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ExecutionDto"},
						"examples": {"example-1": {
							"description": "GET `/execution/anExecutionId`",
							"value": {
								"processInstanceId": "aProcInstId",
								"ended": false,
								"tenantId": null,
								"id": "anExecutionId"
							}
						}}
					}}
				},
				"404": {
					"description": "Execution with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the execution to be retrieved.",
				"required": true
			}],
			"tags": ["Execution"]
		}},
		"/history/identity-link-log": {"get": {
			"summary": "Get Identity Link Logs",
			"operationId": "getHistoricIdentityLinks",
			"description": "Queries for historic identity link logs that fulfill given parameters.\nThe size of the result set can be retrieved by using the\n[Get Identity-Link-Log Count](https://docs.camunda.org/manual/7.19/reference/rest/history/identity-links/get-identity-link-query-count/)\nmethod.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/HistoricIdentityLinkLogDto"}
						},
						"examples": {"example-1": {
							"summary": "GET `/history/identity-link-log?taskId=aTaskId`",
							"description": "GET `/history/identity-link-log?taskId=aTaskId`",
							"value": [
								{
									"processDefinitionId": "12",
									"groupId": "aGroupId",
									"type": "candidate",
									"userId": "aUserId",
									"processDefinitionKey": "oneTaskProcess",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"tenantId": "tenant1",
									"operationType": "add",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "1",
									"time": "2014-03-01T08:00:00.000+0200",
									"taskId": "aTaskId",
									"assignerId": "aAssignerId"
								},
								{
									"processDefinitionId": "12",
									"groupId": "aGroupId",
									"type": "candidate",
									"userId": "aUserId",
									"processDefinitionKey": "oneTaskProcess",
									"removalTime": "2018-02-10T14:33:19.000+0200",
									"tenantId": "tenant1",
									"operationType": "delete",
									"rootProcessInstanceId": "aRootProcessInstanceId",
									"id": "2",
									"time": "2014-03-05T10:00:00.000+0200",
									"taskId": "aTaskId",
									"assignerId": "aAssignerId"
								}
							]
						}}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid, for example if a `sortOrder`\nparameter is supplied, but no `sortBy`. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "type",
					"description": "Restricts to identity links that have the given type (candidate/assignee/owner)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "userId",
					"description": "Restricts to identity links that have the given user id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "groupId",
					"description": "Restricts to identity links that have the given group id."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "dateBefore",
					"description": "Restricts to identity links that have the time before the given time."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "dateAfter",
					"description": "Restricts to identity links that have the time after the given time."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "taskId",
					"description": "Restricts to identity links that have the given task id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionId",
					"description": "Restricts to identity links that have the given process definition id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processDefinitionKey",
					"description": "Restricts to identity links that have the given process definition key."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "operationType",
					"description": "Restricts to identity links that have the given operationType (add/delete)."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "assignerId",
					"description": "Restricts to identity links that have the given assigner id."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "tenantIdIn",
					"description": "Filter by a comma-separated list of tenant ids."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "withoutTenantId",
					"description": "Only include historic identity links that belong to no tenant. Value may only be\n`true`, as `false` is the default behavior."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"time",
							"type",
							"userId",
							"groupId",
							"taskId",
							"processDefinitionId",
							"processDefinitionKey",
							"operationType",
							"assignerId",
							"tenantId"
						]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "firstResult",
					"description": "Pagination of results. Specifies the index of the first result to return."
				},
				{
					"schema": {"type": "integer"},
					"in": "query",
					"name": "maxResults",
					"description": "Pagination of results. Specifies the maximum number of results to return.\nWill return less results if there are no more results left."
				}
			],
			"tags": ["Historic Identity Link Log"]
		}},
		"/history/process-definition/{id}/statistics": {"get": {
			"summary": "Get Historic Activity Statistics",
			"operationId": "getHistoricActivityStatistics",
			"description": "Retrieves historic statistics of a given process definition, grouped by activities.\nThese statistics include the number of running activity instances and,\noptionally, the number of canceled activity instances, finished\nactivity instances and activity instances which completed a scope\n(i.e., in BPMN 2.0 manner: a scope is completed by an activity\ninstance when the activity instance consumed a token but did not emit\na new token).\n**Note:** This only includes historic data.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {
							"type": "array",
							"items": {"$ref": "#/components/schemas/HistoricActivityStatisticsDto"}
						},
						"examples": {
							"example-3": {
								"summary": "Request With `completeScope=true`",
								"description": "GET `history/process-definition/aProcessDefinitionId/statistics?completeScope=true`",
								"value": [
									{
										"canceled": 0,
										"resolvedIncidents": 0,
										"instances": 123,
										"finished": 0,
										"id": "anActivity",
										"openIncidents": 0,
										"deletedIncidents": 0,
										"completeScope": 20
									},
									{
										"canceled": 0,
										"resolvedIncidents": 0,
										"instances": 200,
										"finished": 0,
										"id": "anotherActivity",
										"openIncidents": 0,
										"deletedIncidents": 0,
										"completeScope": 1
									}
								]
							},
							"example-1": {
								"summary": "Request With `canceled=true`",
								"description": "GET `history/process-definition/aProcessDefinitionId/statistics?canceled=true`",
								"value": [
									{
										"canceled": 50,
										"resolvedIncidents": 0,
										"instances": 123,
										"finished": 0,
										"id": "anActivity",
										"openIncidents": 0,
										"deletedIncidents": 0,
										"completeScope": 0
									},
									{
										"canceled": 150,
										"resolvedIncidents": 0,
										"instances": 200,
										"finished": 0,
										"id": "anotherActivity",
										"openIncidents": 0,
										"deletedIncidents": 0,
										"completeScope": 0
									}
								]
							},
							"example-2": {
								"summary": "Request With `finished=true`",
								"description": "GET `history/process-definition/aProcessDefinitionId/statistics?finished=true`",
								"value": [
									{
										"canceled": 0,
										"resolvedIncidents": 0,
										"instances": 123,
										"finished": 20,
										"id": "anActivity",
										"openIncidents": 0,
										"deletedIncidents": 0,
										"completeScope": 0
									},
									{
										"canceled": 0,
										"resolvedIncidents": 0,
										"instances": 200,
										"finished": 30,
										"id": "anotherActivity",
										"openIncidents": 0,
										"deletedIncidents": 0,
										"completeScope": 0
									}
								]
							}
						}
					}}
				},
				"400": {
					"description": "Returned if some of the query parameters are invalid. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the process definition.",
					"required": true
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "canceled",
					"description": "Whether to include the number of canceled activity instances in the result or not. Valid\nvalues are `true` or `false`. Default: `false`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "finished",
					"description": "Whether to include the number of finished activity instances in the result or not. Valid\nvalues are `true` or `false`. Default: `false`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "completeScope",
					"description": "Whether to include the number of activity instances which completed a scope in the result\nor not. Valid values are `true` or `false`. Default: `false`."
				},
				{
					"schema": {"type": "boolean"},
					"in": "query",
					"name": "incidents",
					"description": "Whether to include the number of incidents. Valid values are `true` or `false`. Default: `false`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedBefore",
					"description": "Restrict to process instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), \nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, \ne.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "startedAfter",
					"description": "Restrict to process instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), \nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, \ne.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "finishedBefore",
					"description": "Restrict to process instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), \nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, \ne.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {
						"format": "date-time",
						"type": "string"
					},
					"in": "query",
					"name": "finishedAfter",
					"description": "Restrict to process instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.19/reference/rest/overview/date-format/), \nthe date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, \ne.g., `2013-01-23T14:42:45.000+0200`."
				},
				{
					"schema": {"type": "string"},
					"in": "query",
					"name": "processInstanceIdIn",
					"description": "Restrict to process instances with the given IDs. The IDs must be provided as a comma-\nseparated list."
				},
				{
					"schema": {
						"type": "string",
						"enum": ["activityId"]
					},
					"in": "query",
					"name": "sortBy",
					"description": "Sort the results lexicographically by a given criterion.\nMust be used in conjunction with the sortOrder parameter."
				},
				{
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					},
					"in": "query",
					"name": "sortOrder",
					"description": "Sort the results in a given order. Values may be asc for ascending order or desc for descending order.\nMust be used in conjunction with the sortBy parameter."
				}
			],
			"tags": ["Historic Process Definition"]
		}},
		"/task/{id}/localVariables/{varName}": {
			"get": {
				"summary": "Get Local Task Variable",
				"operationId": "getTaskLocalVariable",
				"description": "Retrieves a variable from the context of a given task by id.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/VariableValueDto"},
							"examples": {
								"example-1": {
									"summary": "GET `/task/aTaskId/variables/myObject123`",
									"value": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": {
											"prop2": "b",
											"prop1": "a"
										}
									}
								},
								"example-2": {
									"summary": "GET `/task/aTaskId/variables/myObject123?deserializeValue=false`",
									"value": {
										"valueInfo": {
											"objectTypeName": "com.example.MyObject",
											"serializationDataFormat": "application/xml"
										},
										"type": "Object",
										"value": "ab"
									}
								}
							}
						}}
					},
					"500": {
						"description": "Task id is `null` or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "Variable with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to retrieve the variable from.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to get",
						"required": true
					},
					{
						"schema": {
							"default": true,
							"type": "boolean"
						},
						"in": "query",
						"name": "deserializeValue",
						"description": "Determines whether serializable variable values (typically variables that store custom Java objects)\nshould be deserialized on the server side (default `true`).\n\nIf set to `true`, a serializable variable will be deserialized on server side and transformed to JSON\nusing [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature.\nNote that this requires the Java classes of the variable value to be on the REST API's classpath.\n\nIf set to `false`, a serializable variable will be returned in its serialized format.\nFor example, a variable that is serialized as XML will be returned as a JSON string containing XML.\n\nNote: While `true` is the default value for reasons of backward compatibility, we recommend setting this\nparameter to `false` when developing web applications that are independent of the Java process\napplications deployed to the engine."
					}
				],
				"tags": ["Task Local Variable"]
			},
			"delete": {
				"summary": "Delete Local Task Variable",
				"operationId": "deleteTaskLocalVariable",
				"description": "Removes a local variable from a task by id.",
				"responses": {
					"500": {
						"description": "Task id is `null` or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to delete the variable from.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to be removed.",
						"required": true
					}
				],
				"tags": ["Task Local Variable"]
			},
			"put": {
				"summary": "Update Local Task Variable",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/VariableValueDto"},
					"examples": {
						"example-1": {
							"summary": "PUT /task/aTaskId/variables/aVarName",
							"description": "Status 204. No content.",
							"value": {
								"type": "String",
								"value": "someValue"
							}
						},
						"example-2": {
							"summary": "PUT /task/aTaskId/variables/aVarName",
							"description": "An Object Variable PUT Request. Status 204. No content.",
							"value": {
								"valueInfo": {
									"objectTypeName": "com.example.MyObject",
									"serializationDataFormat": "application/xml"
								},
								"type": "Object",
								"value": "ab"
							}
						}
					}
				}}},
				"operationId": "putTaskLocalVariable",
				"description": "Sets a variable in the context of a given task.",
				"responses": {
					"400": {
						"description": "The variable name, value or type is invalid, for example if the value could not be parsed to an `Integer`\nvalue or the passed variable type is not supported or a new transient variable has the name that is\nalready persisted. See the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"500": {
						"description": "The variable name is `null`, or the Task id is `null` or does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful."}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the task to set the variable for.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "varName",
						"description": "The name of the variable to set.",
						"required": true
					}
				],
				"tags": ["Task Local Variable"]
			}
		},
		"/tenant/{id}/group-members/{groupId}": {
			"delete": {
				"summary": "Create Tenant Group Membership",
				"operationId": "deleteGroupMembership",
				"description": "Creates a membership between a tenant and a group.",
				"responses": {
					"500": {
						"description": "In case an internal error occurs. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "Identity service is read-only.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the tenant.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "groupId",
						"description": "The id of the group.",
						"required": true
					}
				],
				"tags": ["Tenant"]
			},
			"put": {
				"summary": "Create Tenant Group Membership",
				"operationId": "createGroupMembership",
				"description": "Creates a membership between a tenant and a group.",
				"responses": {
					"500": {
						"description": "In case an internal error occurs. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "Identity service is read-only.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "id",
						"description": "The id of the tenant.",
						"required": true
					},
					{
						"schema": {"type": "string"},
						"in": "path",
						"name": "groupId",
						"description": "The id of the group.",
						"required": true
					}
				],
				"tags": ["Tenant"]
			}
		},
		"/job-definition/{id}/retries": {"put": {
			"summary": "Set Job Retries By Job Definition Id",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/RetriesDto"},
				"examples": {"example-1": {
					"summary": "PUT `/job-definition/aJobDefId/retries`",
					"value": {
						"retries": 3,
						"dueDate": "2017-04-06T13:57:45.000+0200"
					}
				}}
			}}},
			"operationId": "setJobRetriesJobDefinition",
			"description": "Sets the number of retries of all **failed** jobs associated with the given job\ndefinition id.",
			"responses": {
				"500": {
					"description": "The retries could not be set successfully. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the job definition to be updated.",
				"required": true
			}],
			"tags": ["Job Definition"]
		}},
		"/authorization/{id}": {
			"get": {
				"summary": "Get Authorization",
				"operationId": "getAuthorization",
				"description": "Retrieves an authorization by id.",
				"responses": {
					"200": {
						"description": "Request successful.",
						"content": {"application/json": {
							"schema": {"$ref": "#/components/schemas/AuthorizationDto"},
							"examples": {"example-1": {
								"summary": "Status 200.",
								"description": "GET `/authorization/anAuthorizationId`",
								"value": {
									"resourceId": "*",
									"permissions": [
										"CREATE",
										"READ"
									],
									"groupId": null,
									"rootProcessInstanceId": "f8259e5d-ab9d-11e8-8449-e4a7a094a9d6",
									"id": "anAuthorizationId",
									"type": 0,
									"userId": "*",
									"resourceType": 1,
									"removalTime": "2018-02-10T14:33:19.000+0200"
								}
							}}
						}}
					},
					"404": {
						"description": "Authorization with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the authorization to be retrieved.",
					"required": true
				}],
				"tags": ["Authorization"]
			},
			"options": {
				"summary": "Authorization Resource Options",
				"operationId": "availableOperationsAuthorizationInstance",
				"description": "The OPTIONS request allows you to check for the set of available operations that the currently\nauthenticated user can perform on a given instance of the `/authorization` resource.\nWhether the user can perform an operation or not may depend on various factors, including the users\nauthorizations to interact with this resource and the internal configuration of the process engine.",
				"responses": {"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/ResourceOptionsDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "OPTIONS `/authorization/anAuthorizationId`",
							"value": {"links": [
								{
									"method": "GET",
									"rel": "self",
									"href": "http://localhost:8080/engine-rest/authorization/anAuthorizationId"
								},
								{
									"method": "PUT",
									"rel": "update",
									"href": "http://localhost:8080/engine-rest/authorization/anAuthorizationId"
								},
								{
									"method": "DELETE",
									"rel": "delete",
									"href": "http://localhost:8080/engine-rest/authorization/anAuthorizationId"
								}
							]}
						}}
					}}
				}},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the authorization to be retrieved.",
					"required": true
				}],
				"tags": ["Authorization"]
			},
			"delete": {
				"summary": "Delete Authorization",
				"operationId": "deleteAuthorization",
				"description": "Deletes an authorization by id.",
				"responses": {
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "If the authenticated user is unauthorized to delete the resource instance. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "Authorization cannot be found. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the authorization to be deleted.",
					"required": true
				}],
				"tags": ["Authorization"]
			},
			"put": {
				"summary": "Update an Authorization",
				"requestBody": {"content": {"application/json": {
					"schema": {"$ref": "#/components/schemas/AuthorizationUpdateDto"},
					"examples": {"example-1": {
						"summary": "PUT `/authorization/anAuthorizationId`",
						"value": {
							"resourceId": "*",
							"permissions": 16,
							"groupId": null,
							"userId": "*",
							"resourceType": 1
						}
					}}
				}}},
				"operationId": "updateAuthorization",
				"description": "Updates an authorization by id.",
				"responses": {
					"400": {
						"description": "Returned if some of the properties in the request body are invalid, for example if\na permission parameter is not valid for the provided resourceType.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"500": {
						"description": "The authorization could not be updated due to an internal server error. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"204": {"description": "Request successful. This method returns no content."},
					"403": {
						"description": "The authenticated user is unauthorized to update this resource. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					},
					"404": {
						"description": "The authorization with the requested Id cannot be found.",
						"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
					}
				},
				"parameters": [{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the authorization to be updated.",
					"required": true
				}],
				"tags": ["Authorization"]
			}
		},
		"/process-definition/{id}/deployed-start-form": {"get": {
			"summary": "Get Deployed Start Form",
			"operationId": "getDeployedStartForm",
			"description": "Retrieves the deployed form that can be referenced from a start event.\nFor further information please refer to [User Guide](https://docs.camunda.org/manual/7.19/user-guide/task-forms/#embedded-task-forms).",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {
						"application/json": {"schema": {
							"format": "binary",
							"description": "For `application/json` Responses, a byte stream is returned.",
							"type": "string"
						}},
						"application/xhtml+xml": {
							"schema": {
								"format": "binary",
								"description": "For `application/xhtml+xml` Responses, a byte stream is returned.",
								"type": "string"
							},
							"examples": {"example-1": {
								"summary": "Status 200 Response",
								"description": "Resonse for GET `/process-definition/processDefinitionId/deployed-start-form`",
								"value": "<form role=\"form\" name=\"invoiceForm\"\n                                      class=\"form-horizontal\">\n\n                                  <div class=\"form-group\">\n                                    <label class=\"control-label col-md-4\"\n                                           for=\"creditor\">Creditor<\/label>\n                                    <div class=\"col-md-8\">\n                                      <input cam-variable-name=\"creditor\"\n                                             cam-variable-type=\"String\"\n                                             id=\"creditor\"\n                                             class=\"form-control\"\n                                             type=\"text\"\n                                             required />\n                                      <div class=\"help\">\n                                        (e.g. &quot;Great Pizza for Everyone Inc.&quot;)\n                                      <\/div>\n                                    <\/div>\n                                  <\/div>\n\n                                <\/form>"
							}}
						}
					}
				},
				"400": {
					"description": "The form key has wrong format.  See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"403": {
					"description": "The deployed start form cannot be retrieved due to missing permissions on process definition resource.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AuthorizationExceptionDto"}}}
				},
				"404": {
					"description": "No deployed start form for a given process definition exists. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the process definition to get the deployed start form for.",
				"required": true
			}],
			"tags": ["Process Definition"]
		}},
		"/execution/{id}/messageSubscriptions/{messageName}/trigger": {"post": {
			"summary": "Trigger Message Event Subscription",
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/ExecutionTriggerDto"},
				"examples": {"example-1": {
					"summary": "POST `/execution/anExecutionId/messageSubscriptions/someMessage/trigger`",
					"value": {"variables": {
						"aVariable": {
							"type": "Boolean",
							"value": true
						},
						"anotherVariable": {
							"type": "Integer",
							"value": 42
						}
					}}
				}}
			}}},
			"operationId": "triggerEvent",
			"description": "Delivers a message to a specific execution by id, to trigger an existing message\nevent subscription. Inject process variables as the message's\npayload.",
			"responses": {
				"400": {
					"description": "The variable value or type is invalid, for example if the value could not be parsed\nto an Integer value or the passed variable type is not supported.\nSee the [Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling) for the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"500": {
					"description": "The addressed execution has no pending message subscriptions for the given message.\nSee the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful. This method returns no content."}
			},
			"parameters": [
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "id",
					"description": "The id of the execution to submit the message to.",
					"required": true
				},
				{
					"schema": {"type": "string"},
					"in": "path",
					"name": "messageName",
					"description": "The name of the message that the addressed subscription corresponds to.",
					"required": true
				}
			],
			"tags": ["Execution"]
		}},
		"/history/job-log/{id}": {"get": {
			"summary": "Get Job Log",
			"operationId": "getHistoricJobLog",
			"description": "Retrieves a historic job log by id.",
			"responses": {
				"200": {
					"description": "Request successful.",
					"content": {"application/json": {
						"schema": {"$ref": "#/components/schemas/HistoricJobLogDto"},
						"examples": {"example-1": {
							"summary": "Status 200.",
							"description": "GET `/history/job-log/someId`",
							"value": {
								"deletionLog": false,
								"jobDueDate": null,
								"successLog": false,
								"removalTime": "2018-02-10T14:33:19.000+0200",
								"processDefinitionKey": "aProcessDefinitionKey",
								"failureLog": false,
								"activityId": "serviceTask",
								"hostname": "aHostname",
								"deploymentId": "aDeploymentId",
								"rootProcessInstanceId": "aRootProcessInstanceId",
								"id": "someId",
								"jobType": "message",
								"jobPriority": 15,
								"timestamp": "2015-01-15T15:22:20.000+0200",
								"processInstanceId": "aProcessInstanceId",
								"processDefinitionId": "aProcessDefinitionId",
								"jobDefinitionId": "aJobDefinitionId",
								"creationLog": true,
								"jobExceptionMessage": null,
								"jobId": "aJobId",
								"jobRetries": 3,
								"executionId": "anExecutionId",
								"jobHandlerType": "async-continuation",
								"tenantId": null,
								"failedActivityId": null
							}
						}}
					}}
				},
				"404": {
					"description": "Historic job log with given id does not exist. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the log entry.",
				"required": true
			}],
			"tags": ["Historic Job Log"]
		}},
		"/external-task/{id}/lock": {"post": {
			"requestBody": {"content": {"application/json": {
				"schema": {"$ref": "#/components/schemas/LockExternalTaskDto"},
				"examples": {"example-1": {
					"summary": "POST /external-task/anId/lock",
					"value": {
						"workerId": "anId",
						"lockDuration": 100000
					}
				}}
			}}},
			"operationId": "lock",
			"description": "Lock an external task by a given id for a specified worker and amount of time.",
			"responses": {
				"400": {
					"description": "In case the lock duration is negative or the external task is already locked by\na different worker, an exception of type `InvalidRequestException` is returned. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				},
				"204": {"description": "Request successful."},
				"404": {
					"description": "Returned if the task does not exist. This could indicate a wrong task id as well as a cancelled task,\ne.g., due to a caught BPMN boundary event. See the\n[Introduction](https://docs.camunda.org/manual/7.19/reference/rest/overview/#error-handling)\nfor the error response format.",
					"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExceptionDto"}}}
				}
			},
			"parameters": [{
				"schema": {"type": "string"},
				"in": "path",
				"name": "id",
				"description": "The id of the external task.",
				"required": true
			}],
			"tags": ["External Task"]
		}}
	},
	"externalDocs": {
		"description": "Find out more about Camunda Rest API",
		"url": "https://docs.camunda.org/manual/7.19/reference/rest/overview/"
	},
	"info": {
		"license": {
			"name": "Apache License 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		},
		"description": "OpenApi Spec for Camunda Platform REST API.",
		"title": "Camunda Platform REST API",
		"version": "7.19.4-ee"
	},
	"tags": [
		{"name": "Authorization"},
		{"name": "Batch"},
		{"name": "Condition"},
		{"name": "Decision Definition"},
		{"name": "Decision Requirements Definition"},
		{"name": "Deployment"},
		{"name": "Engine"},
		{"name": "Event Subscription"},
		{"name": "Execution"},
		{"name": "External Task"},
		{"name": "Filter"},
		{"name": "Group"},
		{"name": "Historic Activity Instance"},
		{"name": "Historic Batch"},
		{"name": "Historic Decision Definition"},
		{"name": "Historic Decision Instance"},
		{"name": "Historic Decision Requirements Definition"},
		{"name": "Historic Detail"},
		{"name": "Historic External Task Log"},
		{"name": "Historic Identity Link Log"},
		{"name": "Historic Incident"},
		{"name": "Historic Job Log"},
		{"name": "Historic Process Definition"},
		{"name": "Historic Process Instance"},
		{"name": "Historic Task Instance"},
		{"name": "Historic User Operation Log"},
		{"name": "Historic Variable Instance"},
		{"name": "History Cleanup"},
		{"name": "Identity"},
		{"name": "Incident"},
		{"name": "Job"},
		{"name": "Job Definition"},
		{"name": "Message"},
		{"name": "Metrics"},
		{"name": "Migration"},
		{"name": "Modification"},
		{"name": "Process Definition"},
		{"name": "Process Instance"},
		{"name": "Signal"},
		{"name": "Schema Log"},
		{"name": "Task"},
		{"name": "Task Attachment"},
		{"name": "Task Comment"},
		{"name": "Task Identity Link"},
		{"name": "Task Local Variable"},
		{"name": "Task Variable"},
		{"name": "Telemetry"},
		{"name": "Tenant"},
		{"name": "User"},
		{"name": "Variable Instance"},
		{"name": "Version"}
	]
}
